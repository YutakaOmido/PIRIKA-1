//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/katsura/Documents/objective-c/PIRIKA/PIRIKA/java/com/katsura/iProlog/PrologInterface.java
//
//  Created by katsura on 5/21/14.
//

#include "Goal.h"
#include "IOSByteArray.h"
#include "IOSClass.h"
#include "KnowledgeBase.h"
#include "ParserException.h"
#include "ProlConsult.h"
#include "ProlContext.h"
#include "ProlStreamManager.h"
#include "PrologInterface.h"
#include "Term.h"
#include "Utils.h"
#include "Var.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/PrintWriter.h"
#include "java/io/Reader.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/StringBuffer.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"

@implementation ComKatsuraIPrologPrologInterface

- (id)init {
  return [self initComKatsuraIPrologPrologInterfaceWithNSString:@"test"];
}

- (id)initComKatsuraIPrologPrologInterfaceWithNSString:(NSString *)name {
  if (self = [super init]) {
    ComKatsuraIPrologPrologInterface_set_context_(self, nil);
    ComKatsuraIPrologPrologInterface_set_name_(self, nil);
    ComKatsuraIPrologPrologInterface_set_goal_(self, nil);
    ComKatsuraIPrologPrologInterface_set_context_(self, [[[ComIgormaznitsaProlLogicProlContext alloc] initWithNSString:name] autorelease]);
  }
  return self;
}

- (id)initWithNSString:(NSString *)name {
  return [self initComKatsuraIPrologPrologInterfaceWithNSString:name];
}

- (void)clearEngine {
  [((ComIgormaznitsaProlLogicProlContext *) nil_chk(self->context_)) halt];
  ComKatsuraIPrologPrologInterface_set_context_(self, [[[ComIgormaznitsaProlLogicProlContext alloc] initWithNSString:name_] autorelease]);
}

- (NSString *)fileInputWithNSString:(NSString *)fileName {
  id<ComIgormaznitsaProlIoProlStreamManager> streamManager = [((ComIgormaznitsaProlLogicProlContext *) nil_chk(self->context_)) getStreamManager];
  JavaIoReader *reader = nil;
  @try {
    reader = [((id<ComIgormaznitsaProlIoProlStreamManager>) nil_chk(streamManager)) getReaderForResourceWithNSString:fileName];
    ComIgormaznitsaProlParserProlConsult *consulter = [[[ComIgormaznitsaProlParserProlConsult alloc] initWithJavaIoReader:reader withComIgormaznitsaProlLogicProlContext:context_] autorelease];
    [consulter consult];
  }
  @catch (JavaIoIOException *e) {
    return [NSString stringWithString:@"File not found\n"];
  }
  @finally {
    if (reader != nil) {
      @try {
        [reader close];
      }
      @catch (JavaIoIOException *e) {
        [((JavaIoIOException *) nil_chk(e)) printStackTrace];
      }
    }
  }
  return [NSString stringWithString:@"Complete\n"];
}

- (ComIgormaznitsaProlDataTerm *)userInputWithNSString:(NSString *)input {
  @try {
    ComKatsuraIPrologPrologInterface_set_goal_(self, nil);
    ComKatsuraIPrologPrologInterface_set_goal_(self, [[[ComIgormaznitsaProlLogicGoal alloc] initWithNSString:input withComIgormaznitsaProlLogicProlContext:self->context_] autorelease]);
    return [self->goal_ solve];
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
  }
  @catch (JavaLangInterruptedException *e) {
    [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
  }
  return nil;
}

- (ComIgormaznitsaProlDataTerm *)fail {
  if (self->goal_ == nil) {
    return nil;
  }
  @try {
    return [((ComIgormaznitsaProlLogicGoal *) nil_chk(self->goal_)) solve];
  }
  @catch (JavaLangInterruptedException *e) {
    [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
  }
  return nil;
}

- (NSString *)resultTerm2stringWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)term {
  JavaLangStringBuffer *sb = [[[JavaLangStringBuffer alloc] init] autorelease];
  id<JavaUtilMap> vars = [ComIgormaznitsaProlUtilsUtils fillTableWithVarsWithComIgormaznitsaProlDataTerm:term];
  id<JavaUtilIterator> iter = [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk(vars)) values])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
    ComIgormaznitsaProlDataVar *variable = [iter next];
    if ([((ComIgormaznitsaProlDataVar *) nil_chk(variable)) isAnonymous]) {
      continue;
    }
    [sb appendWithNSString:[variable getText]];
    [sb appendWithNSString:@"="];
    if ([variable isUndefined]) {
      [sb appendWithNSString:@"???"];
      [sb appendWithNSString:@"\n"];
    }
    else {
      [sb appendWithNSString:[variable description]];
      [sb appendWithNSString:@"\n"];
    }
  }
  return [sb description];
}

- (NSString *)listing {
  JavaIoByteArrayOutputStream *baos = [[[JavaIoByteArrayOutputStream alloc] initWithInt:1024] autorelease];
  JavaIoPrintWriter *out = [[[JavaIoPrintWriter alloc] initWithJavaIoOutputStream:baos] autorelease];
  [((id<ComIgormaznitsaProlContainersKnowledgeBase>) nil_chk([((ComIgormaznitsaProlLogicProlContext *) nil_chk(self->context_)) getKnowledgeBase])) writeWithJavaIoPrintWriter:out];
  @try {
    [baos close];
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
  }
  @catch (ComIgormaznitsaProlExceptionsParserException *e) {
    [((ComIgormaznitsaProlExceptionsParserException *) nil_chk(e)) getMessage];
  }
  [out flush];
  [out close];
  return [NSString stringWithBytes:[baos toByteArray]];
}

- (void)dealloc {
  ComKatsuraIPrologPrologInterface_set_context_(self, nil);
  ComKatsuraIPrologPrologInterface_set_name_(self, nil);
  ComKatsuraIPrologPrologInterface_set_goal_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(ComKatsuraIPrologPrologInterface *)other {
  [super copyAllFieldsTo:other];
  ComKatsuraIPrologPrologInterface_set_context_(other, context_);
  ComKatsuraIPrologPrologInterface_set_goal_(other, goal_);
  ComKatsuraIPrologPrologInterface_set_name_(other, name_);
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", "PrologInterface", NULL, 0x1, "Ljava.io.IOException;Ljava.lang.InterruptedException;" },
    { "initWithNSString:", "PrologInterface", NULL, 0x1, "Ljava.io.IOException;Ljava.lang.InterruptedException;" },
    { "clearEngine", NULL, "V", 0x1, "Ljava.io.IOException;Ljava.lang.InterruptedException;" },
    { "fileInputWithNSString:", "fileInput", "Ljava.lang.String;", 0x1, NULL },
    { "userInputWithNSString:", "userInput", "Lcom.igormaznitsa.prol.data.Term;", 0x1, NULL },
    { "fail", NULL, "Lcom.igormaznitsa.prol.data.Term;", 0x1, NULL },
    { "resultTerm2stringWithComIgormaznitsaProlDataTerm:", "resultTerm2string", "Ljava.lang.String;", 0x1, NULL },
    { "listing", NULL, "Ljava.lang.String;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "context_", NULL, 0x2, "Lcom.igormaznitsa.prol.logic.ProlContext;" },
    { "name_", NULL, 0x2, "Ljava.lang.String;" },
    { "goal_", NULL, 0x2, "Lcom.igormaznitsa.prol.logic.Goal;" },
  };
  static J2ObjcClassInfo _ComKatsuraIPrologPrologInterface = { "PrologInterface", "com.katsura.iProlog", NULL, 0x1, 8, methods, 3, fields, 0, NULL};
  return &_ComKatsuraIPrologPrologInterface;
}

@end
