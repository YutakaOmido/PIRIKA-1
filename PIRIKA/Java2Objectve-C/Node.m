//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/katsura/Documents/objective-c/PIRIKA/PIRIKA/java/com/katsura/frame/Node.java
//
//  Created by katsura on 14/06/11.
//

#include "CompareNumber.h"
#include "Node.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/TreeMap.h"

@implementation ComKatsuraFrameNode

- (id)initWithNSString:(NSString *)symbol
          withNSString:(NSString *)arg
          withNSString:(NSString *)name {
  if (self = [super init]) {
    attack_ = [[JavaUtilTreeMap alloc] initWithJavaUtilComparator:[[ComKatsuraFrameCompareNumber alloc] init]];
    recieve_ = [[JavaUtilTreeMap alloc] initWithJavaUtilComparator:[[ComKatsuraFrameCompareNumber alloc] init]];
    self->symbol_ = symbol;
    self->arg_ = arg;
    self->name_ = name;
  }
  return self;
}

- (id)initWithNSString:(NSString *)symbol
          withNSString:(NSString *)arg {
  if (self = [super init]) {
    attack_ = [[JavaUtilTreeMap alloc] initWithJavaUtilComparator:[[ComKatsuraFrameCompareNumber alloc] init]];
    recieve_ = [[JavaUtilTreeMap alloc] initWithJavaUtilComparator:[[ComKatsuraFrameCompareNumber alloc] init]];
    self->symbol_ = symbol;
    self->arg_ = arg;
  }
  return self;
}

- (void)addAttackRelationWithNSString:(NSString *)sym
              withComKatsuraFrameNode:(ComKatsuraFrameNode *)n {
  (void) [((JavaUtilTreeMap *) nil_chk(attack_)) putWithId:sym withId:n];
}

- (void)addRecieveRelationWithNSString:(NSString *)sym
               withComKatsuraFrameNode:(ComKatsuraFrameNode *)n {
  (void) [((JavaUtilTreeMap *) nil_chk(recieve_)) putWithId:sym withId:n];
}

- (NSString *)getArgument {
  return arg_;
}

- (NSString *)getSymbol {
  return symbol_;
}

- (NSString *)getName {
  return name_;
}

- (id<JavaUtilList>)getRecieveList {
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((JavaUtilTreeMap *) nil_chk(recieve_)) keySet])) iterator];
  JavaUtilArrayList *l = [[JavaUtilArrayList alloc] init];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    NSString *key = [it next];
    [l addWithId:key];
  }
  return l;
}

- (id<JavaUtilList>)getAttackList {
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((JavaUtilTreeMap *) nil_chk(attack_)) keySet])) iterator];
  JavaUtilArrayList *l = [[JavaUtilArrayList alloc] init];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    NSString *key = [it next];
    [l addWithId:key];
  }
  return l;
}

- (void)copyAllFieldsTo:(ComKatsuraFrameNode *)other {
  [super copyAllFieldsTo:other];
  other->arg_ = arg_;
  other->attack_ = attack_;
  other->name_ = name_;
  other->recieve_ = recieve_;
  other->symbol_ = symbol_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withNSString:withNSString:", "Node", NULL, 0x1, NULL },
    { "initWithNSString:withNSString:", "Node", NULL, 0x1, NULL },
    { "addAttackRelationWithNSString:withComKatsuraFrameNode:", "addAttackRelation", "V", 0x1, NULL },
    { "addRecieveRelationWithNSString:withComKatsuraFrameNode:", "addRecieveRelation", "V", 0x1, NULL },
    { "getArgument", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getSymbol", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getRecieveList", NULL, "Ljava.util.List;", 0x1, NULL },
    { "getAttackList", NULL, "Ljava.util.List;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "attack_", NULL, 0x2, "Ljava.util.TreeMap;" },
    { "recieve_", NULL, 0x2, "Ljava.util.TreeMap;" },
    { "arg_", NULL, 0x2, "Ljava.lang.String;" },
    { "symbol_", NULL, 0x2, "Ljava.lang.String;" },
    { "name_", NULL, 0x2, "Ljava.lang.String;" },
  };
  static J2ObjcClassInfo _ComKatsuraFrameNode = { "Node", "com.katsura.frame", NULL, 0x1, 9, methods, 5, fields, 0, NULL};
  return &_ComKatsuraFrameNode;
}

@end
