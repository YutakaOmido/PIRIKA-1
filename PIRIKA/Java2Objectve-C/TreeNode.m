//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/katsura/Documents/objective-c/PIRIKA/PIRIKA/java/com/katsura/prolog/TreeNode.java
//
//  Created by katsura on 14/06/11.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "ProlMain.h"
#include "TreeNode.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@implementation ComKatsuraPrologTreeNode

- (id)initWithComKatsuraPrologTreeNode:(ComKatsuraPrologTreeNode *)prev
                          withNSString:(NSString *)name
                               withInt:(int)depth
                          withNSString:(NSString *)arg {
  if (self = [super init]) {
    next_ = nil;
    arg_ = nil;
    name_ = nil;
    width_ = 0;
    self->name_ = name;
    self->depth_ = depth;
    self->arg_ = arg;
    self->next_ = nil;
  }
  return self;
}

- (NSString *)getArgument {
  return self->arg_;
}

- (int)getNodeWidth {
  return width_;
}

- (int)getMaxDepth {
  if (next_ == nil) {
    return depth_ + 1;
  }
  else {
    int max = 0;
    for (int i = 0; i < (int) [next_ count]; i++) {
      ComKatsuraPrologTreeNode *t = IOSObjectArray_Get(next_, i);
      int j = [((ComKatsuraPrologTreeNode *) nil_chk(t)) getMaxDepth];
      if (max < j) {
        max = j;
      }
    }
    return max;
  }
}

- (int)nextArgumentWithJavaUtilList:(id<JavaUtilList>)argList
  withComKatsuraPrologProlMainArray:(IOSObjectArray *)prolList {
  id<JavaUtilMap> result = [[JavaUtilHashMap alloc] init];
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(prolList)) count]; i++) {
    ComKatsuraPrologProlMain *prolMain = IOSObjectArray_Get(prolList, i);
    NSString *s = [((ComKatsuraPrologProlMain *) nil_chk(prolMain)) defeatWithNSString:self->arg_];
    if ([((NSString *) nil_chk(s)) isEqual:@"[]"]) {
      continue;
    }
    NSString *userName = [prolMain getName];
    NSString *str = [s substring:2 endIndex:[s length] - 2];
    IOSObjectArray *defeateList = [((NSString *) nil_chk(str)) split:@"\\],\\[" limit:0];
    for (int j = 0; j < (int) [((IOSObjectArray *) nil_chk(defeateList)) count]; j++) {
      NSString *string = [NSString stringWithString:[NSString stringWithFormat:@"[%@]", IOSObjectArray_Get(defeateList, j)]];
      if (![result containsKeyWithId:string]) {
        if ([((id<JavaUtilList>) nil_chk(argList)) containsWithId:string]) {
          if (depth_ % 2 == 0) {
            int count = 0;
            for (int k = 0; k < [argList size]; k++) {
              if ([((NSString *) nil_chk([argList getWithInt:k])) isEqual:string]) {
                count++;
                if (count > 1) {
                  break;
                }
              }
            }
            if (count > 1) {
              continue;
            }
          }
          else {
            continue;
          }
        }
        (void) [result putWithId:string withId:userName];
      }
    }
  }
  if ([result isEmpty]) {
    width_ = 1;
    return width_;
  }
  else {
    next_ = [IOSObjectArray arrayWithLength:[result size] type:[IOSClass classWithClass:[ComKatsuraPrologTreeNode class]]];
  }
  id<JavaUtilIterator> pro = [((id<JavaUtilSet>) nil_chk([result keySet])) iterator];
  for (int i = 0; [((id<JavaUtilIterator>) nil_chk(pro)) hasNext]; i++) {
    NSString *arg = [pro next];
    id<JavaUtilList> argList2 = [[JavaUtilLinkedList alloc] initWithJavaUtilCollection:argList];
    [argList2 addWithId:arg];
    (void) IOSObjectArray_Set(nil_chk(next_), i, [[ComKatsuraPrologTreeNode alloc] initWithComKatsuraPrologTreeNode:self withNSString:[result getWithId:arg] withInt:depth_ + 1 withNSString:arg]);
    width_ = width_ + [((ComKatsuraPrologTreeNode *) IOSObjectArray_Get(next_, i)) nextArgumentWithJavaUtilList:argList2 withComKatsuraPrologProlMainArray:prolList];
  }
  return width_;
}

- (id<JavaUtilList>)insertArgumentWithJavaUtilList:(id<JavaUtilList>)argTree {
  [((id<JavaUtilList>) nil_chk(argTree)) addWithId:[NSString valueOfInt:depth_]];
  [argTree addWithId:arg_];
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(self->next_)) count]; i++) {
    if (IOSObjectArray_Get(self->next_, i) != nil) {
      (void) [((ComKatsuraPrologTreeNode *) IOSObjectArray_Get(self->next_, i)) insertArgumentWithJavaUtilList:argTree];
    }
  }
  return argTree;
}

- (id<JavaUtilList>)insertArgumentWithNameWithJavaUtilList:(id<JavaUtilList>)argTree {
  [((id<JavaUtilList>) nil_chk(argTree)) addWithId:[NSString valueOfInt:self->depth_]];
  [argTree addWithId:self->name_];
  [argTree addWithId:self->arg_];
  if (self->next_ != nil) {
    for (int i = 0; i < (int) [self->next_ count]; i++) {
      if (IOSObjectArray_Get(self->next_, i) != nil) {
        (void) [((ComKatsuraPrologTreeNode *) IOSObjectArray_Get(self->next_, i)) insertArgumentWithNameWithJavaUtilList:argTree];
      }
    }
  }
  return argTree;
}

- (void)copyAllFieldsTo:(ComKatsuraPrologTreeNode *)other {
  [super copyAllFieldsTo:other];
  other->arg_ = arg_;
  other->depth_ = depth_;
  other->name_ = name_;
  other->next_ = next_;
  other->width_ = width_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithComKatsuraPrologTreeNode:withNSString:withInt:withNSString:", "TreeNode", NULL, 0x1, NULL },
    { "getArgument", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getNodeWidth", NULL, "I", 0x1, NULL },
    { "getMaxDepth", NULL, "I", 0x1, NULL },
    { "nextArgumentWithJavaUtilList:withComKatsuraPrologProlMainArray:", "nextArgument", "I", 0x1, NULL },
    { "insertArgumentWithJavaUtilList:", "insertArgument", "Ljava.util.List;", 0x1, NULL },
    { "insertArgumentWithNameWithJavaUtilList:", "insertArgumentWithName", "Ljava.util.List;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "next_", NULL, 0x2, "[Lcom.katsura.prolog.TreeNode;" },
    { "arg_", NULL, 0x2, "Ljava.lang.String;" },
    { "name_", NULL, 0x2, "Ljava.lang.String;" },
    { "depth_", NULL, 0x2, "I" },
    { "width_", NULL, 0x2, "I" },
  };
  static J2ObjcClassInfo _ComKatsuraPrologTreeNode = { "TreeNode", "com.katsura.prolog", NULL, 0x1, 7, methods, 5, fields, 0, NULL};
  return &_ComKatsuraPrologTreeNode;
}

@end
