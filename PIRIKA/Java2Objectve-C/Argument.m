//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/katsura/Documents/objective-c/PIRIKA/PIRIKA/java/com/katsura/prolog/Argument.java
//
//  Created by katsura on 14/06/11.
//

#include "Argument.h"
#include "CompareNumber.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "Node.h"
#include "ProlMain.h"
#include "java/io/BufferedReader.h"
#include "java/io/FileReader.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TreeMap.h"

@implementation ComKatsuraPrologArgument

+ (IOSObjectArray *)init__WithNSString:(NSString *)LMAPath
                          withNSString:(NSString *)truthvalue
                       withJavaUtilMap:(id<JavaUtilMap>)userMap {
  IOSObjectArray *prol = [IOSObjectArray arrayWithLength:[((id<JavaUtilMap>) nil_chk(userMap)) size] type:[IOSClass classWithClass:[ComKatsuraPrologProlMain class]]];
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([userMap keySet])) iterator];
  for (int i = 0; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    NSString *userName = [it next];
    NSString *filepath = [userMap getWithId:userName];
    (void) IOSObjectArray_Set(prol, i, [[ComKatsuraPrologProlMain alloc] initWithNSString:userName]);
    if ([((JavaLangBoolean *) nil_chk([((ComKatsuraPrologProlMain *) IOSObjectArray_Get(prol, i)) init__WithNSString:LMAPath withNSString:truthvalue withNSString:filepath])) booleanValue]) {
      i++;
    }
  }
  return prol;
}

+ (id<JavaUtilList>)allAttackWithNSString:(NSString *)LMAPath
                             withNSString:(NSString *)truthvalue
                          withJavaUtilMap:(id<JavaUtilMap>)userMap {
  IOSObjectArray *prol = [ComKatsuraPrologArgument init__WithNSString:LMAPath withNSString:truthvalue withJavaUtilMap:userMap];
  id<JavaUtilMap> buf = [[JavaUtilHashMap alloc] init];
  id<JavaUtilMap> arg = [[JavaUtilTreeMap alloc] initWithJavaUtilComparator:[[ComKatsuraFrameCompareNumber alloc] init]];
  int count = 0;
  JavaLangBoolean *debug = [JavaLangBoolean valueOfWithBoolean:NO];
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(userMap)) keySet])) iterator];
  for (int i = 0; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; i++) {
    id<JavaUtilList> check = [[JavaUtilArrayList alloc] init];
    NSString *name = [it next];
    id<JavaUtilList> list = [ComKatsuraPrologArgument readEALPWithNSString:[userMap getWithId:name]];
    for (int j = 0; j < [((id<JavaUtilList>) nil_chk(list)) size]; j++) {
      IOSObjectArray *s = [((NSString *) nil_chk([list getWithInt:j])) split:@"<=="];
      if (![check containsWithId:IOSObjectArray_Get(nil_chk(s), 0)]) {
        [check addWithId:IOSObjectArray_Get(s, 0)];
        id<JavaUtilList> argList = [((ComKatsuraPrologProlMain *) IOSObjectArray_Get(nil_chk(prol), i)) getArgumentListWithNSString:IOSObjectArray_Get(s, 0)];
        if (argList != nil) {
          for (int k = 0; k < [argList size]; k++) {
            if (![buf containsKeyWithId:[argList getWithInt:k]]) {
              NSString *c = [NSString valueOfInt:count];
              ComKatsuraFrameNode *n = [[ComKatsuraFrameNode alloc] initWithNSString:c withNSString:[argList getWithInt:k] withNSString:name];
              (void) [arg putWithId:c withId:n];
              (void) [buf putWithId:[argList getWithInt:k] withId:c];
              count++;
            }
          }
        }
      }
    }
  }
  it = [((id<JavaUtilSet>) nil_chk([arg keySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    NSString *key = [it next];
    ComKatsuraFrameNode *r = [arg getWithId:key];
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(prol)) count]; i++) {
      id<JavaUtilList> defeats = [((ComKatsuraPrologProlMain *) IOSObjectArray_Get(prol, i)) defeatListWithNSString:[((ComKatsuraFrameNode *) nil_chk(r)) getArgument]];
      if (defeats != nil) {
        for (int j = 0; j < [defeats size]; j++) {
          NSString *sym = [buf getWithId:[defeats getWithInt:j]];
          ComKatsuraFrameNode *n = [arg getWithId:sym];
          [r addRecieveRelationWithNSString:sym withComKatsuraFrameNode:n];
          [((ComKatsuraFrameNode *) nil_chk(n)) addAttackRelationWithNSString:key withComKatsuraFrameNode:r];
        }
      }
    }
  }
  it = [((id<JavaUtilSet>) nil_chk([arg keySet])) iterator];
  id<JavaUtilList> attacks = [[JavaUtilArrayList alloc] init];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    NSString *key = [it next];
    ComKatsuraFrameNode *n = [arg getWithId:key];
    if ([debug booleanValue]) {
      [((JavaIoPrintStream *) nil_chk([JavaLangSystem out])) printlnWithNSString:[NSString stringWithFormat:@"%@/%@/%@/%@", key, [((ComKatsuraFrameNode *) nil_chk(n)) getRecieveList], [n getAttackList], [n getArgument]]];
    }
    id<JavaUtilList> l = [((ComKatsuraFrameNode *) nil_chk(n)) getAttackList];
    for (int i = 0; i < [((id<JavaUtilList>) nil_chk(l)) size]; i++) {
      [attacks addWithId:[NSString stringWithString:[NSString stringWithFormat:@"[%@,%@]", key, [l getWithInt:i]]]];
    }
  }
  return attacks;
}

+ (int)getNodeNumWithNSString:(NSString *)LMAPath
                 withNSString:(NSString *)truthvalue
              withJavaUtilMap:(id<JavaUtilMap>)userMap {
  IOSObjectArray *prol = [ComKatsuraPrologArgument init__WithNSString:LMAPath withNSString:truthvalue withJavaUtilMap:userMap];
  int count = 0;
  id<JavaUtilList> check2 = [[JavaUtilArrayList alloc] init];
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(userMap)) keySet])) iterator];
  for (int i = 0; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; i++) {
    NSString *name = [it next];
    id<JavaUtilList> list = [ComKatsuraPrologArgument readEALPWithNSString:[userMap getWithId:name]];
    id<JavaUtilList> check = [[JavaUtilArrayList alloc] init];
    for (int j = 0; j < [((id<JavaUtilList>) nil_chk(list)) size]; j++) {
      IOSObjectArray *s = [((NSString *) nil_chk([list getWithInt:j])) split:@"<=="];
      if (![check containsWithId:IOSObjectArray_Get(nil_chk(s), 0)]) {
        [check addWithId:IOSObjectArray_Get(s, 0)];
        id<JavaUtilList> argList = [((ComKatsuraPrologProlMain *) IOSObjectArray_Get(nil_chk(prol), i)) getArgumentListWithNSString:IOSObjectArray_Get(s, 0)];
        if (argList != nil) {
          for (int k = 0; k < [argList size]; k++) {
            if (![check2 containsWithId:[argList getWithInt:k]]) {
              count++;
              [check2 addWithId:[argList getWithInt:k]];
            }
          }
        }
      }
    }
  }
  return count;
}

+ (id<JavaUtilList>)nodeInfoWithNSString:(NSString *)LMAPath
                            withNSString:(NSString *)truthvalue
                         withJavaUtilMap:(id<JavaUtilMap>)userMap {
  IOSObjectArray *prol = [ComKatsuraPrologArgument init__WithNSString:LMAPath withNSString:truthvalue withJavaUtilMap:userMap];
  id<JavaUtilMap> buf = [[JavaUtilHashMap alloc] init];
  id<JavaUtilMap> arg = [[JavaUtilTreeMap alloc] initWithJavaUtilComparator:[[ComKatsuraFrameCompareNumber alloc] init]];
  int count = 0;
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(userMap)) keySet])) iterator];
  for (int i = 0; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; i++) {
    NSString *name = [it next];
    id<JavaUtilList> list = [ComKatsuraPrologArgument readEALPWithNSString:[userMap getWithId:name]];
    id<JavaUtilList> check = [[JavaUtilArrayList alloc] init];
    for (int j = 0; j < [((id<JavaUtilList>) nil_chk(list)) size]; j++) {
      IOSObjectArray *s = [((NSString *) nil_chk([list getWithInt:j])) split:@"<=="];
      if (![check containsWithId:IOSObjectArray_Get(nil_chk(s), 0)]) {
        [check addWithId:IOSObjectArray_Get(s, 0)];
        id<JavaUtilList> argList = [((ComKatsuraPrologProlMain *) IOSObjectArray_Get(nil_chk(prol), i)) getArgumentListWithNSString:IOSObjectArray_Get(s, 0)];
        if (argList != nil) {
          for (int k = 0; k < [argList size]; k++) {
            if (![buf containsKeyWithId:[argList getWithInt:k]]) {
              NSString *c = [NSString valueOfInt:count];
              ComKatsuraFrameNode *n = [[ComKatsuraFrameNode alloc] initWithNSString:c withNSString:[argList getWithInt:k] withNSString:name];
              (void) [arg putWithId:c withId:n];
              (void) [buf putWithId:[argList getWithInt:k] withId:c];
              count++;
            }
          }
        }
      }
    }
  }
  it = [((id<JavaUtilSet>) nil_chk([arg keySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    NSString *key = [it next];
    ComKatsuraFrameNode *r = [arg getWithId:key];
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(prol)) count]; i++) {
      id<JavaUtilList> defeats = [((ComKatsuraPrologProlMain *) IOSObjectArray_Get(prol, i)) defeatListWithNSString:[((ComKatsuraFrameNode *) nil_chk(r)) getArgument]];
      if (defeats != nil) {
        for (int j = 0; j < [defeats size]; j++) {
          NSString *sym = [buf getWithId:[defeats getWithInt:j]];
          ComKatsuraFrameNode *n = [arg getWithId:sym];
          [r addRecieveRelationWithNSString:sym withComKatsuraFrameNode:n];
          [((ComKatsuraFrameNode *) nil_chk(n)) addAttackRelationWithNSString:key withComKatsuraFrameNode:r];
        }
      }
    }
  }
  it = [((id<JavaUtilSet>) nil_chk([arg keySet])) iterator];
  id<JavaUtilList> list = [[JavaUtilArrayList alloc] init];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    NSString *key = [it next];
    ComKatsuraFrameNode *n = [arg getWithId:key];
    [list addWithId:[NSString stringWithString:[NSString stringWithFormat:@"%@/%@/%@/%@", key, [((ComKatsuraFrameNode *) nil_chk(n)) getRecieveList], [n getAttackList], [n getArgument]]]];
  }
  return list;
}

+ (id<JavaUtilMap>)nodeInfoMapWithNSString:(NSString *)LMAPath
                              withNSString:(NSString *)truthvalue
                           withJavaUtilMap:(id<JavaUtilMap>)userMap {
  IOSObjectArray *prol = [ComKatsuraPrologArgument init__WithNSString:LMAPath withNSString:truthvalue withJavaUtilMap:userMap];
  id<JavaUtilMap> buf = [[JavaUtilHashMap alloc] init];
  id<JavaUtilMap> arg = [[JavaUtilTreeMap alloc] initWithJavaUtilComparator:[[ComKatsuraFrameCompareNumber alloc] init]];
  int count = 0;
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(userMap)) keySet])) iterator];
  for (int i = 0; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; i++) {
    NSString *name = [it next];
    id<JavaUtilList> list = [ComKatsuraPrologArgument readEALPWithNSString:[userMap getWithId:name]];
    id<JavaUtilList> check = [[JavaUtilArrayList alloc] init];
    for (int j = 0; j < [((id<JavaUtilList>) nil_chk(list)) size]; j++) {
      IOSObjectArray *s = [((NSString *) nil_chk([list getWithInt:j])) split:@"<=="];
      if (![check containsWithId:IOSObjectArray_Get(nil_chk(s), 0)]) {
        [check addWithId:IOSObjectArray_Get(s, 0)];
        id<JavaUtilList> argList = [((ComKatsuraPrologProlMain *) IOSObjectArray_Get(nil_chk(prol), i)) getArgumentListWithNSString:IOSObjectArray_Get(s, 0)];
        if (argList != nil) {
          for (int k = 0; k < [argList size]; k++) {
            if (![buf containsKeyWithId:[argList getWithInt:k]]) {
              NSString *c = [NSString valueOfInt:count];
              ComKatsuraFrameNode *n = [[ComKatsuraFrameNode alloc] initWithNSString:c withNSString:[argList getWithInt:k] withNSString:name];
              (void) [arg putWithId:c withId:n];
              (void) [buf putWithId:[argList getWithInt:k] withId:c];
              count++;
            }
          }
        }
      }
    }
  }
  it = [((id<JavaUtilSet>) nil_chk([arg keySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    NSString *key = [it next];
    ComKatsuraFrameNode *r = [arg getWithId:key];
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(prol)) count]; i++) {
      id<JavaUtilList> defeats = [((ComKatsuraPrologProlMain *) IOSObjectArray_Get(prol, i)) defeatListWithNSString:[((ComKatsuraFrameNode *) nil_chk(r)) getArgument]];
      if (defeats != nil) {
        for (int j = 0; j < [defeats size]; j++) {
          NSString *sym = [buf getWithId:[defeats getWithInt:j]];
          ComKatsuraFrameNode *n = [arg getWithId:sym];
          [r addRecieveRelationWithNSString:sym withComKatsuraFrameNode:n];
          [((ComKatsuraFrameNode *) nil_chk(n)) addAttackRelationWithNSString:key withComKatsuraFrameNode:r];
        }
      }
    }
  }
  return arg;
}

+ (id<JavaUtilList>)readEALPWithNSString:(NSString *)filePath {
  JavaUtilArrayList *list = [[JavaUtilArrayList alloc] init];
  @try {
    JavaIoBufferedReader *br = [[JavaIoBufferedReader alloc] initWithJavaIoReader:[[JavaIoFileReader alloc] initWithNSString:filePath]];
    NSString *line;
    while ((line = [br readLine]) != nil) {
      line = [((NSString *) nil_chk(line)) replaceAll:@" " withReplacement:@""];
      line = [((NSString *) nil_chk(line)) replaceAll:@"\u3000" withReplacement:@""];
      line = [((NSString *) nil_chk(line)) replaceAll:@"<==not" withReplacement:@"<==not "];
      if (![((NSString *) nil_chk(line)) isEqual:@""] && ![list containsWithId:line] && ![line hasPrefix:@"%"]) {
        [list addWithId:line];
      }
    }
    [br close];
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
  }
  return list;
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init__WithNSString:withNSString:withJavaUtilMap:", "init", "[Lcom.katsura.prolog.ProlMain;", 0xa, NULL },
    { "allAttackWithNSString:withNSString:withJavaUtilMap:", "allAttack", "Ljava.util.List;", 0x9, NULL },
    { "getNodeNumWithNSString:withNSString:withJavaUtilMap:", "getNodeNum", "I", 0x9, NULL },
    { "nodeInfoWithNSString:withNSString:withJavaUtilMap:", "nodeInfo", "Ljava.util.List;", 0x9, NULL },
    { "nodeInfoMapWithNSString:withNSString:withJavaUtilMap:", "nodeInfoMap", "Ljava.util.Map;", 0x9, NULL },
    { "readEALPWithNSString:", "readEALP", "Ljava.util.List;", 0xa, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static J2ObjcClassInfo _ComKatsuraPrologArgument = { "Argument", "com.katsura.prolog", NULL, 0x1, 7, methods, 0, NULL, 0, NULL};
  return &_ComKatsuraPrologArgument;
}

@end
