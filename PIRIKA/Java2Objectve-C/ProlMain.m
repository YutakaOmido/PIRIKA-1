//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/katsura/Documents/objective-c/PIRIKA/PIRIKA/java/com/katsura/prolog/ProlMain.java
//
//  Created by katsura on 14/06/11.
//

#include "DefaultProlStreamManagerImpl.h"
#include "Goal.h"
#include "IOSByteArray.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "KnowledgeBase.h"
#include "ParserException.h"
#include "ProlConsult.h"
#include "ProlContext.h"
#include "ProlCriticalError.h"
#include "ProlExistenceErrorException.h"
#include "ProlInstantiationErrorException.h"
#include "ProlMain.h"
#include "Term.h"
#include "Utils.h"
#include "Var.h"
#include "java/io/BufferedReader.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/File.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/FileReader.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/lang/Boolean.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/Map.h"

@implementation ComKatsuraPrologProlMain

- (id)init {
  return [self initComKatsuraPrologProlMainWithNSString:@"test"];
}

- (id)initComKatsuraPrologProlMainWithNSString:(NSString *)name {
  if (self = [super init]) {
    self->name_ = name;
    [self clearWithNSString:name];
  }
  return self;
}

- (id)initWithNSString:(NSString *)name {
  return [self initComKatsuraPrologProlMainWithNSString:name];
}

- (NSString *)getName {
  return self->name_;
}

- (void)clearWithNSString:(NSString *)name {
  @try {
    if (self->context_ != nil) {
      [self->context_ halt];
    }
    self->context_ = [[ComIgormaznitsaProlLogicProlContext alloc] initWithNSString:name withComIgormaznitsaProlIoProlStreamManager:[ComIgormaznitsaProlIoDefaultProlStreamManagerImpl getInstance]];
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
  }
  @catch (JavaLangInterruptedException *e) {
    [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
  }
}

- (JavaLangBoolean *)init__WithNSString:(NSString *)LMAPath
                           withNSString:(NSString *)truthvaluePath
                           withNSString:(NSString *)filepath {
  IOSObjectArray *init_ = [IOSObjectArray arrayWithLength:2 type:[IOSClass classWithClass:[JavaIoFile class]]];
  NSString *sep = [JavaIoFile separator];
  (void) IOSObjectArray_Set(init_, 0, [[JavaIoFile alloc] initWithNSString:LMAPath]);
  (void) IOSObjectArray_Set(init_, 1, [[JavaIoFile alloc] initWithNSString:truthvaluePath]);
  JavaIoBufferedReader *br = nil;
  @try {
    for (int i = 0; i < (int) [init_ count]; i++) {
      JavaIoFile *file = IOSObjectArray_Get(init_, i);
      br = [[JavaIoBufferedReader alloc] initWithJavaIoReader:[[JavaIoFileReader alloc] initWithJavaIoFile:file]];
      ComIgormaznitsaProlParserProlConsult *consult = [[ComIgormaznitsaProlParserProlConsult alloc] initWithJavaIoReader:br withComIgormaznitsaProlLogicProlContext:self->context_];
      [consult consult];
      [br close];
    }
    (void) [self commandWithNSString:[NSString stringWithFormat:@"read_EALP('%@').", filepath]];
  }
  @catch (JavaIoFileNotFoundException *e) {
    [((JavaIoFileNotFoundException *) nil_chk(e)) printStackTrace];
    [((JavaIoPrintStream *) nil_chk([JavaLangSystem err])) printlnWithNSString:@"File_Not_Found."];
    [self clearWithNSString:self->name_];
    return [JavaLangBoolean valueOfWithBoolean:NO];
  }
  @catch (ComIgormaznitsaProlExceptionsProlExistenceErrorException *e) {
    [((JavaIoPrintStream *) nil_chk([JavaLangSystem err])) printlnWithNSString:@"File_Not_Found."];
    [self clearWithNSString:self->name_];
    return [JavaLangBoolean valueOfWithBoolean:NO];
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
    [self clearWithNSString:self->name_];
    return [JavaLangBoolean valueOfWithBoolean:NO];
  }
  @finally {
    @try {
      [((JavaIoBufferedReader *) nil_chk(br)) close];
    }
    @catch (JavaIoIOException *e) {
      [((JavaIoIOException *) nil_chk(e)) printStackTrace];
    }
  }
  return [JavaLangBoolean valueOfWithBoolean:YES];
}

- (NSString *)getArgumentWithNSString:(NSString *)arg {
  @try {
    ComIgormaznitsaProlLogicGoal *g = [[ComIgormaznitsaProlLogicGoal alloc] initWithNSString:[NSString stringWithFormat:@"write_query_2(%@,X).", arg] withComIgormaznitsaProlLogicProlContext:self->context_];
    (void) [g solve];
    return [g getVarAsTextWithNSString:@"X"];
  }
  @catch (JavaLangInterruptedException *e) {
    [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
  }
  return @"Error";
}

- (id<JavaUtilList>)getArgumentListWithNSString:(NSString *)arg {
  id<JavaUtilList> list = nil;
  @try {
    ComIgormaznitsaProlLogicGoal *g = [[ComIgormaznitsaProlLogicGoal alloc] initWithNSString:[NSString stringWithFormat:@"write_query_2(%@,X).", arg] withComIgormaznitsaProlLogicProlContext:self->context_];
    (void) [g solve];
    NSString *demoString = [g getVarAsTextWithNSString:@"X"];
    list = [[JavaUtilArrayList alloc] init];
    if ([((NSString *) nil_chk(demoString)) isEqual:@"[]"]) {
      return nil;
    }
    NSString *s = [demoString substring:2 endIndex:[demoString length] - 2];
    IOSObjectArray *demoList = [((NSString *) nil_chk(s)) split:@"\\],\\[" limit:0];
    for (int k = 0; k < (int) [((IOSObjectArray *) nil_chk(demoList)) count]; k++) {
      NSString *str = [NSString stringWithString:[NSString stringWithFormat:@"[%@]", IOSObjectArray_Get(demoList, k)]];
      if (![list containsWithId:str]) [list addWithId:str];
    }
  }
  @catch (JavaLangInterruptedException *e) {
    [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
  }
  return list;
}

- (NSString *)defeatWithNSString:(NSString *)arg {
  @try {
    ComIgormaznitsaProlLogicGoal *g = [[ComIgormaznitsaProlLogicGoal alloc] initWithNSString:[NSString stringWithFormat:@"write_defeatter_2(%@,X).", arg] withComIgormaznitsaProlLogicProlContext:self->context_];
    (void) [g solve];
    return [g getVarAsTextWithNSString:@"X"];
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
  }
  @catch (JavaLangInterruptedException *e) {
    [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
  }
  return @"Error";
}

- (id<JavaUtilList>)defeatListWithNSString:(NSString *)arg {
  id<JavaUtilList> list = nil;
  @try {
    ComIgormaznitsaProlLogicGoal *g = [[ComIgormaznitsaProlLogicGoal alloc] initWithNSString:[NSString stringWithFormat:@"write_defeatter_2(%@,X).", arg] withComIgormaznitsaProlLogicProlContext:self->context_];
    (void) [g solve];
    NSString *demoString = [g getVarAsTextWithNSString:@"X"];
    list = [[JavaUtilArrayList alloc] init];
    if ([((NSString *) nil_chk(demoString)) isEqual:@"[]"]) {
      return nil;
    }
    NSString *s = [demoString substring:2 endIndex:[demoString length] - 2];
    IOSObjectArray *demoList = [((NSString *) nil_chk(s)) split:@"\\],\\[" limit:0];
    for (int k = 0; k < (int) [((IOSObjectArray *) nil_chk(demoList)) count]; k++) {
      NSString *str = [NSString stringWithString:[NSString stringWithFormat:@"[%@]", IOSObjectArray_Get(demoList, k)]];
      [list addWithId:str];
    }
  }
  @catch (JavaLangInterruptedException *e) {
    [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
  }
  return list;
}

- (NSString *)commandWithNSString:(NSString *)com
                     withNSString:(NSString *)v {
  @try {
    ComIgormaznitsaProlLogicGoal *g = [[ComIgormaznitsaProlLogicGoal alloc] initWithNSString:com withComIgormaznitsaProlLogicProlContext:self->context_];
    ComIgormaznitsaProlDataTerm *result = [g solve];
    id<JavaUtilMap> r = [ComIgormaznitsaProlUtilsUtils fillTableWithVarsWithComIgormaznitsaProlDataTerm:result];
    return ([((ComIgormaznitsaProlDataVar *) nil_chk([((id<JavaUtilMap>) nil_chk(r)) getWithId:v])) description]);
  }
  @catch (JavaLangInterruptedException *e) {
    [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
  }
  return @"Error";
}

- (JavaLangBoolean *)commandWithNSString:(NSString *)com {
  @try {
    ComIgormaznitsaProlLogicGoal *g = [[ComIgormaznitsaProlLogicGoal alloc] initWithNSString:com withComIgormaznitsaProlLogicProlContext:self->context_];
    ComIgormaznitsaProlDataTerm *result = [g solve];
    if (result != nil) {
      return [JavaLangBoolean valueOfWithBoolean:YES];
    }
  }
  @catch (JavaLangInterruptedException *e) {
    [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
  }
  return [JavaLangBoolean valueOfWithBoolean:NO];
}

- (id<JavaUtilList>)allResultWithNSString:(NSString *)arg
                             withNSString:(NSString *)v {
  id<JavaUtilList> list = [[JavaUtilArrayList alloc] init];
  @try {
    while (YES) {
      ComIgormaznitsaProlLogicGoal *g = [[ComIgormaznitsaProlLogicGoal alloc] initWithNSString:arg withComIgormaznitsaProlLogicProlContext:self->context_];
      ComIgormaznitsaProlDataTerm *result = [g solve];
      if (result == nil) {
        break;
      }
      id<JavaUtilMap> r = [ComIgormaznitsaProlUtilsUtils fillTableWithVarsWithComIgormaznitsaProlDataTerm:result];
      [list addWithId:[((ComIgormaznitsaProlDataVar *) nil_chk([((id<JavaUtilMap>) nil_chk(r)) getWithId:v])) description]];
    }
    return list;
  }
  @catch (JavaLangInterruptedException *e) {
    [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
  }
  return nil;
}

- (void)listing {
  JavaIoByteArrayOutputStream *baos = [[JavaIoByteArrayOutputStream alloc] initWithInt:1024];
  JavaIoPrintWriter *out = [[JavaIoPrintWriter alloc] initWithJavaIoOutputStream:baos];
  [((id<ComIgormaznitsaProlContainersKnowledgeBase>) nil_chk([((ComIgormaznitsaProlLogicProlContext *) nil_chk(context_)) getKnowledgeBase])) writeWithJavaIoPrintWriter:out];
  [out flush];
  [out close];
  [((JavaIoPrintStream *) nil_chk([JavaLangSystem out])) printlnWithNSString:[NSString stringWithBytes:[baos toByteArray]]];
}

+ (JavaLangBoolean *)checkPrologGrammerWithNSString:(NSString *)contents {
  @try {
    ComIgormaznitsaProlParserProlConsult *consult = [[ComIgormaznitsaProlParserProlConsult alloc] initWithNSString:contents withComIgormaznitsaProlLogicProlContext:[[ComIgormaznitsaProlLogicProlContext alloc] initWithNSString:@"test" withComIgormaznitsaProlIoProlStreamManager:[ComIgormaznitsaProlIoDefaultProlStreamManagerImpl getInstance]]];
    [consult consult];
    return [JavaLangBoolean valueOfWithBoolean:YES];
  }
  @catch (JavaLangInterruptedException *e) {
    [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
  }
  return [JavaLangBoolean valueOfWithBoolean:NO];
}

+ (JavaLangBoolean *)checkPrologGrammerWithJavaIoFile:(JavaIoFile *)filePath {
  JavaIoBufferedReader *br = nil;
  @try {
    br = [[JavaIoBufferedReader alloc] initWithJavaIoReader:[[JavaIoFileReader alloc] initWithJavaIoFile:filePath]];
    ComIgormaznitsaProlParserProlConsult *consult = [[ComIgormaznitsaProlParserProlConsult alloc] initWithJavaIoReader:br withComIgormaznitsaProlLogicProlContext:[[ComIgormaznitsaProlLogicProlContext alloc] initWithNSString:@"test" withComIgormaznitsaProlIoProlStreamManager:[ComIgormaznitsaProlIoDefaultProlStreamManagerImpl getInstance]]];
    [consult consult];
    [br close];
    return [JavaLangBoolean valueOfWithBoolean:YES];
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
  }
  @catch (JavaLangInterruptedException *e) {
    [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
  }
  @finally {
    @try {
      if (br != nil) {
        [br close];
      }
    }
    @catch (JavaIoIOException *e) {
      [((JavaIoIOException *) nil_chk(e)) printStackTrace];
    }
  }
  return [JavaLangBoolean valueOfWithBoolean:NO];
}

+ (JavaLangBoolean *)checkEALPGrammerWithNSString:(NSString *)contents
                                     withNSString:(NSString *)lmaPath {
  NSString *sep = [JavaIoFile separator];
  JavaIoFile *lma = [[JavaIoFile alloc] initWithNSString:lmaPath];
  JavaIoBufferedReader *br = nil;
  ComIgormaznitsaProlLogicProlContext *context = nil;
  @try {
    context = [[ComIgormaznitsaProlLogicProlContext alloc] initWithNSString:@"test" withComIgormaznitsaProlIoProlStreamManager:[ComIgormaznitsaProlIoDefaultProlStreamManagerImpl getInstance]];
    br = [[JavaIoBufferedReader alloc] initWithJavaIoReader:[[JavaIoFileReader alloc] initWithJavaIoFile:lma]];
    ComIgormaznitsaProlParserProlConsult *consult = [[ComIgormaznitsaProlParserProlConsult alloc] initWithJavaIoReader:br withComIgormaznitsaProlLogicProlContext:context];
    [consult consult];
    ComIgormaznitsaProlParserProlConsult *c = [[ComIgormaznitsaProlParserProlConsult alloc] initWithNSString:contents withComIgormaznitsaProlLogicProlContext:context];
    [c consult];
    [context halt];
    context = nil;
    return [JavaLangBoolean valueOfWithBoolean:YES];
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
  }
  @catch (JavaLangInterruptedException *e) {
    [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
  }
  @finally {
    @try {
      if (br != nil) {
        [br close];
      }
    }
    @catch (JavaIoIOException *e) {
      [((JavaIoIOException *) nil_chk(e)) printStackTrace];
    }
  }
  return [JavaLangBoolean valueOfWithBoolean:NO];
}

+ (JavaLangBoolean *)checkEALPGrammerWithJavaIoFile:(JavaIoFile *)filePath {
  NSString *sep = [JavaIoFile separator];
  JavaIoFile *lma = [[JavaIoFile alloc] initWithNSString:[NSString stringWithFormat:@"TruthValue%@LMA_EX.pl", sep]];
  JavaIoBufferedReader *br = nil;
  @try {
    ComIgormaznitsaProlLogicProlContext *context = [[ComIgormaznitsaProlLogicProlContext alloc] initWithNSString:@"test" withComIgormaznitsaProlIoProlStreamManager:[ComIgormaznitsaProlIoDefaultProlStreamManagerImpl getInstance]];
    br = [[JavaIoBufferedReader alloc] initWithJavaIoReader:[[JavaIoFileReader alloc] initWithJavaIoFile:lma]];
    ComIgormaznitsaProlParserProlConsult *consult = [[ComIgormaznitsaProlParserProlConsult alloc] initWithJavaIoReader:br withComIgormaznitsaProlLogicProlContext:context];
    [consult consult];
    [br close];
    br = [[JavaIoBufferedReader alloc] initWithJavaIoReader:[[JavaIoFileReader alloc] initWithJavaIoFile:filePath]];
    ComIgormaznitsaProlParserProlConsult *c = [[ComIgormaznitsaProlParserProlConsult alloc] initWithJavaIoReader:br withComIgormaznitsaProlLogicProlContext:context];
    [c consult];
    [br close];
    return [JavaLangBoolean valueOfWithBoolean:YES];
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
  }
  @catch (JavaLangInterruptedException *e) {
    [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
  }
  @finally {
    @try {
      if (br != nil) {
        [br close];
      }
    }
    @catch (JavaIoIOException *e) {
      [((JavaIoIOException *) nil_chk(e)) printStackTrace];
    }
  }
  return [JavaLangBoolean valueOfWithBoolean:NO];
}

- (void)copyAllFieldsTo:(ComKatsuraPrologProlMain *)other {
  [super copyAllFieldsTo:other];
  other->context_ = context_;
  other->name_ = name_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", "ProlMain", NULL, 0x1, NULL },
    { "initWithNSString:", "ProlMain", NULL, 0x1, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "clearWithNSString:", "clear", "V", 0x1, NULL },
    { "init__WithNSString:withNSString:withNSString:", "init", "Ljava.lang.Boolean;", 0x1, NULL },
    { "getArgumentWithNSString:", "getArgument", "Ljava.lang.String;", 0x1, "Lcom.igormaznitsa.prol.exceptions.ProlCriticalError;Lcom.igormaznitsa.prol.exceptions.ParserException;Lcom.igormaznitsa.prol.exceptions.ProlInstantiationErrorException;" },
    { "getArgumentListWithNSString:", "getArgumentList", "Ljava.util.List;", 0x1, "Lcom.igormaznitsa.prol.exceptions.ProlCriticalError;Lcom.igormaznitsa.prol.exceptions.ParserException;Lcom.igormaznitsa.prol.exceptions.ProlInstantiationErrorException;" },
    { "defeatWithNSString:", "defeat", "Ljava.lang.String;", 0x1, "Lcom.igormaznitsa.prol.exceptions.ProlCriticalError;Lcom.igormaznitsa.prol.exceptions.ParserException;Lcom.igormaznitsa.prol.exceptions.ProlInstantiationErrorException;" },
    { "defeatListWithNSString:", "defeatList", "Ljava.util.List;", 0x1, "Lcom.igormaznitsa.prol.exceptions.ProlCriticalError;Lcom.igormaznitsa.prol.exceptions.ParserException;Lcom.igormaznitsa.prol.exceptions.ProlInstantiationErrorException;" },
    { "commandWithNSString:withNSString:", "command", "Ljava.lang.String;", 0x1, "Lcom.igormaznitsa.prol.exceptions.ProlCriticalError;Lcom.igormaznitsa.prol.exceptions.ParserException;Lcom.igormaznitsa.prol.exceptions.ProlInstantiationErrorException;" },
    { "commandWithNSString:", "command", "Ljava.lang.Boolean;", 0x1, "Lcom.igormaznitsa.prol.exceptions.ProlCriticalError;Lcom.igormaznitsa.prol.exceptions.ParserException;Lcom.igormaznitsa.prol.exceptions.ProlInstantiationErrorException;" },
    { "allResultWithNSString:withNSString:", "allResult", "Ljava.util.List;", 0x1, "Lcom.igormaznitsa.prol.exceptions.ProlCriticalError;Lcom.igormaznitsa.prol.exceptions.ParserException;Lcom.igormaznitsa.prol.exceptions.ProlInstantiationErrorException;" },
    { "listing", NULL, "V", 0x1, NULL },
    { "checkPrologGrammerWithNSString:", "checkPrologGrammer", "Ljava.lang.Boolean;", 0x9, "Lcom.igormaznitsa.prol.exceptions.ParserException;" },
    { "checkPrologGrammerWithJavaIoFile:", "checkPrologGrammer", "Ljava.lang.Boolean;", 0x9, "Lcom.igormaznitsa.prol.exceptions.ParserException;" },
    { "checkEALPGrammerWithNSString:withNSString:", "checkEALPGrammer", "Ljava.lang.Boolean;", 0x9, "Lcom.igormaznitsa.prol.exceptions.ParserException;" },
    { "checkEALPGrammerWithJavaIoFile:", "checkEALPGrammer", "Ljava.lang.Boolean;", 0x9, "Lcom.igormaznitsa.prol.exceptions.ParserException;" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "context_", NULL, 0x2, "Lcom.igormaznitsa.prol.logic.ProlContext;" },
    { "name_", NULL, 0x2, "Ljava.lang.String;" },
  };
  static J2ObjcClassInfo _ComKatsuraPrologProlMain = { "ProlMain", "com.katsura.prolog", NULL, 0x1, 17, methods, 2, fields, 0, NULL};
  return &_ComKatsuraPrologProlMain;
}

@end
