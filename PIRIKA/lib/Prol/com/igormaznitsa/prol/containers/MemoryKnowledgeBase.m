//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/igormaznitsa/prol/containers/MemoryKnowledgeBase.java
//
//  Created by katsura on 14/04/13.
//

#include "IOSObjectArray.h"
#include "com/igormaznitsa/prol/containers/ClauseIterator.h"
#include "com/igormaznitsa/prol/containers/FactIterator.h"
#include "com/igormaznitsa/prol/containers/KnowledgeBase.h"
#include "com/igormaznitsa/prol/containers/KnowledgeBaseInsideClauseList.h"
#include "com/igormaznitsa/prol/containers/MemoryClauseIterator.h"
#include "com/igormaznitsa/prol/containers/MemoryFactIterator.h"
#include "com/igormaznitsa/prol/containers/MemoryKnowledgeBase.h"
#include "com/igormaznitsa/prol/containers/MemoryRuleIterator.h"
#include "com/igormaznitsa/prol/containers/OperatorContainer.h"
#include "com/igormaznitsa/prol/containers/RuleIterator.h"
#include "com/igormaznitsa/prol/data/Operator.h"
#include "com/igormaznitsa/prol/data/Term.h"
#include "com/igormaznitsa/prol/data/TermStruct.h"
#include "com/igormaznitsa/prol/exceptions/ProlKnowledgeBaseException.h"
#include "com/igormaznitsa/prol/logic/ProlContext.h"
#include "com/igormaznitsa/prol/logic/triggers/ProlTriggerType.h"
#include "com/igormaznitsa/prol/utils/Utils.h"
#include "java/io/PrintWriter.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/SecurityException.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/locks/ReentrantLock.h"

@implementation ComIgormaznitsaProlContainersMemoryKnowledgeBase

- (id)initWithComIgormaznitsaProlLogicProlContext:(ComIgormaznitsaProlLogicProlContext *)context
                                     withNSString:(NSString *)baseId {
  if (self = [super init]) {
    operatorTable_ = [[JavaUtilHashMap alloc] init];
    predicateTable_ = [[JavaUtilHashMap alloc] init];
    operatorLocker_ = [[JavaUtilConcurrentLocksReentrantLock alloc] init];
    predicateLocker_ = [[JavaUtilConcurrentLocksReentrantLock alloc] init];
    if (baseId == nil || context == nil) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"One from the erguments is null"];
    }
    self->basedId_ = baseId;
    self->context_ = context;
  }
  return self;
}

- (id)initWithComIgormaznitsaProlLogicProlContext:(ComIgormaznitsaProlLogicProlContext *)context
                                     withNSString:(NSString *)baseId
withComIgormaznitsaProlContainersMemoryKnowledgeBase:(ComIgormaznitsaProlContainersMemoryKnowledgeBase *)etalon {
  if (self = [super init]) {
    operatorTable_ = [[JavaUtilHashMap alloc] init];
    predicateTable_ = [[JavaUtilHashMap alloc] init];
    operatorLocker_ = [[JavaUtilConcurrentLocksReentrantLock alloc] init];
    predicateLocker_ = [[JavaUtilConcurrentLocksReentrantLock alloc] init];
    self->basedId_ = baseId;
    self->context_ = context;
    [((ComIgormaznitsaProlContainersMemoryKnowledgeBase *) nil_chk(etalon))->operatorLocker_ lock];
    @try {
      [etalon->predicateLocker_ lock];
      @try {
        for (id<JavaUtilMap_Entry> __strong item in nil_chk([etalon->operatorTable_ entrySet])) {
          (void) [operatorTable_ putWithId:[((id<JavaUtilMap_Entry>) nil_chk(item)) getKey] withId:[((ComIgormaznitsaProlContainersOperatorContainer *) nil_chk([item getValue])) makeCopy]];
        }
        for (id<JavaUtilMap_Entry> __strong item in nil_chk([etalon->predicateTable_ entrySet])) {
          (void) [predicateTable_ putWithId:[((id<JavaUtilMap_Entry>) nil_chk(item)) getKey] withId:[((ComIgormaznitsaProlContainersKnowledgeBaseInsideClauseList *) nil_chk([item getValue])) makeCopy]];
        }
      }
      @finally {
        [etalon->predicateLocker_ unlock];
      }
    }
    @finally {
      [etalon->operatorLocker_ unlock];
    }
  }
  return self;
}

- (NSString *)getVocabularyId {
  return basedId_;
}

- (void)addOperatorsWithComIgormaznitsaProlDataOperatorArray:(IOSObjectArray *)operators {
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(operatorLocker_)) lock];
  @try {
    for (int li = 0; li < (int) [((IOSObjectArray *) nil_chk(operators)) count]; li++) {
      [self addOperatorWithComIgormaznitsaProlDataOperator:IOSObjectArray_Get(operators, li)];
    }
  }
  @finally {
    [operatorLocker_ unlock];
  }
}

- (ComIgormaznitsaProlDataOperator *)getOperatorForTypeAndNameWithNSString:(NSString *)name
                                                                   withInt:(int)type {
  ComIgormaznitsaProlContainersOperatorContainer *opContainer = nil;
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(operatorLocker_)) lock];
  @try {
    opContainer = [((id<JavaUtilMap>) nil_chk(operatorTable_)) getWithId:name];
  }
  @finally {
    [operatorLocker_ unlock];
  }
  ComIgormaznitsaProlDataOperator *result = nil;
  if (opContainer != nil) {
    result = [opContainer getForTypePreciselyWithInt:type];
  }
  return result;
}

- (BOOL)removeOperatorWithNSString:(NSString *)name
                           withInt:(int)type {
  ComIgormaznitsaProlContainersOperatorContainer *opContainer;
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(operatorLocker_)) lock];
  @try {
    opContainer = [((id<JavaUtilMap>) nil_chk(operatorTable_)) getWithId:name];
  }
  @finally {
    [operatorLocker_ unlock];
  }
  BOOL result = NO;
  if (opContainer != nil) {
    if ([opContainer isSystem]) {
      @throw [[JavaLangSecurityException alloc] initWithNSString:@"Attemption to remove a system operator"];
    }
    else {
      result = [opContainer removeOperatorForTypeWithInt:type];
    }
  }
  return result;
}

- (void)addOperatorWithComIgormaznitsaProlDataOperator:(ComIgormaznitsaProlDataOperator *)operator_ {
  NSString *operatorName = [((ComIgormaznitsaProlDataOperator *) nil_chk(operator_)) getText];
  JavaUtilConcurrentLocksReentrantLock *lockerOp = operatorLocker_;
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(lockerOp)) lock];
  @try {
    if ([((ComIgormaznitsaProlLogicProlContext *) nil_chk(context_)) isSystemOperatorWithNSString:[operator_ getText]]) {
      @throw [[JavaLangSecurityException alloc] initWithNSString:[NSString stringWithFormat:@"Attemption to override a system operator [%@]", [operator_ getText]]];
    }
    ComIgormaznitsaProlContainersOperatorContainer *list = [((id<JavaUtilMap>) nil_chk(operatorTable_)) getWithId:operatorName];
    if (list == nil) {
      list = [[ComIgormaznitsaProlContainersOperatorContainer alloc] initWithComIgormaznitsaProlDataOperator:operator_];
      (void) [operatorTable_ putWithId:operatorName withId:list];
    }
    else {
      if (![list setOperatorWithComIgormaznitsaProlDataOperator:operator_]) {
        @throw [[JavaLangSecurityException alloc] initWithNSString:[NSString stringWithFormat:@"Such or a compatible operator is already presented [%@]", operatorName]];
      }
    }
  }
  @finally {
    [lockerOp unlock];
  }
}

- (ComIgormaznitsaProlContainersOperatorContainer *)findOperatorForNameWithNSString:(NSString *)name {
  ComIgormaznitsaProlContainersOperatorContainer *systemOperator = [((ComIgormaznitsaProlLogicProlContext *) nil_chk(context_)) getSystemOperatorForNameWithNSString:name];
  ComIgormaznitsaProlContainersOperatorContainer *result = nil;
  if (systemOperator == nil) {
    JavaUtilConcurrentLocksReentrantLock *lockerOp = operatorLocker_;
    [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(lockerOp)) lock];
    @try {
      result = [((id<JavaUtilMap>) nil_chk(operatorTable_)) getWithId:name];
    }
    @finally {
      [lockerOp unlock];
    }
  }
  else {
    result = systemOperator;
  }
  return result;
}

- (BOOL)hasOperatorStartsWithWithNSString:(NSString *)str {
  BOOL result = NO;
  if ([((ComIgormaznitsaProlLogicProlContext *) nil_chk(context_)) hasSystemOperatorStartsWithWithNSString:str]) {
    result = YES;
  }
  else {
    JavaUtilConcurrentLocksReentrantLock *lockerOp = operatorLocker_;
    [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(lockerOp)) lock];
    @try {
      id<JavaUtilIterator> operators = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(operatorTable_)) keySet])) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(operators)) hasNext]) {
        if ([((NSString *) nil_chk([operators next])) hasPrefix:str]) {
          result = YES;
          break;
        }
      }
    }
    @finally {
      [lockerOp unlock];
    }
  }
  return result;
}

- (void)writeWithJavaIoPrintWriter:(JavaIoPrintWriter *)writer {
  if (writer == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Writer must not be null"];
  }
  JavaUtilConcurrentLocksReentrantLock *lockerOp = operatorLocker_;
  JavaUtilConcurrentLocksReentrantLock *lockerPred = predicateLocker_;
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(lockerOp)) lock];
  @try {
    id<JavaUtilIterator> operators = [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk(operatorTable_)) values])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(operators)) hasNext]) {
      ComIgormaznitsaProlContainersOperatorContainer *container = [operators next];
      [((ComIgormaznitsaProlContainersOperatorContainer *) nil_chk(container)) writeWithJavaIoPrintWriter:writer];
    }
    [((JavaIoPrintWriter *) nil_chk(writer)) println];
  }
  @finally {
    [lockerOp unlock];
  }
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(lockerPred)) lock];
  @try {
    id<JavaUtilIterator> predicates = [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk(predicateTable_)) values])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(predicates)) hasNext]) {
      ComIgormaznitsaProlContainersKnowledgeBaseInsideClauseList *list = [predicates next];
      [((ComIgormaznitsaProlContainersKnowledgeBaseInsideClauseList *) nil_chk(list)) writeWithJavaIoPrintWriter:writer];
    }
  }
  @finally {
    [lockerPred unlock];
  }
}

- (BOOL)assertClauseWithComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)clause
                                              withBoolean:(BOOL)asFirst {
  @try {
    NSString *uid = nil;
    if ([((ComIgormaznitsaProlDataTermStruct *) nil_chk(clause)) isFunctorLikeRuleDefinition]) {
      ComIgormaznitsaProlDataTerm *leftPart = [clause getElementWithInt:0];
      if ([((ComIgormaznitsaProlDataTerm *) nil_chk(leftPart)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_ATOM) {
        leftPart = [[ComIgormaznitsaProlDataTermStruct alloc] initWithComIgormaznitsaProlDataTerm:leftPart];
        [clause setElementWithInt:0 withComIgormaznitsaProlDataTerm:leftPart];
      }
      uid = [leftPart getSignature];
    }
    else {
      uid = [clause getSignature];
    }
    BOOL result = NO;
    JavaUtilConcurrentLocksReentrantLock *lockerPred = predicateLocker_;
    [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(lockerPred)) lock];
    @try {
      ComIgormaznitsaProlContainersKnowledgeBaseInsideClauseList *list = [((id<JavaUtilMap>) nil_chk(predicateTable_)) getWithId:uid];
      if (list == nil) {
        list = [[ComIgormaznitsaProlContainersKnowledgeBaseInsideClauseList alloc] init];
        (void) [predicateTable_ putWithId:uid withId:list];
      }
      result = asFirst ? [((ComIgormaznitsaProlContainersKnowledgeBaseInsideClauseList *) nil_chk(list)) assertaWithComIgormaznitsaProlDataTermStruct:clause] : [((ComIgormaznitsaProlContainersKnowledgeBaseInsideClauseList *) nil_chk(list)) assertzWithComIgormaznitsaProlDataTermStruct:clause];
    }
    @finally {
      [lockerPred unlock];
    }
    if (result && [((ComIgormaznitsaProlLogicProlContext *) nil_chk(context_)) hasRegisteredTriggersForSignatureWithNSString:uid withComIgormaznitsaProlLogicTriggersProlTriggerTypeEnum:[ComIgormaznitsaProlLogicTriggersProlTriggerTypeEnum TRIGGER_ASSERT]]) {
      [context_ notifyTriggersForSignatureWithNSString:uid withComIgormaznitsaProlLogicTriggersProlTriggerTypeEnum:[ComIgormaznitsaProlLogicTriggersProlTriggerTypeEnum TRIGGER_ASSERT]];
    }
    return result;
  }
  @catch (JavaLangIllegalArgumentException *ex) {
    @throw [[ComIgormaznitsaProlExceptionsProlKnowledgeBaseException alloc] initWithNSString:[NSString stringWithFormat:@"You can't add such atom into the base [%@]", [((ComIgormaznitsaProlDataTermStruct *) nil_chk(clause)) getSourceLikeRepresentation]] withJavaLangThrowable:ex];
  }
}

- (id<ComIgormaznitsaProlContainersFactIterator>)getFactIteratorWithComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)template_ {
  NSString *uid = [((ComIgormaznitsaProlDataTermStruct *) nil_chk(template_)) getSignature];
  JavaUtilConcurrentLocksReentrantLock *lockerPred = predicateLocker_;
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(lockerPred)) lock];
  @try {
    ComIgormaznitsaProlContainersKnowledgeBaseInsideClauseList *list = [((id<JavaUtilMap>) nil_chk(predicateTable_)) getWithId:uid];
    id<ComIgormaznitsaProlContainersFactIterator> result = nil;
    if (list != nil) {
      result = [[ComIgormaznitsaProlContainersMemoryFactIterator alloc] initWithComIgormaznitsaProlContainersKnowledgeBaseInsideClauseList:list withComIgormaznitsaProlDataTermStruct:template_];
    }
    return result;
  }
  @finally {
    [lockerPred unlock];
  }
}

- (id<ComIgormaznitsaProlContainersRuleIterator>)getRuleIteratorWithComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)template_ {
  NSString *uid = [((ComIgormaznitsaProlDataTermStruct *) nil_chk(template_)) getSignature];
  JavaUtilConcurrentLocksReentrantLock *lockerPred = predicateLocker_;
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(lockerPred)) lock];
  @try {
    ComIgormaznitsaProlContainersKnowledgeBaseInsideClauseList *list = [((id<JavaUtilMap>) nil_chk(predicateTable_)) getWithId:uid];
    id<ComIgormaznitsaProlContainersRuleIterator> result = nil;
    if (list != nil) {
      result = [[ComIgormaznitsaProlContainersMemoryRuleIterator alloc] initWithComIgormaznitsaProlContainersKnowledgeBaseInsideClauseList:list withComIgormaznitsaProlDataTermStruct:template_];
    }
    return result;
  }
  @finally {
    [lockerPred unlock];
  }
}

- (id<ComIgormaznitsaProlContainersClauseIterator>)getClauseIteratorWithComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)template_ {
  NSString *uid = [((ComIgormaznitsaProlDataTermStruct *) nil_chk(template_)) getSignature];
  JavaUtilConcurrentLocksReentrantLock *lockerPred = predicateLocker_;
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(lockerPred)) lock];
  @try {
    ComIgormaznitsaProlContainersKnowledgeBaseInsideClauseList *list = [((id<JavaUtilMap>) nil_chk(predicateTable_)) getWithId:uid];
    id<ComIgormaznitsaProlContainersClauseIterator> result = nil;
    if (list != nil) {
      result = [[ComIgormaznitsaProlContainersMemoryClauseIterator alloc] initWithComIgormaznitsaProlContainersKnowledgeBaseInsideClauseList:list withComIgormaznitsaProlDataTermStruct:template_];
    }
    return result;
  }
  @finally {
    [lockerPred unlock];
  }
}

- (BOOL)assertZWithComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)clause {
  return [self assertClauseWithComIgormaznitsaProlDataTermStruct:clause withBoolean:NO];
}

- (BOOL)assertAWithComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)clause {
  return [self assertClauseWithComIgormaznitsaProlDataTermStruct:clause withBoolean:YES];
}

- (BOOL)retractAllWithComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)clause {
  ComIgormaznitsaProlDataTermStruct *struct_ = clause;
  if ([((ComIgormaznitsaProlDataTermStruct *) nil_chk(struct_)) isFunctorLikeRuleDefinition]) {
    struct_ = (ComIgormaznitsaProlDataTermStruct *) check_class_cast([struct_ getElementWithInt:0], [ComIgormaznitsaProlDataTermStruct class]);
  }
  JavaUtilConcurrentLocksReentrantLock *lockerPred = predicateLocker_;
  BOOL result = NO;
  NSString *uid = nil;
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(lockerPred)) lock];
  @try {
    uid = [((ComIgormaznitsaProlDataTermStruct *) nil_chk(struct_)) getSignature];
    ComIgormaznitsaProlContainersKnowledgeBaseInsideClauseList *list = [((id<JavaUtilMap>) nil_chk(predicateTable_)) getWithId:uid];
    if (list != nil) {
      result = [list retractallWithComIgormaznitsaProlDataTermStruct:struct_] != 0;
      if (result && [list size] == 0) {
        (void) [predicateTable_ removeWithId:uid];
      }
    }
  }
  @finally {
    [lockerPred unlock];
  }
  if (result && [((ComIgormaznitsaProlLogicProlContext *) nil_chk(context_)) hasRegisteredTriggersForSignatureWithNSString:uid withComIgormaznitsaProlLogicTriggersProlTriggerTypeEnum:[ComIgormaznitsaProlLogicTriggersProlTriggerTypeEnum TRIGGER_RETRACT]]) {
    [context_ notifyTriggersForSignatureWithNSString:uid withComIgormaznitsaProlLogicTriggersProlTriggerTypeEnum:[ComIgormaznitsaProlLogicTriggersProlTriggerTypeEnum TRIGGER_RETRACT]];
  }
  return result;
}

- (BOOL)retractAWithComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)clause {
  ComIgormaznitsaProlDataTermStruct *struct_ = clause;
  if ([((ComIgormaznitsaProlDataTermStruct *) nil_chk(struct_)) isFunctorLikeRuleDefinition]) {
    struct_ = (ComIgormaznitsaProlDataTermStruct *) check_class_cast([struct_ getElementWithInt:0], [ComIgormaznitsaProlDataTermStruct class]);
  }
  JavaUtilConcurrentLocksReentrantLock *lockerPred = predicateLocker_;
  BOOL result = NO;
  NSString *uid = nil;
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(lockerPred)) lock];
  @try {
    uid = [((ComIgormaznitsaProlDataTermStruct *) nil_chk(struct_)) getSignature];
    ComIgormaznitsaProlContainersKnowledgeBaseInsideClauseList *list = [((id<JavaUtilMap>) nil_chk(predicateTable_)) getWithId:uid];
    if (list != nil) {
      result = [list retractaWithComIgormaznitsaProlDataTermStruct:struct_];
      if (result && [list size] == 0) {
        (void) [predicateTable_ removeWithId:uid];
      }
    }
  }
  @finally {
    [lockerPred unlock];
  }
  if (result && [((ComIgormaznitsaProlLogicProlContext *) nil_chk(context_)) hasRegisteredTriggersForSignatureWithNSString:uid withComIgormaznitsaProlLogicTriggersProlTriggerTypeEnum:[ComIgormaznitsaProlLogicTriggersProlTriggerTypeEnum TRIGGER_RETRACT]]) {
    [context_ notifyTriggersForSignatureWithNSString:uid withComIgormaznitsaProlLogicTriggersProlTriggerTypeEnum:[ComIgormaznitsaProlLogicTriggersProlTriggerTypeEnum TRIGGER_RETRACT]];
  }
  return result;
}

- (BOOL)retractZWithComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)clause {
  ComIgormaznitsaProlDataTermStruct *struct_ = clause;
  if ([((ComIgormaznitsaProlDataTermStruct *) nil_chk(struct_)) isFunctorLikeRuleDefinition]) {
    struct_ = (ComIgormaznitsaProlDataTermStruct *) check_class_cast([struct_ getElementWithInt:0], [ComIgormaznitsaProlDataTermStruct class]);
  }
  BOOL result = NO;
  NSString *uid = nil;
  JavaUtilConcurrentLocksReentrantLock *lockerPred = predicateLocker_;
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(lockerPred)) lock];
  @try {
    uid = [((ComIgormaznitsaProlDataTermStruct *) nil_chk(struct_)) getSignature];
    ComIgormaznitsaProlContainersKnowledgeBaseInsideClauseList *list = [((id<JavaUtilMap>) nil_chk(predicateTable_)) getWithId:uid];
    if (list != nil) {
      result = [list retractzWithComIgormaznitsaProlDataTermStruct:struct_];
      if (result && [list size] == 0) {
        (void) [predicateTable_ removeWithId:uid];
      }
    }
  }
  @finally {
    [lockerPred unlock];
  }
  if (result && [((ComIgormaznitsaProlLogicProlContext *) nil_chk(context_)) hasRegisteredTriggersForSignatureWithNSString:uid withComIgormaznitsaProlLogicTriggersProlTriggerTypeEnum:[ComIgormaznitsaProlLogicTriggersProlTriggerTypeEnum TRIGGER_RETRACT]]) {
    [context_ notifyTriggersForSignatureWithNSString:uid withComIgormaznitsaProlLogicTriggersProlTriggerTypeEnum:[ComIgormaznitsaProlLogicTriggersProlTriggerTypeEnum TRIGGER_RETRACT]];
  }
  return result;
}

- (void)abolishWithNSString:(NSString *)signature {
  JavaUtilConcurrentLocksReentrantLock *lockerPred = predicateLocker_;
  BOOL result = NO;
  NSString *normalizedUID = [ComIgormaznitsaProlUtilsUtils normalizeSignatureWithNSString:signature];
  if (normalizedUID == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Wrong signature format '%@'", signature]];
  }
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(lockerPred)) lock];
  @try {
    result = [((id<JavaUtilMap>) nil_chk(predicateTable_)) removeWithId:normalizedUID] != nil;
  }
  @finally {
    [lockerPred unlock];
  }
  if (result && [((ComIgormaznitsaProlLogicProlContext *) nil_chk(context_)) hasRegisteredTriggersForSignatureWithNSString:normalizedUID withComIgormaznitsaProlLogicTriggersProlTriggerTypeEnum:[ComIgormaznitsaProlLogicTriggersProlTriggerTypeEnum TRIGGER_RETRACT]]) {
    [context_ notifyTriggersForSignatureWithNSString:normalizedUID withComIgormaznitsaProlLogicTriggersProlTriggerTypeEnum:[ComIgormaznitsaProlLogicTriggersProlTriggerTypeEnum TRIGGER_RETRACT]];
  }
}

- (id<JavaUtilIterator>)getOperatorIterator {
  JavaUtilConcurrentLocksReentrantLock *lockerOp = operatorLocker_;
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(lockerOp)) lock];
  @try {
    return [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk(operatorTable_)) values])) iterator];
  }
  @finally {
    [lockerOp unlock];
  }
}

- (id<ComIgormaznitsaProlContainersKnowledgeBase>)makeCopyWithComIgormaznitsaProlLogicProlContext:(ComIgormaznitsaProlLogicProlContext *)context {
  return [[ComIgormaznitsaProlContainersMemoryKnowledgeBase alloc] initWithComIgormaznitsaProlLogicProlContext:context withNSString:[NSString stringWithFormat:@"%@_copy", basedId_] withComIgormaznitsaProlContainersMemoryKnowledgeBase:self];
}

- (void)copyAllFieldsTo:(ComIgormaznitsaProlContainersMemoryKnowledgeBase *)other {
  [super copyAllFieldsTo:other];
  other->basedId_ = basedId_;
  other->context_ = context_;
  other->operatorLocker_ = operatorLocker_;
  other->operatorTable_ = operatorTable_;
  other->predicateLocker_ = predicateLocker_;
  other->predicateTable_ = predicateTable_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithComIgormaznitsaProlLogicProlContext:withNSString:", "MemoryKnowledgeBase", NULL, 0x1, NULL },
    { "initWithComIgormaznitsaProlLogicProlContext:withNSString:withComIgormaznitsaProlContainersMemoryKnowledgeBase:", "MemoryKnowledgeBase", NULL, 0x2, NULL },
    { "getVocabularyId", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "addOperatorsWithComIgormaznitsaProlDataOperatorArray:", "addOperators", "V", 0x1, NULL },
    { "getOperatorForTypeAndNameWithNSString:withInt:", "getOperatorForTypeAndName", "Lcom.igormaznitsa.prol.data.Operator;", 0x1, NULL },
    { "removeOperatorWithNSString:withInt:", "removeOperator", "Z", 0x1, NULL },
    { "addOperatorWithComIgormaznitsaProlDataOperator:", "addOperator", "V", 0x1, NULL },
    { "findOperatorForNameWithNSString:", "findOperatorForName", "Lcom.igormaznitsa.prol.containers.OperatorContainer;", 0x1, NULL },
    { "hasOperatorStartsWithWithNSString:", "hasOperatorStartsWith", "Z", 0x1, NULL },
    { "writeWithJavaIoPrintWriter:", "write", "V", 0x1, NULL },
    { "assertClauseWithComIgormaznitsaProlDataTermStruct:withBoolean:", "assertClause", "Z", 0x2, NULL },
    { "getFactIteratorWithComIgormaznitsaProlDataTermStruct:", "getFactIterator", "Lcom.igormaznitsa.prol.containers.FactIterator;", 0x1, NULL },
    { "getRuleIteratorWithComIgormaznitsaProlDataTermStruct:", "getRuleIterator", "Lcom.igormaznitsa.prol.containers.RuleIterator;", 0x1, NULL },
    { "getClauseIteratorWithComIgormaznitsaProlDataTermStruct:", "getClauseIterator", "Lcom.igormaznitsa.prol.containers.ClauseIterator;", 0x1, NULL },
    { "assertZWithComIgormaznitsaProlDataTermStruct:", "assertZ", "Z", 0x1, NULL },
    { "assertAWithComIgormaznitsaProlDataTermStruct:", "assertA", "Z", 0x1, NULL },
    { "retractAllWithComIgormaznitsaProlDataTermStruct:", "retractAll", "Z", 0x1, NULL },
    { "retractAWithComIgormaznitsaProlDataTermStruct:", "retractA", "Z", 0x1, NULL },
    { "retractZWithComIgormaznitsaProlDataTermStruct:", "retractZ", "Z", 0x1, NULL },
    { "abolishWithNSString:", "abolish", "V", 0x1, NULL },
    { "getOperatorIterator", NULL, "Ljava.util.Iterator;", 0x1, NULL },
    { "makeCopyWithComIgormaznitsaProlLogicProlContext:", "makeCopy", "Lcom.igormaznitsa.prol.containers.KnowledgeBase;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "basedId_", NULL, 0x12, "Ljava.lang.String;" },
    { "operatorTable_", NULL, 0x12, "Ljava.util.Map;" },
    { "predicateTable_", NULL, 0x12, "Ljava.util.Map;" },
    { "context_", NULL, 0x12, "Lcom.igormaznitsa.prol.logic.ProlContext;" },
    { "operatorLocker_", NULL, 0x12, "Ljava.util.concurrent.locks.ReentrantLock;" },
    { "predicateLocker_", NULL, 0x12, "Ljava.util.concurrent.locks.ReentrantLock;" },
  };
  static J2ObjcClassInfo _ComIgormaznitsaProlContainersMemoryKnowledgeBase = { "MemoryKnowledgeBase", "com.igormaznitsa.prol.containers", NULL, 0x11, 22, methods, 6, fields, 0, NULL};
  return &_ComIgormaznitsaProlContainersMemoryKnowledgeBase;
}

@end
