//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/igormaznitsa/prol/containers/OperatorContainer.java
//
//  Created by katsura on 14/04/13.
//

#include "com/igormaznitsa/prol/containers/OperatorContainer.h"
#include "com/igormaznitsa/prol/data/Operator.h"
#include "com/igormaznitsa/prol/data/Term.h"
#include "java/io/PrintWriter.h"
#include "java/lang/Error.h"

@implementation ComIgormaznitsaProlContainersOperatorContainer

- (id)initWithComIgormaznitsaProlContainersOperatorContainer:(ComIgormaznitsaProlContainersOperatorContainer *)etalon {
  if (self = [super initWithNSString:[((ComIgormaznitsaProlContainersOperatorContainer *) nil_chk(etalon)) getText]]) {
    opFZ_ = etalon->opFZ_;
    opZF_ = etalon->opZF_;
    opZFZ_ = etalon->opZFZ_;
    numberAtContainer_ = etalon->numberAtContainer_;
    system_ = etalon->system_;
  }
  return self;
}

- (id)initWithComIgormaznitsaProlDataOperator:(ComIgormaznitsaProlDataOperator *)operator_ {
  return [self initComIgormaznitsaProlContainersOperatorContainerWithComIgormaznitsaProlDataOperator:operator_ withBoolean:NO];
}

- (id)initComIgormaznitsaProlContainersOperatorContainerWithComIgormaznitsaProlDataOperator:(ComIgormaznitsaProlDataOperator *)operator_
                                                                                withBoolean:(BOOL)systemOperator {
  if (self = [super initWithNSString:[((ComIgormaznitsaProlDataOperator *) nil_chk(operator_)) getText]]) {
    [self setOperatorWithComIgormaznitsaProlDataOperator:operator_];
    self->system_ = systemOperator;
  }
  return self;
}

- (id)initWithComIgormaznitsaProlDataOperator:(ComIgormaznitsaProlDataOperator *)operator_
                                  withBoolean:(BOOL)systemOperator {
  return [self initComIgormaznitsaProlContainersOperatorContainerWithComIgormaznitsaProlDataOperator:operator_ withBoolean:systemOperator];
}

- (BOOL)isSystem {
  return system_;
}

- (BOOL)setOperatorWithComIgormaznitsaProlDataOperator:(ComIgormaznitsaProlDataOperator *)operator_ {
  switch ([((ComIgormaznitsaProlDataOperator *) nil_chk(operator_)) getOperatorType]) {
    case ComIgormaznitsaProlDataOperator_OPTYPE_FX:
    case ComIgormaznitsaProlDataOperator_OPTYPE_FY:
    {
      if (opFZ_ != nil) {
        return NO;
      }
      opFZ_ = operator_;
      numberAtContainer_++;
    }
    break;
    case ComIgormaznitsaProlDataOperator_OPTYPE_XF:
    case ComIgormaznitsaProlDataOperator_OPTYPE_YF:
    {
      if (opZF_ != nil) {
        return NO;
      }
      opZF_ = operator_;
      numberAtContainer_++;
    }
    break;
    case ComIgormaznitsaProlDataOperator_OPTYPE_XFX:
    case ComIgormaznitsaProlDataOperator_OPTYPE_XFY:
    case ComIgormaznitsaProlDataOperator_OPTYPE_YFX:
    {
      if (opZFZ_ != nil) {
        return NO;
      }
      opZFZ_ = operator_;
      numberAtContainer_++;
    }
    break;
    default:
    {
      @throw [[JavaLangError alloc] initWithNSString:@"Unsupported operator type"];
    }
  }
  return YES;
}

- (int)getTermType {
  return ComIgormaznitsaProlDataTerm_TYPE_OPERATORS;
}

- (int)size {
  return numberAtContainer_;
}

- (ComIgormaznitsaProlDataOperator *)getOperatorIfSingle {
  if (numberAtContainer_ == 1) {
    if (opZFZ_ != nil) {
      return opZFZ_;
    }
    if (opFZ_ != nil) {
      return opFZ_;
    }
    return opZF_;
  }
  return nil;
}

- (ComIgormaznitsaProlDataOperator *)getCompatibleOperatorWithBoolean:(BOOL)leftPresented
                                                          withBoolean:(BOOL)rightPresented {
  if (leftPresented && rightPresented) {
    if (opZFZ_ != nil) {
      return opZFZ_;
    }
    if (opFZ_ != nil) {
      return opFZ_;
    }
    return opZF_;
  }
  if (leftPresented && !rightPresented) {
    if (opZF_ != nil) {
      return opZF_;
    }
    return opFZ_;
  }
  if (!leftPresented && rightPresented) {
    if (opFZ_ != nil) {
      return opFZ_;
    }
    return opZF_;
  }
  return nil;
}

- (void)writeWithJavaIoPrintWriter:(JavaIoPrintWriter *)writer {
  if (opFZ_ != nil) {
    [opFZ_ writeWithJavaIoPrintWriter:writer];
  }
  if (opZF_ != nil) {
    [opZF_ writeWithJavaIoPrintWriter:writer];
  }
  if (opZFZ_ != nil) {
    [opZFZ_ writeWithJavaIoPrintWriter:writer];
  }
}

- (ComIgormaznitsaProlDataOperator *)getForTypePreciselyWithInt:(int)type {
  ComIgormaznitsaProlDataOperator *result = nil;
  switch (type) {
    case ComIgormaznitsaProlDataOperator_OPTYPE_FY:
    case ComIgormaznitsaProlDataOperator_OPTYPE_FX:
    {
      if (opFZ_ != nil) {
        result = opFZ_;
      }
    }
    break;
    case ComIgormaznitsaProlDataOperator_OPTYPE_XF:
    case ComIgormaznitsaProlDataOperator_OPTYPE_YF:
    {
      if (opZF_ != nil) {
        result = opZF_;
      }
    }
    break;
    case ComIgormaznitsaProlDataOperator_OPTYPE_XFX:
    case ComIgormaznitsaProlDataOperator_OPTYPE_YFX:
    case ComIgormaznitsaProlDataOperator_OPTYPE_XFY:
    {
      if (opZFZ_ != nil) {
        result = opZFZ_;
      }
    }
    break;
    default:
    {
      @throw [[JavaLangError alloc] initWithNSString:@"Unsupported operator type"];
    }
  }
  if (result != nil && [result getOperatorType] == type) {
    return result;
  }
  return nil;
}

- (ComIgormaznitsaProlDataOperator *)getOperatorForTypeFamilyWithInt:(int)type {
  switch (type) {
    case ComIgormaznitsaProlDataOperator_OPTYPE_FX:
    case ComIgormaznitsaProlDataOperator_OPTYPE_FY:
    return opFZ_;
    case ComIgormaznitsaProlDataOperator_OPTYPE_XF:
    case ComIgormaznitsaProlDataOperator_OPTYPE_YF:
    return opZF_;
    case ComIgormaznitsaProlDataOperator_OPTYPE_XFX:
    case ComIgormaznitsaProlDataOperator_OPTYPE_YFX:
    case ComIgormaznitsaProlDataOperator_OPTYPE_XFY:
    return opZFZ_;
    default:
    return nil;
  }
}

- (BOOL)removeOperatorForTypeWithInt:(int)type {
  BOOL result = NO;
  switch (type) {
    case ComIgormaznitsaProlDataOperator_OPTYPE_FX:
    case ComIgormaznitsaProlDataOperator_OPTYPE_FY:
    {
      if (opFZ_ != nil && [opFZ_ getOperatorType] == type) {
        opFZ_ = nil;
        result = YES;
      }
    }
    break;
    case ComIgormaznitsaProlDataOperator_OPTYPE_XF:
    case ComIgormaznitsaProlDataOperator_OPTYPE_YF:
    {
      if (opZF_ != nil && [opZF_ getOperatorType] == type) {
        opZF_ = nil;
        result = YES;
      }
    }
    break;
    case ComIgormaznitsaProlDataOperator_OPTYPE_XFX:
    case ComIgormaznitsaProlDataOperator_OPTYPE_YFX:
    case ComIgormaznitsaProlDataOperator_OPTYPE_XFY:
    {
      if (opZFZ_ != nil && [opZFZ_ getOperatorType] == type) {
        opZFZ_ = nil;
        result = YES;
      }
    }
    break;
    default:
    return NO;
  }
  return result;
}

- (ComIgormaznitsaProlContainersOperatorContainer *)makeCopy {
  return [[ComIgormaznitsaProlContainersOperatorContainer alloc] initWithComIgormaznitsaProlContainersOperatorContainer:self];
}

- (void)copyAllFieldsTo:(ComIgormaznitsaProlContainersOperatorContainer *)other {
  [super copyAllFieldsTo:other];
  other->numberAtContainer_ = numberAtContainer_;
  other->opFZ_ = opFZ_;
  other->opZF_ = opZF_;
  other->opZFZ_ = opZFZ_;
  other->system_ = system_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithComIgormaznitsaProlContainersOperatorContainer:", "OperatorContainer", NULL, 0x2, NULL },
    { "initWithComIgormaznitsaProlDataOperator:", "OperatorContainer", NULL, 0x1, NULL },
    { "initWithComIgormaznitsaProlDataOperator:withBoolean:", "OperatorContainer", NULL, 0x1, NULL },
    { "isSystem", NULL, "Z", 0x1, NULL },
    { "setOperatorWithComIgormaznitsaProlDataOperator:", "setOperator", "Z", 0x1, NULL },
    { "getTermType", NULL, "I", 0x1, NULL },
    { "size", NULL, "I", 0x1, NULL },
    { "getOperatorIfSingle", NULL, "Lcom.igormaznitsa.prol.data.Operator;", 0x1, NULL },
    { "getCompatibleOperatorWithBoolean:withBoolean:", "getCompatibleOperator", "Lcom.igormaznitsa.prol.data.Operator;", 0x1, NULL },
    { "writeWithJavaIoPrintWriter:", "write", "V", 0x1, NULL },
    { "getForTypePreciselyWithInt:", "getForTypePrecisely", "Lcom.igormaznitsa.prol.data.Operator;", 0x1, NULL },
    { "getOperatorForTypeFamilyWithInt:", "getOperatorForTypeFamily", "Lcom.igormaznitsa.prol.data.Operator;", 0x1, NULL },
    { "removeOperatorForTypeWithInt:", "removeOperatorForType", "Z", 0x1, NULL },
    { "makeCopy", NULL, "Lcom.igormaznitsa.prol.containers.OperatorContainer;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "opFZ_", NULL, 0x2, "Lcom.igormaznitsa.prol.data.Operator;" },
    { "opZF_", NULL, 0x2, "Lcom.igormaznitsa.prol.data.Operator;" },
    { "opZFZ_", NULL, 0x2, "Lcom.igormaznitsa.prol.data.Operator;" },
    { "numberAtContainer_", NULL, 0x2, "I" },
    { "system_", NULL, 0x2, "Z" },
  };
  static J2ObjcClassInfo _ComIgormaznitsaProlContainersOperatorContainer = { "OperatorContainer", "com.igormaznitsa.prol.containers", NULL, 0x11, 14, methods, 5, fields, 0, NULL};
  return &_ComIgormaznitsaProlContainersOperatorContainer;
}

@end
