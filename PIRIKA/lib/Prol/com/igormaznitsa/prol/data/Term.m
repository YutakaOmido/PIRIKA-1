//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/igormaznitsa/prol/data/Term.java
//
//  Created by katsura on 14/04/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/igormaznitsa/prol/data/NumericTerm.h"
#include "com/igormaznitsa/prol/data/Term.h"
#include "com/igormaznitsa/prol/data/TermInteger.h"
#include "com/igormaznitsa/prol/data/TermList.h"
#include "com/igormaznitsa/prol/data/TermStruct.h"
#include "com/igormaznitsa/prol/data/Var.h"
#include "com/igormaznitsa/prol/exceptions/ProlCriticalError.h"
#include "com/igormaznitsa/prol/libraries/PredicateProcessor.h"
#include "com/igormaznitsa/prol/utils/Utils.h"
#include "java/io/Serializable.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

@implementation ComIgormaznitsaProlDataTerm

static ComIgormaznitsaProlDataTerm * ComIgormaznitsaProlDataTerm_TERM_TRUE_;

+ (int)TYPE_ATOM {
  return ComIgormaznitsaProlDataTerm_TYPE_ATOM;
}

+ (int)TYPE_STRUCT {
  return ComIgormaznitsaProlDataTerm_TYPE_STRUCT;
}

+ (int)TYPE_VAR {
  return ComIgormaznitsaProlDataTerm_TYPE_VAR;
}

+ (int)TYPE_OPERATOR {
  return ComIgormaznitsaProlDataTerm_TYPE_OPERATOR;
}

+ (int)TYPE_OPERATORS {
  return ComIgormaznitsaProlDataTerm_TYPE_OPERATORS;
}

+ (int)TYPE_LIST {
  return ComIgormaznitsaProlDataTerm_TYPE_LIST;
}

+ (ComIgormaznitsaProlDataTerm *)TERM_TRUE {
  return ComIgormaznitsaProlDataTerm_TERM_TRUE_;
}

- (id<JavaIoSerializable>)getCarriedObject {
  @synchronized(self) {
    {
      return carriedObject_;
    }
  }
}

- (void)setCarriedObjectWithJavaIoSerializable:(id<JavaIoSerializable>)object {
  @synchronized(self) {
    {
      carriedObject_ = object;
    }
  }
}

- (id)initWithNSString:(NSString *)termText {
  if (self = [super init]) {
    self->termText_ = termText;
  }
  return self;
}

- (int)getPriority {
  return 0;
}

- (NSString *)getText {
  return termText_;
}

- (int)getTermType {
  return ComIgormaznitsaProlDataTerm_TYPE_ATOM;
}

- (BOOL)equWithoutSetWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)term {
  if (self == term) {
    return YES;
  }
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(term)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_VAR) {
    term = [((ComIgormaznitsaProlDataVar *) check_class_cast(term, [ComIgormaznitsaProlDataVar class])) getValue];
  }
  if (term == nil) {
    return YES;
  }
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(term)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_ATOM) {
    return [((NSString *) nil_chk([self getText])) isEqual:[term getText]];
  }
  return NO;
}

- (BOOL)checkVariables {
  return YES;
}

- (void)fillVarablesWithJavaUtilMap:(id<JavaUtilMap>)table {
}

- (NSString *)getSourceLikeRepresentation {
  return [NSString stringWithFormat:@"'%@'", [ComIgormaznitsaProlUtilsUtils encodeTextSourceLikeWithNSString:[self getText]]];
}

- (NSString *)description {
  return [self getSourceLikeRepresentation];
}

- (NSUInteger)hash {
  if (termText_ == nil) {
    return [super hash];
  }
  else {
    return [termText_ hash];
  }
}

- (BOOL)isEqual:(id)obj {
  if (obj == nil) {
    return NO;
  }
  if (self == obj) {
    return YES;
  }
  IOSClass *objclass = [nil_chk(obj) getClass];
  if (objclass == [IOSClass classWithClass:[ComIgormaznitsaProlDataTermInteger class]] || [obj getClass] == [IOSClass classWithClass:[ComIgormaznitsaProlDataTerm class]]) {
    ComIgormaznitsaProlDataTerm *other = (ComIgormaznitsaProlDataTerm *) check_class_cast(obj, [ComIgormaznitsaProlDataTerm class]);
    if ([self hash] != [other hash]) {
      return NO;
    }
    return [((NSString *) nil_chk(self->termText_)) isEqual:other->termText_];
  }
  else {
    return NO;
  }
}

- (NSString *)getSignature {
  return [self getText];
}

- (NSString *)forWrite {
  return [self getText];
}

- (BOOL)EquWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)otherTerm {
  if (self == otherTerm) {
    return YES;
  }
  BOOL result = NO;
  switch ([((ComIgormaznitsaProlDataTerm *) nil_chk(otherTerm)) getTermType]) {
    case ComIgormaznitsaProlDataTerm_TYPE_ATOM:
    {
      result = [((NSString *) nil_chk([self getText])) isEqual:[otherTerm getText]];
    }
    break;
    case ComIgormaznitsaProlDataTerm_TYPE_STRUCT:
    {
      ComIgormaznitsaProlDataTermStruct *struct_ = (ComIgormaznitsaProlDataTermStruct *) check_class_cast(otherTerm, [ComIgormaznitsaProlDataTermStruct class]);
      if ([struct_ getArity] == 0) {
        result = [((NSString *) nil_chk([((ComIgormaznitsaProlDataTerm *) nil_chk([struct_ getFunctor])) getText])) isEqual:termText_];
      }
    }
    break;
    case ComIgormaznitsaProlDataTerm_TYPE_VAR:
    {
      ComIgormaznitsaProlDataVar *var = (ComIgormaznitsaProlDataVar *) check_class_cast(otherTerm, [ComIgormaznitsaProlDataVar class]);
      ComIgormaznitsaProlDataTerm *value = [var getValue];
      if (value == nil) {
        result = [((ComIgormaznitsaProlDataVar *) check_class_cast(otherTerm, [ComIgormaznitsaProlDataVar class])) setValueWithComIgormaznitsaProlDataTerm:self];
      }
      else {
        result = [self EquWithComIgormaznitsaProlDataTerm:value];
      }
    }
    break;
  }
  return result;
}

- (ComIgormaznitsaProlDataTermList *)asCharList {
  NSString *text = [self getText];
  int len = [((NSString *) nil_chk(text)) length];
  if (len == 0) {
    return [ComIgormaznitsaProlDataTermList NULLLIST];
  }
  JavaLangStringBuilder *buff = [[JavaLangStringBuilder alloc] initWithInt:1];
  ComIgormaznitsaProlDataTermList *resultList = nil;
  ComIgormaznitsaProlDataTermList *curList = nil;
  for (int li = 0; li < len; li++) {
    (void) [buff appendWithChar:[text charAtWithInt:li]];
    ComIgormaznitsaProlDataTerm *newAtom = [[ComIgormaznitsaProlDataTerm alloc] initWithNSString:[buff description]];
    [buff setLengthWithInt:0];
    if (li == 0) {
      resultList = [[ComIgormaznitsaProlDataTermList alloc] initWithComIgormaznitsaProlDataTerm:newAtom];
      curList = resultList;
    }
    else {
      curList = [ComIgormaznitsaProlDataTermList appendItemWithComIgormaznitsaProlDataTermList:curList withComIgormaznitsaProlDataTerm:newAtom];
    }
  }
  return resultList;
}

- (ComIgormaznitsaProlDataTermList *)asCharCodeList {
  if (termText_ == nil) {
    return [ComIgormaznitsaProlDataTermList NULLLIST];
  }
  int len = [((NSString *) nil_chk(termText_)) length];
  if (len == 0) {
    return [ComIgormaznitsaProlDataTermList NULLLIST];
  }
  ComIgormaznitsaProlDataTermList *resultList = nil;
  ComIgormaznitsaProlDataTermList *curList = nil;
  for (int li = 0; li < len; li++) {
    ComIgormaznitsaProlDataTerm *newAtom = [[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:[termText_ charAtWithInt:li]];
    if (li == 0) {
      resultList = [[ComIgormaznitsaProlDataTermList alloc] initWithComIgormaznitsaProlDataTerm:newAtom];
      curList = resultList;
    }
    else {
      curList = [ComIgormaznitsaProlDataTermList appendItemWithComIgormaznitsaProlDataTermList:curList withComIgormaznitsaProlDataTerm:newAtom];
    }
  }
  return resultList;
}

- (int)termComparsionWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)atom {
  if (self == atom) {
    return 0;
  }
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(atom)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_VAR && ![((ComIgormaznitsaProlDataVar *) check_class_cast(atom, [ComIgormaznitsaProlDataVar class])) isUndefined]) {
    atom = [((ComIgormaznitsaProlDataVar *) check_class_cast(atom, [ComIgormaznitsaProlDataVar class])) getValue];
  }
  switch ([((ComIgormaznitsaProlDataTerm *) nil_chk(atom)) getTermType]) {
    case ComIgormaznitsaProlDataTerm_TYPE_ATOM:
    {
      if ([atom conformsToProtocol: @protocol(ComIgormaznitsaProlDataNumericTerm)]) {
        return 1;
      }
      return [((NSString *) nil_chk(termText_)) compareToWithId:atom->termText_];
    }
    case ComIgormaznitsaProlDataTerm_TYPE_VAR:
    {
      return 1;
    }
    case ComIgormaznitsaProlDataTerm_TYPE_OPERATOR:
    {
      return [((NSString *) nil_chk(termText_)) compareToWithId:atom->termText_];
    }
    default:
    return -1;
  }
}

- (BOOL)hasAnyDifferenceWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)comparedTerm {
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(comparedTerm)) getTermType] != ComIgormaznitsaProlDataTerm_TYPE_ATOM || [comparedTerm conformsToProtocol: @protocol(ComIgormaznitsaProlDataNumericTerm)]) {
    return YES;
  }
  return ![((NSString *) nil_chk(termText_)) isEqual:comparedTerm->termText_];
}

- (int)getTextLength {
  int result = 0;
  if (termText_ != nil) {
    result = [termText_ length];
  }
  return result;
}

- (BOOL)hasVariableWithNameWithNSString:(NSString *)name {
  return NO;
}

- (ComIgormaznitsaProlDataTerm *)makeClone {
  ComIgormaznitsaProlDataTerm *termToBeClone = self;
  ComIgormaznitsaProlDataTerm *result = nil;
  switch ([termToBeClone getTermType]) {
    case ComIgormaznitsaProlDataTerm_TYPE_ATOM:
    case ComIgormaznitsaProlDataTerm_TYPE_OPERATOR:
    {
      result = termToBeClone;
    }
    break;
    case ComIgormaznitsaProlDataTerm_TYPE_STRUCT:
    {
      if ([((ComIgormaznitsaProlDataTermStruct *) check_class_cast(termToBeClone, [ComIgormaznitsaProlDataTermStruct class])) getArity] == 0) {
        result = termToBeClone;
      }
    }
    break;
    case ComIgormaznitsaProlDataTerm_TYPE_LIST:
    {
      if (termToBeClone == [ComIgormaznitsaProlDataTermList NULLLIST]) {
        result = termToBeClone;
      }
      else {
        id<JavaUtilMap> varHashMap = [[JavaUtilHashMap alloc] init];
        result = [termToBeClone makeCloneWithJavaUtilMap:varHashMap];
      }
    }
    break;
    case ComIgormaznitsaProlDataTerm_TYPE_VAR:
    {
      ComIgormaznitsaProlDataVar *termAsVar = (ComIgormaznitsaProlDataVar *) check_class_cast(termToBeClone, [ComIgormaznitsaProlDataVar class]);
      ComIgormaznitsaProlDataTerm *value = [((ComIgormaznitsaProlDataVar *) check_class_cast(termToBeClone, [ComIgormaznitsaProlDataVar class])) getThisValue];
      result = [termAsVar isAnonymous] ? [[ComIgormaznitsaProlDataVar alloc] init] : [[ComIgormaznitsaProlDataVar alloc] initWithNSString:[termAsVar getText]];
      if (value != nil) {
        BOOL makeClone = YES;
        switch ([value getTermType]) {
          case ComIgormaznitsaProlDataTerm_TYPE_ATOM:
          case ComIgormaznitsaProlDataTerm_TYPE_OPERATOR:
          {
            [((ComIgormaznitsaProlDataVar *) check_class_cast(result, [ComIgormaznitsaProlDataVar class])) setThisValueWithComIgormaznitsaProlDataTerm:value];
            makeClone = NO;
          }
          break;
          case ComIgormaznitsaProlDataTerm_TYPE_STRUCT:
          {
            if ([((ComIgormaznitsaProlDataTermStruct *) check_class_cast(value, [ComIgormaznitsaProlDataTermStruct class])) getArity] == 0) {
              [((ComIgormaznitsaProlDataVar *) check_class_cast(result, [ComIgormaznitsaProlDataVar class])) setThisValueWithComIgormaznitsaProlDataTerm:value];
              makeClone = NO;
            }
          }
          break;
          case ComIgormaznitsaProlDataTerm_TYPE_LIST:
          {
            if ([((ComIgormaznitsaProlDataTermList *) check_class_cast(value, [ComIgormaznitsaProlDataTermList class])) isNullList]) {
              [((ComIgormaznitsaProlDataVar *) check_class_cast(result, [ComIgormaznitsaProlDataVar class])) setThisValueWithComIgormaznitsaProlDataTerm:[ComIgormaznitsaProlDataTermList NULLLIST]];
              makeClone = NO;
            }
          }
          break;
        }
        if (makeClone) {
          id<JavaUtilMap> varHashMap = [[JavaUtilHashMap alloc] init];
          (void) [varHashMap putWithId:[JavaLangInteger valueOfWithInt:[((ComIgormaznitsaProlDataVar *) check_class_cast(termToBeClone, [ComIgormaznitsaProlDataVar class])) getVarUID]] withId:(ComIgormaznitsaProlDataVar *) check_class_cast(result, [ComIgormaznitsaProlDataVar class])];
          [((ComIgormaznitsaProlDataVar *) check_class_cast(result, [ComIgormaznitsaProlDataVar class])) setThisValueWithComIgormaznitsaProlDataTerm:[value makeCloneWithJavaUtilMap:varHashMap]];
        }
      }
    }
    break;
    default:
    @throw [[ComIgormaznitsaProlExceptionsProlCriticalError alloc] initWithNSString:@"Attemption to clone a system non-clonable term"];
  }
  if (result == nil) {
    id<JavaUtilMap> varHashMap = [[JavaUtilHashMap alloc] init];
    result = [termToBeClone makeCloneWithJavaUtilMap:varHashMap];
  }
  return result;
}

- (ComIgormaznitsaProlDataTerm *)makeCloneWithJavaUtilMap:(id<JavaUtilMap>)variableSet {
  ComIgormaznitsaProlDataTerm *term = self;
  ComIgormaznitsaProlDataTerm *result = nil;
  switch ([term getTermType]) {
    case ComIgormaznitsaProlDataTerm_TYPE_OPERATOR:
    case ComIgormaznitsaProlDataTerm_TYPE_ATOM:
    {
      result = term;
    }
    break;
    case ComIgormaznitsaProlDataTerm_TYPE_LIST:
    {
      ComIgormaznitsaProlDataTermList *source = (ComIgormaznitsaProlDataTermList *) check_class_cast(term, [ComIgormaznitsaProlDataTermList class]);
      if (source == [ComIgormaznitsaProlDataTermList NULLLIST]) {
        result = source;
      }
      else {
        ComIgormaznitsaProlDataTerm *head = [((ComIgormaznitsaProlDataTerm *) nil_chk([source getHead])) makeCloneWithJavaUtilMap:variableSet];
        ComIgormaznitsaProlDataTerm *tail = [((ComIgormaznitsaProlDataTerm *) nil_chk([source getTail])) makeCloneWithJavaUtilMap:variableSet];
        result = [[ComIgormaznitsaProlDataTermList alloc] initWithComIgormaznitsaProlDataTerm:head withComIgormaznitsaProlDataTerm:tail];
      }
    }
    break;
    case ComIgormaznitsaProlDataTerm_TYPE_VAR:
    {
      ComIgormaznitsaProlDataVar *var = (ComIgormaznitsaProlDataVar *) check_class_cast(term, [ComIgormaznitsaProlDataVar class]);
      ComIgormaznitsaProlDataTerm *val = [var getThisValue];
      if (val == nil) {
        ComIgormaznitsaProlDataVar *newVar = nil;
        NSString *varName = [var getText];
        int varId = [var getVarUID];
        newVar = [((id<JavaUtilMap>) nil_chk(variableSet)) getWithId:[JavaLangInteger valueOfWithInt:varId]];
        if (newVar == nil) {
          newVar = [var isAnonymous] ? [[ComIgormaznitsaProlDataVar alloc] init] : [[ComIgormaznitsaProlDataVar alloc] initWithNSString:varName];
          (void) [variableSet putWithId:[JavaLangInteger valueOfWithInt:varId] withId:newVar];
          ComIgormaznitsaProlDataTerm *thisVal = [var getThisValue];
          if (thisVal != nil) {
            [newVar setThisValueWithComIgormaznitsaProlDataTerm:[thisVal makeCloneWithJavaUtilMap:variableSet]];
          }
        }
        result = newVar;
      }
      else {
        result = [val makeCloneWithJavaUtilMap:variableSet];
      }
    }
    break;
    case ComIgormaznitsaProlDataTerm_TYPE_STRUCT:
    {
      ComIgormaznitsaProlDataTermStruct *source = (ComIgormaznitsaProlDataTermStruct *) check_class_cast(term, [ComIgormaznitsaProlDataTermStruct class]);
      if ([source getArity] == 0) {
        result = term;
      }
      else {
        IOSObjectArray *elements = [source getElementsAsArray];
        IOSObjectArray *destElements = nil;
        int arity = (int) [((IOSObjectArray *) nil_chk(elements)) count];
        destElements = [IOSObjectArray arrayWithLength:arity type:[IOSClass classWithClass:[ComIgormaznitsaProlDataTerm class]]];
        for (int li = 0; li < arity; li++) {
          ComIgormaznitsaProlDataTerm *element = IOSObjectArray_Get(elements, li);
          (void) IOSObjectArray_Set(destElements, li, [((ComIgormaznitsaProlDataTerm *) nil_chk(element)) makeCloneWithJavaUtilMap:variableSet]);
        }
        result = [[ComIgormaznitsaProlDataTermStruct alloc] initWithComIgormaznitsaProlDataTerm:[source getFunctor] withComIgormaznitsaProlDataTermArray:destElements withComIgormaznitsaProlLibrariesPredicateProcessor:[source getPredicateProcessor]];
      }
    }
    break;
    default:
    @throw [[ComIgormaznitsaProlExceptionsProlCriticalError alloc] initWithNSString:@"Attemption to clone a system non-clonable term"];
  }
  ((ComIgormaznitsaProlDataTerm *) nil_chk(result))->carriedObject_ = self->carriedObject_;
  return result;
}

+ (void)initialize {
  if (self == [ComIgormaznitsaProlDataTerm class]) {
    ComIgormaznitsaProlDataTerm_TERM_TRUE_ = [[ComIgormaznitsaProlDataTerm alloc] initWithNSString:@"true"];
  }
}

- (void)copyAllFieldsTo:(ComIgormaznitsaProlDataTerm *)other {
  [super copyAllFieldsTo:other];
  other->carriedObject_ = carriedObject_;
  other->termText_ = termText_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getCarriedObject", NULL, "Ljava.io.Serializable;", 0x21, NULL },
    { "setCarriedObjectWithJavaIoSerializable:", "setCarriedObject", "V", 0x21, NULL },
    { "initWithNSString:", "Term", NULL, 0x1, NULL },
    { "getPriority", NULL, "I", 0x1, NULL },
    { "getText", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getTermType", NULL, "I", 0x1, NULL },
    { "equWithoutSetWithComIgormaznitsaProlDataTerm:", "equWithoutSet", "Z", 0x1, NULL },
    { "checkVariables", NULL, "Z", 0x1, NULL },
    { "fillVarablesWithJavaUtilMap:", "fillVarables", "V", 0x1, NULL },
    { "getSourceLikeRepresentation", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "getSignature", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "forWrite", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "EquWithComIgormaznitsaProlDataTerm:", "Equ", "Z", 0x1, NULL },
    { "asCharList", NULL, "Lcom.igormaznitsa.prol.data.TermList;", 0x1, NULL },
    { "asCharCodeList", NULL, "Lcom.igormaznitsa.prol.data.TermList;", 0x1, NULL },
    { "termComparsionWithComIgormaznitsaProlDataTerm:", "termComparsion", "I", 0x1, NULL },
    { "hasAnyDifferenceWithComIgormaznitsaProlDataTerm:", "hasAnyDifference", "Z", 0x1, NULL },
    { "getTextLength", NULL, "I", 0x1, NULL },
    { "hasVariableWithNameWithNSString:", "hasVariableWithName", "Z", 0x1, NULL },
    { "makeClone", NULL, "Lcom.igormaznitsa.prol.data.Term;", 0x1, NULL },
    { "makeCloneWithJavaUtilMap:", "makeClone", "Lcom.igormaznitsa.prol.data.Term;", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "termText_", NULL, 0x12, "Ljava.lang.String;" },
    { "TYPE_ATOM_", NULL, 0x19, "I" },
    { "TYPE_STRUCT_", NULL, 0x19, "I" },
    { "TYPE_VAR_", NULL, 0x19, "I" },
    { "TYPE_OPERATOR_", NULL, 0x19, "I" },
    { "TYPE_OPERATORS_", NULL, 0x19, "I" },
    { "TYPE_LIST_", NULL, 0x19, "I" },
    { "TERM_TRUE_", NULL, 0x19, "Lcom.igormaznitsa.prol.data.Term;" },
    { "carriedObject_", NULL, 0x4, "Ljava.io.Serializable;" },
  };
  static J2ObjcClassInfo _ComIgormaznitsaProlDataTerm = { "Term", "com.igormaznitsa.prol.data", NULL, 0x1, 24, methods, 9, fields, 0, NULL};
  return &_ComIgormaznitsaProlDataTerm;
}

@end
