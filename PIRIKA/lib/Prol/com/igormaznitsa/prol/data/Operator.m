//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/igormaznitsa/prol/data/Operator.java
//
//  Created by katsura on 14/04/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/igormaznitsa/prol/data/Operator.h"
#include "com/igormaznitsa/prol/data/Term.h"
#include "com/igormaznitsa/prol/data/TermStruct.h"
#include "com/igormaznitsa/prol/data/Var.h"
#include "com/igormaznitsa/prol/exceptions/ProlCriticalError.h"
#include "java/io/PrintWriter.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/NullPointerException.h"

@implementation ComIgormaznitsaProlDataOperator

+ (int)PRIORITY_MAX {
  return ComIgormaznitsaProlDataOperator_PRIORITY_MAX;
}

+ (int)PRIORITY_MIN {
  return ComIgormaznitsaProlDataOperator_PRIORITY_MIN;
}

+ (int)OPTYPE_XF {
  return ComIgormaznitsaProlDataOperator_OPTYPE_XF;
}

+ (int)OPTYPE_YF {
  return ComIgormaznitsaProlDataOperator_OPTYPE_YF;
}

+ (int)OPTYPE_FX {
  return ComIgormaznitsaProlDataOperator_OPTYPE_FX;
}

+ (int)OPTYPE_FY {
  return ComIgormaznitsaProlDataOperator_OPTYPE_FY;
}

+ (int)OPTYPE_XFX {
  return ComIgormaznitsaProlDataOperator_OPTYPE_XFX;
}

+ (int)OPTYPE_XFY {
  return ComIgormaznitsaProlDataOperator_OPTYPE_XFY;
}

+ (int)OPTYPE_YFX {
  return ComIgormaznitsaProlDataOperator_OPTYPE_YFX;
}

+ (IOSObjectArray *)makeOperatorsWithInt:(int)priority
                                 withInt:(int)type
                       withNSStringArray:(IOSObjectArray *)names {
  IOSObjectArray *result = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(names)) count] type:[IOSClass classWithClass:[ComIgormaznitsaProlDataOperator class]]];
  for (int li = 0; li < (int) [names count]; li++) {
    (void) IOSObjectArray_Set(result, li, [[ComIgormaznitsaProlDataOperator alloc] initWithInt:priority withInt:type withNSString:IOSObjectArray_Get(names, li)]);
  }
  return result;
}

- (id)initWithInt:(int)priority
          withInt:(int)type
     withNSString:(NSString *)name {
  if (self = [super initWithNSString:name]) {
    if (priority < ComIgormaznitsaProlDataOperator_PRIORITY_MAX || priority > ComIgormaznitsaProlDataOperator_PRIORITY_MIN) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Wrong priority value"];
    }
    switch (type) {
      case ComIgormaznitsaProlDataOperator_OPTYPE_FX:
      case ComIgormaznitsaProlDataOperator_OPTYPE_FY:
      case ComIgormaznitsaProlDataOperator_OPTYPE_XF:
      case ComIgormaznitsaProlDataOperator_OPTYPE_YF:
      {
        signature_ = [NSString stringWithFormat:@"%@/1", name];
      }
      break;
      case ComIgormaznitsaProlDataOperator_OPTYPE_YFX:
      case ComIgormaznitsaProlDataOperator_OPTYPE_XFY:
      case ComIgormaznitsaProlDataOperator_OPTYPE_XFX:
      {
        signature_ = [NSString stringWithFormat:@"%@/2", name];
      }
      break;
      default:
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Wrong operator type"];
    }
    opType_ = type;
    opPriority_ = priority;
    int hash_ = [((NSString *) nil_chk(name)) hash];
    hash_ = 89 * hash_ + self->opType_;
    hash_ = 89 * hash_ + self->opPriority_;
    precalculatedHashCode_ = hash_;
  }
  return self;
}

- (int)getTermType {
  return ComIgormaznitsaProlDataTerm_TYPE_OPERATOR;
}

- (int)getOperatorType {
  return opType_;
}

- (int)getPriority {
  return opPriority_;
}

- (BOOL)validateStructureForOperatorWithComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)struct_ {
  BOOL result = NO;
  if (struct_ != nil) {
    switch ([struct_ getArity]) {
      case 1:
      {
        switch (opType_) {
          case ComIgormaznitsaProlDataOperator_OPTYPE_XFY:
          case ComIgormaznitsaProlDataOperator_OPTYPE_XFX:
          case ComIgormaznitsaProlDataOperator_OPTYPE_YFX:
          {
            result = NO;
          }
          break;
          case ComIgormaznitsaProlDataOperator_OPTYPE_XF:
          case ComIgormaznitsaProlDataOperator_OPTYPE_FX:
          {
            ComIgormaznitsaProlDataTerm *atom = [struct_ getElementWithInt:0];
            if (atom == nil) {
              result = NO;
            }
            else {
              result = [atom getPriority] < [self getPriority];
            }
          }
          break;
          case ComIgormaznitsaProlDataOperator_OPTYPE_YF:
          case ComIgormaznitsaProlDataOperator_OPTYPE_FY:
          {
            ComIgormaznitsaProlDataTerm *atom = [struct_ getElementWithInt:0];
            if (atom == nil) {
              result = NO;
            }
            else {
              result = [atom getPriority] <= [self getPriority];
            }
          }
          break;
          default:
          @throw [[ComIgormaznitsaProlExceptionsProlCriticalError alloc] initWithNSString:@"Unknown type"];
        }
      }
      break;
      case 2:
      {
        switch (opType_) {
          case ComIgormaznitsaProlDataOperator_OPTYPE_XFY:
          case ComIgormaznitsaProlDataOperator_OPTYPE_XFX:
          case ComIgormaznitsaProlDataOperator_OPTYPE_YFX:
          {
            ComIgormaznitsaProlDataTerm *elementLeft = [struct_ getElementWithInt:0];
            ComIgormaznitsaProlDataTerm *elementRight = [struct_ getElementWithInt:1];
            if (elementLeft == nil || elementRight == nil) {
              result = NO;
            }
            else {
              switch (opType_) {
                case ComIgormaznitsaProlDataOperator_OPTYPE_XFX:
                {
                  result = [elementLeft getPriority] < [self getPriority] && [elementRight getPriority] < [self getPriority];
                }
                break;
                case ComIgormaznitsaProlDataOperator_OPTYPE_YFX:
                {
                  result = [elementLeft getPriority] <= [self getPriority] && [elementRight getPriority] < [self getPriority];
                }
                break;
                case ComIgormaznitsaProlDataOperator_OPTYPE_XFY:
                {
                  result = [elementLeft getPriority] < [self getPriority] && [elementRight getPriority] <= [self getPriority];
                }
                break;
                default:
                {
                  result = NO;
                }
                break;
              }
            }
          }
          break;
          case ComIgormaznitsaProlDataOperator_OPTYPE_XF:
          case ComIgormaznitsaProlDataOperator_OPTYPE_FX:
          {
            ComIgormaznitsaProlDataTerm *atom = [struct_ getElementWithInt:opType_ == ComIgormaznitsaProlDataOperator_OPTYPE_XF ? 0 : 1];
            if (atom == nil) {
              result = NO;
            }
            else {
              result = [atom getPriority] < [self getPriority];
            }
          }
          break;
          case ComIgormaznitsaProlDataOperator_OPTYPE_YF:
          case ComIgormaznitsaProlDataOperator_OPTYPE_FY:
          {
            ComIgormaznitsaProlDataTerm *atom = [struct_ getElementWithInt:opType_ == ComIgormaznitsaProlDataOperator_OPTYPE_YF ? 0 : 1];
            if (atom == nil) {
              result = NO;
            }
            else {
              result = [atom getPriority] <= [self getPriority];
            }
          }
          break;
          default:
          {
            @throw [[ComIgormaznitsaProlExceptionsProlCriticalError alloc] initWithNSString:@"Unknown type"];
          }
        }
      }
      break;
      default:
      {
        result = NO;
      }
    }
  }
  return result;
}

- (NSUInteger)hash {
  return precalculatedHashCode_;
}

- (BOOL)isEqual:(id)obj {
  if (obj == nil) {
    return NO;
  }
  if ([self getClass] != [nil_chk(obj) getClass]) {
    return NO;
  }
  ComIgormaznitsaProlDataOperator *other = (ComIgormaznitsaProlDataOperator *) check_class_cast(obj, [ComIgormaznitsaProlDataOperator class]);
  if (self->precalculatedHashCode_ != other->precalculatedHashCode_) {
    return NO;
  }
  if (self->opType_ != other->opType_) {
    return NO;
  }
  if (self->opPriority_ != other->opPriority_) {
    return NO;
  }
  return [((NSString *) nil_chk([self getText])) isEqual:[other getText]];
}

- (NSString *)getSourceLikeRepresentation {
  return [self getText];
}

- (NSString *)description {
  return [self getText];
}

- (NSString *)getTypeAsString {
  return [ComIgormaznitsaProlDataOperator getTypeFromIndexWithInt:opType_];
}

- (void)writeWithJavaIoPrintWriter:(JavaIoPrintWriter *)writer {
  if (writer == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"Writer is null"];
  }
  [((JavaIoPrintWriter *) nil_chk(writer)) printWithNSString:@":- op("];
  [writer printWithInt:opPriority_];
  [writer printWithChar:','];
  [writer printWithNSString:[self getTypeAsString]];
  [writer printWithNSString:@",'"];
  [writer printWithNSString:[self getText]];
  [writer printlnWithNSString:@"')."];
}

- (NSString *)getSignature {
  return signature_;
}

- (NSString *)forWrite {
  return [self getText];
}

- (BOOL)EquWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)atom {
  if (self == atom) {
    return YES;
  }
  switch ([((ComIgormaznitsaProlDataTerm *) nil_chk(atom)) getTermType]) {
    case ComIgormaznitsaProlDataTerm_TYPE_ATOM:
    {
      return [((NSString *) nil_chk([self getText])) isEqual:[atom getText]];
    }
    case ComIgormaznitsaProlDataTerm_TYPE_OPERATOR:
    {
      return self == atom;
    }
    case ComIgormaznitsaProlDataTerm_TYPE_VAR:
    {
      ComIgormaznitsaProlDataVar *var = (ComIgormaznitsaProlDataVar *) check_class_cast(atom, [ComIgormaznitsaProlDataVar class]);
      ComIgormaznitsaProlDataTerm *value = [var getValue];
      if (value == nil) {
        return [((ComIgormaznitsaProlDataVar *) check_class_cast(atom, [ComIgormaznitsaProlDataVar class])) setValueWithComIgormaznitsaProlDataTerm:self];
      }
      else {
        return [self EquWithComIgormaznitsaProlDataTerm:value];
      }
    }
  }
  return NO;
}

+ (NSString *)getTypeFromIndexWithInt:(int)index {
  switch (index) {
    case ComIgormaznitsaProlDataOperator_OPTYPE_FX:
    return @"fx";
    case ComIgormaznitsaProlDataOperator_OPTYPE_FY:
    return @"fy";
    case ComIgormaznitsaProlDataOperator_OPTYPE_XF:
    return @"xf";
    case ComIgormaznitsaProlDataOperator_OPTYPE_YF:
    return @"yf";
    case ComIgormaznitsaProlDataOperator_OPTYPE_XFX:
    return @"xfx";
    case ComIgormaznitsaProlDataOperator_OPTYPE_XFY:
    return @"xfy";
    case ComIgormaznitsaProlDataOperator_OPTYPE_YFX:
    return @"yfx";
    default:
    return @"<UNKNOWN>";
  }
}

+ (int)getTypeFromStringWithNSString:(NSString *)op_type {
  switch ([((NSString *) nil_chk(op_type)) length]) {
    case 2:
    {
      if ([@"xf" isEqual:op_type]) {
        return ComIgormaznitsaProlDataOperator_OPTYPE_XF;
      }
      if ([@"fx" isEqual:op_type]) {
        return ComIgormaznitsaProlDataOperator_OPTYPE_FX;
      }
      if ([@"fy" isEqual:op_type]) {
        return ComIgormaznitsaProlDataOperator_OPTYPE_FY;
      }
      if ([@"yf" isEqual:op_type]) {
        return ComIgormaznitsaProlDataOperator_OPTYPE_YF;
      }
      return -1;
    }
    case 3:
    {
      if ([@"xfx" isEqual:op_type]) {
        return ComIgormaznitsaProlDataOperator_OPTYPE_XFX;
      }
      if ([@"yfx" isEqual:op_type]) {
        return ComIgormaznitsaProlDataOperator_OPTYPE_YFX;
      }
      if ([@"xfy" isEqual:op_type]) {
        return ComIgormaznitsaProlDataOperator_OPTYPE_XFY;
      }
      return -1;
    }
    default:
    return -1;
  }
}

- (void)copyAllFieldsTo:(ComIgormaznitsaProlDataOperator *)other {
  [super copyAllFieldsTo:other];
  other->opPriority_ = opPriority_;
  other->opType_ = opType_;
  other->precalculatedHashCode_ = precalculatedHashCode_;
  other->signature_ = signature_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "makeOperatorsWithInt:withInt:withNSStringArray:", "makeOperators", "[Lcom.igormaznitsa.prol.data.Operator;", 0x9, NULL },
    { "initWithInt:withInt:withNSString:", "Operator", NULL, 0x1, NULL },
    { "getTermType", NULL, "I", 0x1, NULL },
    { "getOperatorType", NULL, "I", 0x1, NULL },
    { "getPriority", NULL, "I", 0x1, NULL },
    { "validateStructureForOperatorWithComIgormaznitsaProlDataTermStruct:", "validateStructureForOperator", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "getSourceLikeRepresentation", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "getTypeAsString", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "writeWithJavaIoPrintWriter:", "write", "V", 0x1, NULL },
    { "getSignature", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "forWrite", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "EquWithComIgormaznitsaProlDataTerm:", "Equ", "Z", 0x1, NULL },
    { "getTypeFromIndexWithInt:", "getTypeFromIndex", "Ljava.lang.String;", 0x19, NULL },
    { "getTypeFromStringWithNSString:", "getTypeFromString", "I", 0x19, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "PRIORITY_MAX_", NULL, 0x19, "I" },
    { "PRIORITY_MIN_", NULL, 0x19, "I" },
    { "OPTYPE_XF_", NULL, 0x19, "I" },
    { "OPTYPE_YF_", NULL, 0x19, "I" },
    { "OPTYPE_FX_", NULL, 0x19, "I" },
    { "OPTYPE_FY_", NULL, 0x19, "I" },
    { "OPTYPE_XFX_", NULL, 0x19, "I" },
    { "OPTYPE_XFY_", NULL, 0x19, "I" },
    { "OPTYPE_YFX_", NULL, 0x19, "I" },
    { "opType_", NULL, 0x12, "I" },
    { "opPriority_", NULL, 0x12, "I" },
    { "precalculatedHashCode_", NULL, 0x12, "I" },
    { "signature_", NULL, 0x12, "Ljava.lang.String;" },
  };
  static J2ObjcClassInfo _ComIgormaznitsaProlDataOperator = { "Operator", "com.igormaznitsa.prol.data", NULL, 0x11, 17, methods, 13, fields, 0, NULL};
  return &_ComIgormaznitsaProlDataOperator;
}

@end
