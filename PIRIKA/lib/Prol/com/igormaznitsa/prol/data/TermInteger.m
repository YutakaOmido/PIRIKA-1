//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/igormaznitsa/prol/data/TermInteger.java
//
//  Created by katsura on 14/04/13.
//

#include "IOSClass.h"
#include "com/igormaznitsa/prol/data/NumericTerm.h"
#include "com/igormaznitsa/prol/data/Term.h"
#include "com/igormaznitsa/prol/data/TermFloat.h"
#include "com/igormaznitsa/prol/data/TermInteger.h"
#include "com/igormaznitsa/prol/data/Var.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"

@implementation ComIgormaznitsaProlDataTermInteger

- (id)initWithNSString:(NSString *)name {
  if (self = [super initWithNSString:name]) {
    intValue_ = [JavaLangInteger parseIntWithNSString:name];
  }
  return self;
}

- (id)initWithInt:(int)value {
  if (self = [super initWithNSString:@""]) {
    intValue_ = value;
  }
  return self;
}

- (NSString *)description {
  NSString *val = [self getText];
  if ([((NSString *) nil_chk(val)) isEmpty]) {
    return [JavaLangInteger toStringWithInt:intValue_];
  }
  else {
    return val;
  }
}

- (NSString *)forWrite {
  return [((NSString *) nil_chk([self getText])) isEmpty] ? [JavaLangInteger toStringWithInt:intValue_] : [self getText];
}

- (NSUInteger)hash {
  return intValue_;
}

- (BOOL)isEqual:(id)obj {
  if (obj == nil) {
    return NO;
  }
  if ([nil_chk(obj) getClass] == [IOSClass classWithClass:[ComIgormaznitsaProlDataTermInteger class]]) {
    return ((ComIgormaznitsaProlDataTermInteger *) check_class_cast(obj, [ComIgormaznitsaProlDataTermInteger class]))->intValue_ == intValue_;
  }
  return [super isEqual:obj];
}

- (BOOL)equWithoutSetWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)atom {
  if (self == atom) {
    return YES;
  }
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(atom)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_VAR) {
    atom = [((ComIgormaznitsaProlDataVar *) check_class_cast(atom, [ComIgormaznitsaProlDataVar class])) getValue];
  }
  if (atom == nil) {
    return YES;
  }
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(atom)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_ATOM) {
    if ([atom conformsToProtocol: @protocol(ComIgormaznitsaProlDataNumericTerm)]) {
      return [self compareWithComIgormaznitsaProlDataNumericTerm:(id<ComIgormaznitsaProlDataNumericTerm>) check_protocol_cast(atom, @protocol(ComIgormaznitsaProlDataNumericTerm))] == 0;
    }
  }
  return NO;
}

- (BOOL)EquWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)atom {
  if (self == atom) {
    return YES;
  }
  switch ([((ComIgormaznitsaProlDataTerm *) nil_chk(atom)) getTermType]) {
    case ComIgormaznitsaProlDataTerm_TYPE_ATOM:
    {
      if ([atom conformsToProtocol: @protocol(ComIgormaznitsaProlDataNumericTerm)]) {
        return [self compareWithComIgormaznitsaProlDataNumericTerm:(id<ComIgormaznitsaProlDataNumericTerm>) check_protocol_cast(atom, @protocol(ComIgormaznitsaProlDataNumericTerm))] == 0;
      }
      else {
        return [((NSString *) nil_chk([self getText])) isEqual:[atom getText]];
      }
    }
    case ComIgormaznitsaProlDataTerm_TYPE_VAR:
    {
      ComIgormaznitsaProlDataVar *var = (ComIgormaznitsaProlDataVar *) check_class_cast(atom, [ComIgormaznitsaProlDataVar class]);
      ComIgormaznitsaProlDataTerm *value = [var getValue];
      if (value == nil) {
        return [((ComIgormaznitsaProlDataVar *) check_class_cast(atom, [ComIgormaznitsaProlDataVar class])) setValueWithComIgormaznitsaProlDataTerm:self];
      }
      else {
        return [self EquWithComIgormaznitsaProlDataTerm:value];
      }
    }
  }
  return NO;
}

- (int)getValue {
  return intValue_;
}

- (NSNumber *)getNumericValue {
  return [JavaLangInteger valueOfWithInt:intValue_];
}

- (NSString *)getSourceLikeRepresentation {
  NSString *strValue = [JavaLangInteger toStringWithInt:intValue_];
  return strValue;
}

- (NSString *)getText {
  NSString *value = [super getText];
  if (value == nil) {
    return [JavaLangInteger toStringWithInt:intValue_];
  }
  else {
    return value;
  }
}

- (int)compareWithComIgormaznitsaProlDataNumericTerm:(id<ComIgormaznitsaProlDataNumericTerm>)atom {
  if ([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(atom)) getNumberType] == ComIgormaznitsaProlDataNumericTerm_NUMBER_FLOAT) {
    float value = [((NSNumber *) nil_chk([atom getNumericValue])) floatValue];
    return [JavaLangFloat compareWithFloat:(float) intValue_ withFloat:value];
  }
  int value = [((NSNumber *) nil_chk([atom getNumericValue])) intValue];
  if (intValue_ == value) {
    return 0;
  }
  if (intValue_ < value) {
    return -1;
  }
  return 1;
}

- (id<ComIgormaznitsaProlDataNumericTerm>)addWithComIgormaznitsaProlDataNumericTerm:(id<ComIgormaznitsaProlDataNumericTerm>)atom {
  if ([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(atom)) getNumberType] == ComIgormaznitsaProlDataNumericTerm_NUMBER_FLOAT) {
    float value = [((NSNumber *) nil_chk([atom getNumericValue])) floatValue];
    return [[ComIgormaznitsaProlDataTermFloat alloc] initWithFloat:(float) intValue_ + value];
  }
  else {
    int value = [((NSNumber *) nil_chk([atom getNumericValue])) intValue];
    return [[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:intValue_ + value];
  }
}

- (id<ComIgormaznitsaProlDataNumericTerm>)subWithComIgormaznitsaProlDataNumericTerm:(id<ComIgormaznitsaProlDataNumericTerm>)atom {
  if ([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(atom)) getNumberType] == ComIgormaznitsaProlDataNumericTerm_NUMBER_FLOAT) {
    float value = [((NSNumber *) nil_chk([atom getNumericValue])) floatValue];
    return [[ComIgormaznitsaProlDataTermFloat alloc] initWithFloat:(float) intValue_ - value];
  }
  else {
    int value = [((NSNumber *) nil_chk([atom getNumericValue])) intValue];
    return [[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:intValue_ - value];
  }
}

- (id<ComIgormaznitsaProlDataNumericTerm>)divWithComIgormaznitsaProlDataNumericTerm:(id<ComIgormaznitsaProlDataNumericTerm>)atom {
  if ([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(atom)) getNumberType] == ComIgormaznitsaProlDataNumericTerm_NUMBER_FLOAT) {
    float value = [((NSNumber *) nil_chk([atom getNumericValue])) floatValue];
    return [[ComIgormaznitsaProlDataTermFloat alloc] initWithFloat:(float) intValue_ / value];
  }
  else {
    int value = [((NSNumber *) nil_chk([atom getNumericValue])) intValue];
    return [[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:intValue_ / value];
  }
}

- (id<ComIgormaznitsaProlDataNumericTerm>)mulWithComIgormaznitsaProlDataNumericTerm:(id<ComIgormaznitsaProlDataNumericTerm>)atom {
  if ([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(atom)) getNumberType] == ComIgormaznitsaProlDataNumericTerm_NUMBER_FLOAT) {
    float value = [((NSNumber *) nil_chk([atom getNumericValue])) floatValue];
    return [[ComIgormaznitsaProlDataTermFloat alloc] initWithFloat:(float) intValue_ * value];
  }
  else {
    int value = [((NSNumber *) nil_chk([atom getNumericValue])) intValue];
    return [[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:intValue_ * value];
  }
}

- (id<ComIgormaznitsaProlDataNumericTerm>)neg {
  return [[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:-intValue_];
}

- (int)getNumberType {
  return ComIgormaznitsaProlDataNumericTerm_NUMBER_INTEGER;
}

- (int)termComparsionWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)atom {
  if (self == atom) {
    return 0;
  }
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(atom)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_VAR && ![((ComIgormaznitsaProlDataVar *) check_class_cast(atom, [ComIgormaznitsaProlDataVar class])) isUndefined]) {
    atom = [((ComIgormaznitsaProlDataVar *) check_class_cast(atom, [ComIgormaznitsaProlDataVar class])) getValue];
  }
  switch ([((ComIgormaznitsaProlDataTerm *) nil_chk(atom)) getTermType]) {
    case ComIgormaznitsaProlDataTerm_TYPE_VAR:
    return 1;
    case ComIgormaznitsaProlDataTerm_TYPE_ATOM:
    {
      if ([atom conformsToProtocol: @protocol(ComIgormaznitsaProlDataNumericTerm)]) {
        int value = 0;
        if ([atom isKindOfClass:[ComIgormaznitsaProlDataTermFloat class]]) {
          value = [JavaLangMath roundWithFloat:[((NSNumber *) nil_chk([((ComIgormaznitsaProlDataTermFloat *) check_class_cast(atom, [ComIgormaznitsaProlDataTermFloat class])) getNumericValue])) floatValue]];
        }
        else {
          value = [((NSNumber *) nil_chk([((id<ComIgormaznitsaProlDataNumericTerm>) check_protocol_cast(atom, @protocol(ComIgormaznitsaProlDataNumericTerm))) getNumericValue])) intValue];
        }
        if (intValue_ < value) {
          return -1;
        }
        if (intValue_ > value) {
          return 1;
        }
        return 0;
      }
      else {
        return -1;
      }
    }
    default:
    return -1;
  }
}

- (BOOL)hasAnyDifferenceWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)atom {
  if (!([atom isKindOfClass:[ComIgormaznitsaProlDataTermInteger class]])) {
    return YES;
  }
  ComIgormaznitsaProlDataTermInteger *thatInt = (ComIgormaznitsaProlDataTermInteger *) check_class_cast(atom, [ComIgormaznitsaProlDataTermInteger class]);
  return intValue_ != ((ComIgormaznitsaProlDataTermInteger *) nil_chk(thatInt))->intValue_;
}

- (id<ComIgormaznitsaProlDataNumericTerm>)abs {
  if (intValue_ >= 0) {
    return self;
  }
  return [[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:[JavaLangMath absWithInt:intValue_]];
}

- (id<ComIgormaznitsaProlDataNumericTerm>)sign {
  int sign = 0;
  if (intValue_ < 0) {
    sign = -1;
  }
  else if (intValue_ > 0) {
    sign = 1;
  }
  return [[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:sign];
}

- (void)copyAllFieldsTo:(ComIgormaznitsaProlDataTermInteger *)other {
  [super copyAllFieldsTo:other];
  other->intValue_ = intValue_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "TermInteger", NULL, 0x1, NULL },
    { "initWithInt:", "TermInteger", NULL, 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "forWrite", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "equWithoutSetWithComIgormaznitsaProlDataTerm:", "equWithoutSet", "Z", 0x1, NULL },
    { "EquWithComIgormaznitsaProlDataTerm:", "Equ", "Z", 0x1, NULL },
    { "getValue", NULL, "I", 0x1, NULL },
    { "getNumericValue", NULL, "Ljava.lang.Number;", 0x1, NULL },
    { "getSourceLikeRepresentation", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getText", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "compareWithComIgormaznitsaProlDataNumericTerm:", "compare", "I", 0x1, NULL },
    { "addWithComIgormaznitsaProlDataNumericTerm:", "add", "Lcom.igormaznitsa.prol.data.NumericTerm;", 0x1, NULL },
    { "subWithComIgormaznitsaProlDataNumericTerm:", "sub", "Lcom.igormaznitsa.prol.data.NumericTerm;", 0x1, NULL },
    { "divWithComIgormaznitsaProlDataNumericTerm:", "div", "Lcom.igormaznitsa.prol.data.NumericTerm;", 0x1, NULL },
    { "mulWithComIgormaznitsaProlDataNumericTerm:", "mul", "Lcom.igormaznitsa.prol.data.NumericTerm;", 0x1, NULL },
    { "neg", NULL, "Lcom.igormaznitsa.prol.data.NumericTerm;", 0x1, NULL },
    { "getNumberType", NULL, "I", 0x1, NULL },
    { "termComparsionWithComIgormaznitsaProlDataTerm:", "termComparsion", "I", 0x1, NULL },
    { "hasAnyDifferenceWithComIgormaznitsaProlDataTerm:", "hasAnyDifference", "Z", 0x1, NULL },
    { "abs", NULL, "Lcom.igormaznitsa.prol.data.NumericTerm;", 0x1, NULL },
    { "sign", NULL, "Lcom.igormaznitsa.prol.data.NumericTerm;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "intValue_", NULL, 0x12, "I" },
  };
  static J2ObjcClassInfo _ComIgormaznitsaProlDataTermInteger = { "TermInteger", "com.igormaznitsa.prol.data", NULL, 0x11, 23, methods, 1, fields, 0, NULL};
  return &_ComIgormaznitsaProlDataTermInteger;
}

@end
