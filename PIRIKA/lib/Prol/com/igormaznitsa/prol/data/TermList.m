//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/igormaznitsa/prol/data/TermList.java
//
//  Created by katsura on 14/04/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/igormaznitsa/prol/data/Term.h"
#include "com/igormaznitsa/prol/data/TermList.h"
#include "com/igormaznitsa/prol/data/Var.h"
#include "com/igormaznitsa/prol/exceptions/ProlCriticalError.h"
#include "java/io/PrintStream.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/Map.h"

@implementation ComIgormaznitsaProlDataTermList

static NSString * ComIgormaznitsaProlDataTermList_LIST_FUNCTOR_ = @".";
static ComIgormaznitsaProlDataTerm * ComIgormaznitsaProlDataTermList_LIST_FUNCTOR_AS_TERM_;
static ComIgormaznitsaProlDataTermList * ComIgormaznitsaProlDataTermList_NULLLIST_;

+ (NSString *)LIST_FUNCTOR {
  return ComIgormaznitsaProlDataTermList_LIST_FUNCTOR_;
}

+ (ComIgormaznitsaProlDataTerm *)LIST_FUNCTOR_AS_TERM {
  return ComIgormaznitsaProlDataTermList_LIST_FUNCTOR_AS_TERM_;
}

+ (ComIgormaznitsaProlDataTermList *)NULLLIST {
  return ComIgormaznitsaProlDataTermList_NULLLIST_;
}

+ (int)INDEX_HEAD {
  return ComIgormaznitsaProlDataTermList_INDEX_HEAD;
}

+ (int)INDEX_TAIL {
  return ComIgormaznitsaProlDataTermList_INDEX_TAIL;
}

- (id)init {
  return [super initWithNSString:ComIgormaznitsaProlDataTermList_LIST_FUNCTOR_ withComIgormaznitsaProlDataTermArray:nil];
}

- (id)initWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)term {
  return [super initWithNSString:ComIgormaznitsaProlDataTermList_LIST_FUNCTOR_ withComIgormaznitsaProlDataTermArray:[IOSObjectArray arrayWithObjects:(id[]){ term, ComIgormaznitsaProlDataTermList_NULLLIST_ } count:2 type:[IOSClass classWithClass:[ComIgormaznitsaProlDataTerm class]]]];
}

- (id)initWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)head
          withComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)tail {
  return [super initWithNSString:ComIgormaznitsaProlDataTermList_LIST_FUNCTOR_ withComIgormaznitsaProlDataTermArray:[IOSObjectArray arrayWithObjects:(id[]){ head, tail } count:2 type:[IOSClass classWithClass:[ComIgormaznitsaProlDataTerm class]]]];
}

- (ComIgormaznitsaProlDataTerm *)getHead {
  return IOSObjectArray_Get(nil_chk(terms_), ComIgormaznitsaProlDataTermList_INDEX_HEAD);
}

- (ComIgormaznitsaProlDataTerm *)getTail {
  ComIgormaznitsaProlDataTerm *tail = IOSObjectArray_Get(nil_chk(terms_), ComIgormaznitsaProlDataTermList_INDEX_TAIL);
  switch ([((ComIgormaznitsaProlDataTerm *) nil_chk(tail)) getTermType]) {
    case ComIgormaznitsaProlDataTerm_TYPE_LIST:
    return tail;
    case ComIgormaznitsaProlDataTerm_TYPE_VAR:
    {
      ComIgormaznitsaProlDataVar *var = (ComIgormaznitsaProlDataVar *) check_class_cast(tail, [ComIgormaznitsaProlDataVar class]);
      ComIgormaznitsaProlDataTerm *val = [var getValue];
      return val == nil ? var : val;
    }
    default:
    return tail;
  }
}

- (int)calculateLength {
  if (self == ComIgormaznitsaProlDataTermList_NULLLIST_) {
    return 0;
  }
  ComIgormaznitsaProlDataTerm *tail = IOSObjectArray_Get(nil_chk(terms_), ComIgormaznitsaProlDataTermList_INDEX_TAIL);
  switch ([((ComIgormaznitsaProlDataTerm *) nil_chk(tail)) getTermType]) {
    case ComIgormaznitsaProlDataTerm_TYPE_LIST:
    {
      return [((ComIgormaznitsaProlDataTermList *) check_class_cast(tail, [ComIgormaznitsaProlDataTermList class])) calculateLength] + 1;
    }
    default:
    return 2;
  }
}

- (void)setTailWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)newTail {
  (void) IOSObjectArray_Set(nil_chk(terms_), ComIgormaznitsaProlDataTermList_INDEX_TAIL, newTail);
  if (newTail == nil) {
    [((JavaIoPrintStream *) nil_chk([JavaLangSystem out])) printlnWithNSString:@"QQQ"];
  }
}

- (void)fillVarablesWithJavaUtilMap:(id<JavaUtilMap>)table {
  if ([self isNullList]) {
    return;
  }
  [((ComIgormaznitsaProlDataTerm *) IOSObjectArray_Get(nil_chk(terms_), ComIgormaznitsaProlDataTermList_INDEX_HEAD)) fillVarablesWithJavaUtilMap:table];
  [((ComIgormaznitsaProlDataTerm *) IOSObjectArray_Get(terms_, ComIgormaznitsaProlDataTermList_INDEX_TAIL)) fillVarablesWithJavaUtilMap:table];
}

- (BOOL)isNullList {
  return self == ComIgormaznitsaProlDataTermList_NULLLIST_;
}

+ (ComIgormaznitsaProlDataTermList *)appendItemWithComIgormaznitsaProlDataTermList:(ComIgormaznitsaProlDataTermList *)list
                                                   withComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)term {
  ComIgormaznitsaProlDataTermList *newList = [[ComIgormaznitsaProlDataTermList alloc] initWithComIgormaznitsaProlDataTerm:term];
  if (![((ComIgormaznitsaProlDataTermList *) nil_chk(list)) isNullList]) {
    [newList setTailWithComIgormaznitsaProlDataTerm:[list getTail]];
    [list setTailWithComIgormaznitsaProlDataTerm:newList];
  }
  return newList;
}

- (BOOL)checkVariables {
  if ([self isNullList]) {
    return YES;
  }
  ComIgormaznitsaProlDataTerm *lst = self;
  while (lst != ComIgormaznitsaProlDataTermList_NULLLIST_) {
    if ([lst getTermType] == ComIgormaznitsaProlDataTerm_TYPE_LIST) {
      ComIgormaznitsaProlDataTermList *tList = (ComIgormaznitsaProlDataTermList *) check_class_cast(lst, [ComIgormaznitsaProlDataTermList class]);
      if (![((ComIgormaznitsaProlDataTerm *) nil_chk([tList getHead])) checkVariables]) {
        return NO;
      }
      lst = [tList getTail];
    }
    else {
      if (![lst checkVariables]) {
        return NO;
      }
    }
  }
  return YES;
}

- (int)getTermType {
  return ComIgormaznitsaProlDataTerm_TYPE_LIST;
}

- (NSString *)description {
  if ([self isNullList]) {
    return @"[]";
  }
  JavaLangStringBuilder *builder = [[JavaLangStringBuilder alloc] initWithNSString:@"["];
  BOOL notfirst = NO;
  ComIgormaznitsaProlDataTerm *list = self;
  while (list != ComIgormaznitsaProlDataTermList_NULLLIST_) {
    if ([list getTermType] == ComIgormaznitsaProlDataTerm_TYPE_LIST) {
      if (notfirst) {
        (void) [builder appendWithChar:','];
      }
      ComIgormaznitsaProlDataTermList *asList = (ComIgormaznitsaProlDataTermList *) check_class_cast(list, [ComIgormaznitsaProlDataTermList class]);
      (void) [builder appendWithNSString:[((ComIgormaznitsaProlDataTerm *) nil_chk([asList getHead])) description]];
      list = [asList getTail];
    }
    else {
      if (notfirst) {
        (void) [builder appendWithChar:'|'];
      }
      (void) [builder appendWithNSString:[list description]];
      break;
    }
    notfirst = YES;
  }
  (void) [builder appendWithChar:']'];
  return [builder description];
}

- (NSString *)getSourceLikeRepresentation {
  if ([self isNullList]) {
    return @"[]";
  }
  JavaLangStringBuilder *builder = [[JavaLangStringBuilder alloc] initWithNSString:@"["];
  BOOL notfirst = NO;
  ComIgormaznitsaProlDataTerm *list = self;
  while (list != ComIgormaznitsaProlDataTermList_NULLLIST_) {
    if ([list getTermType] == ComIgormaznitsaProlDataTerm_TYPE_LIST) {
      if (notfirst) {
        (void) [builder appendWithChar:','];
      }
      ComIgormaznitsaProlDataTermList *asList = (ComIgormaznitsaProlDataTermList *) check_class_cast(list, [ComIgormaznitsaProlDataTermList class]);
      (void) [builder appendWithNSString:[ComIgormaznitsaProlDataTermList elementToSourceStringWithComIgormaznitsaProlDataTerm:[asList getHead]]];
      list = [asList getTail];
    }
    else {
      if (notfirst) {
        (void) [builder appendWithChar:'|'];
      }
      (void) [builder appendWithNSString:[ComIgormaznitsaProlDataTermList elementToSourceStringWithComIgormaznitsaProlDataTerm:list]];
      break;
    }
    notfirst = YES;
  }
  (void) [builder appendWithChar:']'];
  return [builder description];
}

+ (NSString *)elementToSourceStringWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)term {
  switch ([((ComIgormaznitsaProlDataTerm *) nil_chk(term)) getTermType]) {
    case ComIgormaznitsaProlDataTerm_TYPE_ATOM:
    {
      return [term getSourceLikeRepresentation];
    }
    default:
    return [term getSourceLikeRepresentation];
  }
}

- (void)replaceLastElementWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)newLastElement {
  if ([self isNullList]) {
    @throw [[ComIgormaznitsaProlExceptionsProlCriticalError alloc] initWithNSString:@"Attemption to change Null list"];
  }
  ComIgormaznitsaProlDataTermList *curList = self;
  while (YES) {
    ComIgormaznitsaProlDataTerm *tail = [curList getTail];
    if (tail == ComIgormaznitsaProlDataTermList_NULLLIST_ || [((ComIgormaznitsaProlDataTerm *) nil_chk(tail)) getTermType] != ComIgormaznitsaProlDataTerm_TYPE_LIST) {
      [curList setTailWithComIgormaznitsaProlDataTerm:newLastElement];
      break;
    }
    curList = (ComIgormaznitsaProlDataTermList *) check_class_cast(tail, [ComIgormaznitsaProlDataTermList class]);
  }
}

- (NSString *)getSignature {
  return [self getSourceLikeRepresentation];
}

- (NSString *)forWrite {
  if ([self isNullList]) {
    return @"[]";
  }
  JavaLangStringBuilder *builder = [[JavaLangStringBuilder alloc] initWithNSString:@"["];
  BOOL notfirst = NO;
  ComIgormaznitsaProlDataTerm *list = self;
  while (list != ComIgormaznitsaProlDataTermList_NULLLIST_) {
    if ([list getTermType] == ComIgormaznitsaProlDataTerm_TYPE_LIST) {
      if (notfirst) {
        (void) [builder appendWithChar:','];
      }
      ComIgormaznitsaProlDataTermList *asList = (ComIgormaznitsaProlDataTermList *) check_class_cast(list, [ComIgormaznitsaProlDataTermList class]);
      (void) [builder appendWithNSString:[((ComIgormaznitsaProlDataTerm *) nil_chk([asList getHead])) forWrite]];
      list = [asList getTail];
    }
    else {
      if (notfirst) {
        (void) [builder appendWithChar:'|'];
      }
      (void) [builder appendWithNSString:[list forWrite]];
      break;
    }
    notfirst = YES;
  }
  (void) [builder appendWithChar:']'];
  return [builder description];
}

- (BOOL)EquWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)atom {
  if (self == atom) {
    return YES;
  }
  switch ([((ComIgormaznitsaProlDataTerm *) nil_chk(atom)) getTermType]) {
    case ComIgormaznitsaProlDataTerm_TYPE_LIST:
    {
      ComIgormaznitsaProlDataTermList *thatList = (ComIgormaznitsaProlDataTermList *) check_class_cast(atom, [ComIgormaznitsaProlDataTermList class]);
      if ([self isNullList]) {
        return [thatList isNullList];
      }
      else if ([thatList isNullList]) {
        return [self isNullList];
      }
      return [((ComIgormaznitsaProlDataTerm *) nil_chk([self getHead])) EquWithComIgormaznitsaProlDataTerm:[thatList getHead]] && [((ComIgormaznitsaProlDataTerm *) nil_chk([self getTail])) EquWithComIgormaznitsaProlDataTerm:[thatList getTail]];
    }
    case ComIgormaznitsaProlDataTerm_TYPE_VAR:
    {
      ComIgormaznitsaProlDataVar *var = (ComIgormaznitsaProlDataVar *) check_class_cast(atom, [ComIgormaznitsaProlDataVar class]);
      ComIgormaznitsaProlDataTerm *value = [var getValue];
      if (value == nil) {
        return [((ComIgormaznitsaProlDataVar *) check_class_cast(atom, [ComIgormaznitsaProlDataVar class])) setValueWithComIgormaznitsaProlDataTerm:self];
      }
      else {
        return [self EquWithComIgormaznitsaProlDataTerm:value];
      }
    }
  }
  return NO;
}

- (BOOL)equWithoutSetWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)atom {
  if (self == atom) {
    return YES;
  }
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(atom)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_VAR) {
    atom = [((ComIgormaznitsaProlDataVar *) check_class_cast(atom, [ComIgormaznitsaProlDataVar class])) getValue];
  }
  if (atom == nil) {
    return YES;
  }
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(atom)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_LIST) {
    if (self == atom) {
      return YES;
    }
    ComIgormaznitsaProlDataTermList *thisList = self;
    ComIgormaznitsaProlDataTermList *thatList = (ComIgormaznitsaProlDataTermList *) check_class_cast(atom, [ComIgormaznitsaProlDataTermList class]);
    if ([thisList isNullList]) {
      return [thatList isNullList];
    }
    else {
      if ([thatList isNullList]) {
        return NO;
      }
    }
    return [((ComIgormaznitsaProlDataTerm *) nil_chk([thisList getHead])) equWithoutSetWithComIgormaznitsaProlDataTerm:[thatList getHead]] && [((ComIgormaznitsaProlDataTerm *) nil_chk([thisList getTail])) equWithoutSetWithComIgormaznitsaProlDataTerm:[thatList getTail]];
  }
  return NO;
}

- (int)termComparsionWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)atom {
  if (self == atom) {
    return 0;
  }
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(atom)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_VAR && ![((ComIgormaznitsaProlDataVar *) check_class_cast(atom, [ComIgormaznitsaProlDataVar class])) isUndefined]) {
    atom = [((ComIgormaznitsaProlDataVar *) check_class_cast(atom, [ComIgormaznitsaProlDataVar class])) getValue];
  }
  switch ([((ComIgormaznitsaProlDataTerm *) nil_chk(atom)) getTermType]) {
    case ComIgormaznitsaProlDataTerm_TYPE_LIST:
    {
      ComIgormaznitsaProlDataTermList *thatList = (ComIgormaznitsaProlDataTermList *) check_class_cast(atom, [ComIgormaznitsaProlDataTermList class]);
      if ([self isNullList] && [thatList isNullList]) {
        return 0;
      }
      ComIgormaznitsaProlDataTermList *thisList = self;
      if ([thisList isNullList] && ![thatList isNullList]) {
        return -1;
      }
      if (![thisList isNullList] && [thatList isNullList]) {
        return 1;
      }
      ComIgormaznitsaProlDataTerm *thisHead = [thisList getHead];
      ComIgormaznitsaProlDataTerm *thatHead = [thatList getHead];
      int result = [((ComIgormaznitsaProlDataTerm *) nil_chk(thisHead)) termComparsionWithComIgormaznitsaProlDataTerm:thatHead];
      if (result != 0) {
        return result;
      }
      return [((ComIgormaznitsaProlDataTerm *) nil_chk([thisList getTail])) termComparsionWithComIgormaznitsaProlDataTerm:[thatList getTail]];
    }
    default:
    return 1;
  }
}

- (BOOL)hasAnyDifferenceWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)atom {
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(atom)) getTermType] != ComIgormaznitsaProlDataTerm_TYPE_LIST) {
    return YES;
  }
  ComIgormaznitsaProlDataTermList *thisList = self;
  ComIgormaznitsaProlDataTermList *thatList = (ComIgormaznitsaProlDataTermList *) check_class_cast(atom, [ComIgormaznitsaProlDataTermList class]);
  if (thisList == ComIgormaznitsaProlDataTermList_NULLLIST_) {
    if (thisList == thatList) {
      return NO;
    }
    else {
      return YES;
    }
  }
  else if (thatList == ComIgormaznitsaProlDataTermList_NULLLIST_) {
    return YES;
  }
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk([thisList getHead])) hasAnyDifferenceWithComIgormaznitsaProlDataTerm:[thatList getHead]]) {
    return YES;
  }
  return [((ComIgormaznitsaProlDataTerm *) nil_chk([thisList getTail])) hasAnyDifferenceWithComIgormaznitsaProlDataTerm:[thatList getTail]];
}

- (BOOL)hasVariableWithNameWithNSString:(NSString *)name {
  if (self == ComIgormaznitsaProlDataTermList_NULLLIST_) {
    return NO;
  }
  return [((ComIgormaznitsaProlDataTerm *) nil_chk([self getHead])) hasVariableWithNameWithNSString:name] || [((ComIgormaznitsaProlDataTerm *) nil_chk([self getTail])) hasVariableWithNameWithNSString:name];
}

+ (void)initialize {
  if (self == [ComIgormaznitsaProlDataTermList class]) {
    ComIgormaznitsaProlDataTermList_LIST_FUNCTOR_AS_TERM_ = [[ComIgormaznitsaProlDataTerm alloc] initWithNSString:ComIgormaznitsaProlDataTermList_LIST_FUNCTOR_];
    ComIgormaznitsaProlDataTermList_NULLLIST_ = [[ComIgormaznitsaProlDataTermList alloc] init];
  }
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", "TermList", NULL, 0x2, NULL },
    { "initWithComIgormaznitsaProlDataTerm:", "TermList", NULL, 0x1, NULL },
    { "initWithComIgormaznitsaProlDataTerm:withComIgormaznitsaProlDataTerm:", "TermList", NULL, 0x1, NULL },
    { "getHead", NULL, "Lcom.igormaznitsa.prol.data.Term;", 0x1, NULL },
    { "getTail", NULL, "Lcom.igormaznitsa.prol.data.Term;", 0x1, NULL },
    { "calculateLength", NULL, "I", 0x1, NULL },
    { "setTailWithComIgormaznitsaProlDataTerm:", "setTail", "V", 0x1, NULL },
    { "fillVarablesWithJavaUtilMap:", "fillVarables", "V", 0x1, NULL },
    { "isNullList", NULL, "Z", 0x1, NULL },
    { "appendItemWithComIgormaznitsaProlDataTermList:withComIgormaznitsaProlDataTerm:", "appendItem", "Lcom.igormaznitsa.prol.data.TermList;", 0x9, NULL },
    { "checkVariables", NULL, "Z", 0x1, NULL },
    { "getTermType", NULL, "I", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "getSourceLikeRepresentation", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "elementToSourceStringWithComIgormaznitsaProlDataTerm:", "elementToSourceString", "Ljava.lang.String;", 0x1a, NULL },
    { "replaceLastElementWithComIgormaznitsaProlDataTerm:", "replaceLastElement", "V", 0x11, NULL },
    { "getSignature", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "forWrite", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "EquWithComIgormaznitsaProlDataTerm:", "Equ", "Z", 0x1, NULL },
    { "equWithoutSetWithComIgormaznitsaProlDataTerm:", "equWithoutSet", "Z", 0x1, NULL },
    { "termComparsionWithComIgormaznitsaProlDataTerm:", "termComparsion", "I", 0x1, NULL },
    { "hasAnyDifferenceWithComIgormaznitsaProlDataTerm:", "hasAnyDifference", "Z", 0x1, NULL },
    { "hasVariableWithNameWithNSString:", "hasVariableWithName", "Z", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "LIST_FUNCTOR_", NULL, 0x19, "Ljava.lang.String;" },
    { "LIST_FUNCTOR_AS_TERM_", NULL, 0x19, "Lcom.igormaznitsa.prol.data.Term;" },
    { "NULLLIST_", NULL, 0x19, "Lcom.igormaznitsa.prol.data.TermList;" },
    { "INDEX_HEAD_", NULL, 0x1a, "I" },
    { "INDEX_TAIL_", NULL, 0x1a, "I" },
  };
  static J2ObjcClassInfo _ComIgormaznitsaProlDataTermList = { "TermList", "com.igormaznitsa.prol.data", NULL, 0x11, 23, methods, 5, fields, 0, NULL};
  return &_ComIgormaznitsaProlDataTermList;
}

@end
