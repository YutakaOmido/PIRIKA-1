//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/igormaznitsa/prol/data/TermStruct.java
//
//  Created by katsura on 14/04/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/igormaznitsa/prol/data/Operator.h"
#include "com/igormaznitsa/prol/data/Term.h"
#include "com/igormaznitsa/prol/data/TermStruct.h"
#include "com/igormaznitsa/prol/data/Var.h"
#include "com/igormaznitsa/prol/exceptions/ProlCriticalError.h"
#include "com/igormaznitsa/prol/libraries/PredicateProcessor.h"
#include "com/igormaznitsa/prol/utils/Utils.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/Map.h"

@implementation ComIgormaznitsaProlDataTermStruct

static IOSObjectArray * ComIgormaznitsaProlDataTermStruct_EMPTY_ARRAY_;

+ (IOSObjectArray *)EMPTY_ARRAY {
  return ComIgormaznitsaProlDataTermStruct_EMPTY_ARRAY_;
}

- (id)initWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)functor {
  return [self initComIgormaznitsaProlDataTermStructWithComIgormaznitsaProlDataTerm:functor withComIgormaznitsaProlDataTermArray:ComIgormaznitsaProlDataTermStruct_EMPTY_ARRAY_];
}

- (id)initWithNSString:(NSString *)functor
withComIgormaznitsaProlDataTermArray:(IOSObjectArray *)elements {
  if (self = [self initComIgormaznitsaProlDataTermStructWithComIgormaznitsaProlDataTerm:[[ComIgormaznitsaProlDataTerm alloc] initWithNSString:functor] withComIgormaznitsaProlDataTermArray:elements]) {
    if ([((NSString *) nil_chk(functor)) length] != 2) {
      rulefunctor_ = NO;
      rulefunctorset_ = YES;
    }
  }
  return self;
}

- (id)initComIgormaznitsaProlDataTermStructWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)functor
                                      withComIgormaznitsaProlDataTermArray:(IOSObjectArray *)elements {
  if (self = [super initWithNSString:[((ComIgormaznitsaProlDataTerm *) nil_chk(functor)) getText]]) {
    NSString *functorText = [functor getText];
    if ([((NSString *) nil_chk(functorText)) length] != 2) {
      rulefunctor_ = NO;
      rulefunctorset_ = YES;
    }
    self->functor_ = functor;
    self->terms_ = elements == nil ? ComIgormaznitsaProlDataTermStruct_EMPTY_ARRAY_ : elements;
  }
  return self;
}

- (id)initWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)functor
     withComIgormaznitsaProlDataTermArray:(IOSObjectArray *)elements {
  return [self initComIgormaznitsaProlDataTermStructWithComIgormaznitsaProlDataTerm:functor withComIgormaznitsaProlDataTermArray:elements];
}

- (BOOL)isFunctorLikeRuleDefinition {
  if (!rulefunctorset_) {
    rulefunctor_ = [@":-" isEqual:[((ComIgormaznitsaProlDataTerm *) nil_chk(functor_)) getText]];
    rulefunctorset_ = YES;
  }
  return rulefunctor_;
}

- (id)initWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)functor
     withComIgormaznitsaProlDataTermArray:(IOSObjectArray *)elements
withComIgormaznitsaProlLibrariesPredicateProcessor:(ComIgormaznitsaProlLibrariesPredicateProcessor *)processor {
  if (self = [self initComIgormaznitsaProlDataTermStructWithComIgormaznitsaProlDataTerm:functor withComIgormaznitsaProlDataTermArray:elements]) {
    predicateProcessor_ = processor;
  }
  return self;
}

- (ComIgormaznitsaProlDataTerm *)getFunctor {
  return functor_;
}

- (IOSObjectArray *)getElementsAsArray {
  return terms_;
}

- (void)setElementWithInt:(int)index
withComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)element {
  (void) IOSObjectArray_Set(nil_chk(terms_), index, element);
}

- (void)fillVarablesWithJavaUtilMap:(id<JavaUtilMap>)table {
  IOSObjectArray *arr = terms_;
  int len = (int) [((IOSObjectArray *) nil_chk(arr)) count];
  for (int li = 0; li < len; li++) {
    [((ComIgormaznitsaProlDataTerm *) IOSObjectArray_Get(arr, li)) fillVarablesWithJavaUtilMap:table];
  }
}

- (BOOL)hasNullElement {
  IOSObjectArray *arr = terms_;
  int len = (int) [((IOSObjectArray *) nil_chk(arr)) count];
  for (int li = 0; li < len; li++) {
    if (IOSObjectArray_Get(arr, li) == nil) {
      return NO;
    }
  }
  return YES;
}

- (ComIgormaznitsaProlDataTerm *)getElementWithInt:(int)index {
  return IOSObjectArray_Get(nil_chk(terms_), index);
}

- (int)getArity {
  return (int) [((IOSObjectArray *) nil_chk(terms_)) count];
}

- (int)getPriority {
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(functor_)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_OPERATOR) {
    return [functor_ getPriority];
  }
  else {
    return 0;
  }
}

- (NSString *)description {
  return [self getStringRepresentationWithBoolean:NO];
}

- (NSString *)getSourceLikeRepresentation {
  return [self getStringRepresentationWithBoolean:YES];
}

- (NSString *)getStringRepresentationWithBoolean:(BOOL)sourceLike {
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(functor_)) getTermType] != ComIgormaznitsaProlDataTerm_TYPE_OPERATOR) {
    JavaLangStringBuilder *buffer = [[JavaLangStringBuilder alloc] initWithNSString:[ComIgormaznitsaProlUtilsUtils encodeTextSourceLikeWithNSString:[self getText]]];
    if ([self getArity] != 0) {
      (void) [buffer appendWithChar:'('];
      for (int li = 0; li < [self getArity]; li++) {
        if (li > 0) {
          (void) [buffer appendWithChar:','];
        }
        (void) [buffer appendWithNSString:sourceLike ? [((ComIgormaznitsaProlDataTerm *) nil_chk([self getElementWithInt:li])) getSourceLikeRepresentation] : [((ComIgormaznitsaProlDataTerm *) nil_chk([self getElementWithInt:li])) description]];
      }
      (void) [buffer appendWithChar:')'];
    }
    return [buffer description];
  }
  else {
    NSString *opName = sourceLike ? [functor_ getSourceLikeRepresentation] : [functor_ description];
    JavaLangStringBuilder *builder = [[JavaLangStringBuilder alloc] init];
    ComIgormaznitsaProlDataOperator *OperatorFunctor = (ComIgormaznitsaProlDataOperator *) check_class_cast(functor_, [ComIgormaznitsaProlDataOperator class]);
    int priority = [OperatorFunctor getPriority];
    switch ([OperatorFunctor getOperatorType]) {
      case ComIgormaznitsaProlDataOperator_OPTYPE_FX:
      {
        (void) [builder appendWithNSString:opName];
        (void) [builder appendWithChar:' '];
        NSString *text = sourceLike ? [((ComIgormaznitsaProlDataTerm *) nil_chk([self getElementWithInt:0])) getSourceLikeRepresentation] : [((ComIgormaznitsaProlDataTerm *) nil_chk([self getElementWithInt:0])) description];
        if ([((ComIgormaznitsaProlDataTerm *) nil_chk([self getElementWithInt:0])) getPriority] >= priority) {
          (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([builder appendWithChar:'('])) appendWithNSString:text])) appendWithChar:')'];
        }
        else {
          (void) [builder appendWithNSString:text];
        }
      }
      break;
      case ComIgormaznitsaProlDataOperator_OPTYPE_FY:
      {
        (void) [builder appendWithNSString:opName];
        (void) [builder appendWithChar:' '];
        NSString *text = sourceLike ? [((ComIgormaznitsaProlDataTerm *) nil_chk([self getElementWithInt:0])) getSourceLikeRepresentation] : [((ComIgormaznitsaProlDataTerm *) nil_chk([self getElementWithInt:0])) description];
        if ([((ComIgormaznitsaProlDataTerm *) nil_chk([self getElementWithInt:0])) getPriority] > priority) {
          (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([builder appendWithChar:'('])) appendWithNSString:text])) appendWithChar:')'];
        }
        else {
          (void) [builder appendWithNSString:text];
        }
      }
      break;
      case ComIgormaznitsaProlDataOperator_OPTYPE_XF:
      {
        NSString *text = sourceLike ? [((ComIgormaznitsaProlDataTerm *) nil_chk([self getElementWithInt:0])) getSourceLikeRepresentation] : [((ComIgormaznitsaProlDataTerm *) nil_chk([self getElementWithInt:0])) description];
        if ([((ComIgormaznitsaProlDataTerm *) nil_chk([self getElementWithInt:0])) getPriority] >= priority) {
          (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([builder appendWithChar:'('])) appendWithNSString:text])) appendWithChar:')'];
        }
        else {
          (void) [builder appendWithNSString:text];
        }
        (void) [builder appendWithChar:' '];
        (void) [builder appendWithNSString:opName];
      }
      break;
      case ComIgormaznitsaProlDataOperator_OPTYPE_YF:
      {
        NSString *text = sourceLike ? [((ComIgormaznitsaProlDataTerm *) nil_chk([self getElementWithInt:0])) getSourceLikeRepresentation] : [((ComIgormaznitsaProlDataTerm *) nil_chk([self getElementWithInt:0])) description];
        if ([((ComIgormaznitsaProlDataTerm *) nil_chk([self getElementWithInt:0])) getPriority] > priority) {
          (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([builder appendWithChar:'('])) appendWithNSString:text])) appendWithChar:')'];
        }
        else {
          (void) [builder appendWithNSString:text];
        }
        (void) [builder appendWithChar:' '];
        (void) [builder appendWithNSString:opName];
      }
      break;
      case ComIgormaznitsaProlDataOperator_OPTYPE_XFX:
      {
        NSString *text = sourceLike ? [((ComIgormaznitsaProlDataTerm *) nil_chk([self getElementWithInt:0])) getSourceLikeRepresentation] : [((ComIgormaznitsaProlDataTerm *) nil_chk([self getElementWithInt:0])) description];
        NSString *text2 = sourceLike ? [((ComIgormaznitsaProlDataTerm *) nil_chk([self getElementWithInt:1])) getSourceLikeRepresentation] : [((ComIgormaznitsaProlDataTerm *) nil_chk([self getElementWithInt:1])) description];
        if ([((ComIgormaznitsaProlDataTerm *) nil_chk([self getElementWithInt:0])) getPriority] >= priority) {
          (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([builder appendWithChar:'('])) appendWithNSString:text])) appendWithChar:')'];
        }
        else {
          (void) [builder appendWithNSString:text];
        }
        (void) [builder appendWithChar:' '];
        (void) [builder appendWithNSString:opName];
        (void) [builder appendWithChar:' '];
        if ([((ComIgormaznitsaProlDataTerm *) nil_chk([self getElementWithInt:1])) getPriority] >= priority) {
          (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([builder appendWithChar:'('])) appendWithNSString:text2])) appendWithChar:')'];
        }
        else {
          (void) [builder appendWithNSString:text2];
        }
      }
      break;
      case ComIgormaznitsaProlDataOperator_OPTYPE_YFX:
      {
        NSString *text = sourceLike ? [((ComIgormaznitsaProlDataTerm *) nil_chk([self getElementWithInt:0])) getSourceLikeRepresentation] : [((ComIgormaznitsaProlDataTerm *) nil_chk([self getElementWithInt:0])) description];
        NSString *text2 = sourceLike ? [((ComIgormaznitsaProlDataTerm *) nil_chk([self getElementWithInt:1])) getSourceLikeRepresentation] : [((ComIgormaznitsaProlDataTerm *) nil_chk([self getElementWithInt:1])) description];
        if ([((ComIgormaznitsaProlDataTerm *) nil_chk([self getElementWithInt:0])) getPriority] > priority) {
          (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([builder appendWithChar:'('])) appendWithNSString:text])) appendWithChar:')'];
        }
        else {
          (void) [builder appendWithNSString:text];
        }
        (void) [builder appendWithChar:' '];
        (void) [builder appendWithNSString:opName];
        (void) [builder appendWithChar:' '];
        if ([((ComIgormaznitsaProlDataTerm *) nil_chk([self getElementWithInt:1])) getPriority] >= priority) {
          (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([builder appendWithChar:'('])) appendWithNSString:text2])) appendWithChar:')'];
        }
        else {
          (void) [builder appendWithNSString:text2];
        }
      }
      break;
      case ComIgormaznitsaProlDataOperator_OPTYPE_XFY:
      {
        NSString *text = sourceLike ? [((ComIgormaznitsaProlDataTerm *) nil_chk([self getElementWithInt:0])) getSourceLikeRepresentation] : [((ComIgormaznitsaProlDataTerm *) nil_chk([self getElementWithInt:0])) description];
        NSString *text2 = sourceLike ? [((ComIgormaznitsaProlDataTerm *) nil_chk([self getElementWithInt:1])) getSourceLikeRepresentation] : [((ComIgormaznitsaProlDataTerm *) nil_chk([self getElementWithInt:1])) description];
        if ([((ComIgormaznitsaProlDataTerm *) nil_chk([self getElementWithInt:0])) getPriority] >= priority) {
          (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([builder appendWithChar:'('])) appendWithNSString:text])) appendWithChar:')'];
        }
        else {
          (void) [builder appendWithNSString:text];
        }
        (void) [builder appendWithChar:' '];
        (void) [builder appendWithNSString:opName];
        (void) [builder appendWithChar:' '];
        if ([((ComIgormaznitsaProlDataTerm *) nil_chk([self getElementWithInt:1])) getPriority] > priority) {
          (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([builder appendWithChar:'('])) appendWithNSString:text2])) appendWithChar:')'];
        }
        else {
          (void) [builder appendWithNSString:text2];
        }
      }
      break;
      default:
      @throw [[ComIgormaznitsaProlExceptionsProlCriticalError alloc] initWithNSString:@"Unsupported type"];
    }
    return [builder description];
  }
}

- (NSString *)forWrite {
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(functor_)) getTermType] != ComIgormaznitsaProlDataTerm_TYPE_OPERATOR) {
    JavaLangStringBuilder *buffer = [[JavaLangStringBuilder alloc] initWithNSString:[functor_ forWrite]];
    if ([self getArity] > 0) {
      (void) [buffer appendWithChar:'('];
      for (int li = 0; li < [self getArity]; li++) {
        if (li > 0) {
          (void) [buffer appendWithChar:','];
        }
        (void) [buffer appendWithNSString:[((ComIgormaznitsaProlDataTerm *) nil_chk([self getElementWithInt:li])) forWrite]];
      }
      (void) [buffer appendWithChar:')'];
    }
    return [buffer description];
  }
  else {
    NSString *opName = [functor_ forWrite];
    JavaLangStringBuilder *builder = [[JavaLangStringBuilder alloc] init];
    ComIgormaznitsaProlDataOperator *OperatorFunctor = (ComIgormaznitsaProlDataOperator *) check_class_cast(functor_, [ComIgormaznitsaProlDataOperator class]);
    switch ([OperatorFunctor getOperatorType]) {
      case ComIgormaznitsaProlDataOperator_OPTYPE_FX:
      case ComIgormaznitsaProlDataOperator_OPTYPE_FY:
      {
        (void) [builder appendWithNSString:opName];
        (void) [builder appendWithChar:' '];
        (void) [builder appendWithNSString:[((ComIgormaznitsaProlDataTerm *) nil_chk([self getElementWithInt:0])) forWrite]];
      }
      break;
      case ComIgormaznitsaProlDataOperator_OPTYPE_XF:
      case ComIgormaznitsaProlDataOperator_OPTYPE_YF:
      {
        (void) [builder appendWithNSString:[((ComIgormaznitsaProlDataTerm *) nil_chk([self getElementWithInt:0])) forWrite]];
        (void) [builder appendWithChar:' '];
        (void) [builder appendWithNSString:opName];
      }
      break;
      case ComIgormaznitsaProlDataOperator_OPTYPE_XFX:
      case ComIgormaznitsaProlDataOperator_OPTYPE_YFX:
      case ComIgormaznitsaProlDataOperator_OPTYPE_XFY:
      {
        (void) [builder appendWithNSString:[((ComIgormaznitsaProlDataTerm *) nil_chk([self getElementWithInt:0])) forWrite]];
        (void) [builder appendWithChar:' '];
        (void) [builder appendWithNSString:opName];
        (void) [builder appendWithChar:' '];
        (void) [builder appendWithNSString:[((ComIgormaznitsaProlDataTerm *) nil_chk([self getElementWithInt:1])) forWrite]];
      }
      break;
      default:
      @throw [[ComIgormaznitsaProlExceptionsProlCriticalError alloc] initWithNSString:@"Unsupported type"];
    }
    return [builder description];
  }
}

- (ComIgormaznitsaProlLibrariesPredicateProcessor *)getPredicateProcessor {
  return predicateProcessor_;
}

- (void)setPredicateProcessorWithComIgormaznitsaProlLibrariesPredicateProcessor:(ComIgormaznitsaProlLibrariesPredicateProcessor *)processor {
  predicateProcessor_ = processor;
}

- (BOOL)checkVariables {
  int arity = (int) [((IOSObjectArray *) nil_chk(terms_)) count];
  for (int li = 0; li < arity; li++) {
    if (![((ComIgormaznitsaProlDataTerm *) IOSObjectArray_Get(terms_, li)) checkVariables]) {
      return NO;
    }
  }
  return YES;
}

- (int)getTermType {
  return ComIgormaznitsaProlDataTerm_TYPE_STRUCT;
}

- (NSString *)getSignature {
  if (structureSignature_ == nil) {
    structureSignature_ = [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) [[JavaLangStringBuilder alloc] initWithNSString:[((ComIgormaznitsaProlDataTerm *) nil_chk(functor_)) getText]]) appendWithChar:'/'])) appendWithInt:[self getArity]])) description];
  }
  return structureSignature_;
}

- (BOOL)EquWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)atom {
  if (self == atom) {
    return YES;
  }
  switch ([((ComIgormaznitsaProlDataTerm *) nil_chk(atom)) getTermType]) {
    case ComIgormaznitsaProlDataTerm_TYPE_STRUCT:
    {
      ComIgormaznitsaProlDataTermStruct *thisStruct = self;
      ComIgormaznitsaProlDataTermStruct *thatStruct = (ComIgormaznitsaProlDataTermStruct *) check_class_cast(atom, [ComIgormaznitsaProlDataTermStruct class]);
      int arity = [thisStruct getArity];
      if (arity == [thatStruct getArity] && [((ComIgormaznitsaProlDataTerm *) nil_chk([thisStruct getFunctor])) EquWithComIgormaznitsaProlDataTerm:[thatStruct getFunctor]]) {
        for (int li = 0; li < arity; li++) {
          ComIgormaznitsaProlDataTerm *thiselement = [thisStruct getElementWithInt:li];
          ComIgormaznitsaProlDataTerm *thatelement = [thatStruct getElementWithInt:li];
          if (thiselement != thatelement && ![((ComIgormaznitsaProlDataTerm *) nil_chk(thiselement)) EquWithComIgormaznitsaProlDataTerm:thatelement]) {
            return NO;
          }
        }
        return YES;
      }
    }
    break;
    case ComIgormaznitsaProlDataTerm_TYPE_VAR:
    {
      ComIgormaznitsaProlDataVar *var = (ComIgormaznitsaProlDataVar *) check_class_cast(atom, [ComIgormaznitsaProlDataVar class]);
      ComIgormaznitsaProlDataTerm *value = [var getValue];
      if (value == nil) {
        return [var setValueWithComIgormaznitsaProlDataTerm:self];
      }
      else {
        if (value == self) {
          return YES;
        }
        return [value EquWithComIgormaznitsaProlDataTerm:self];
      }
    }
  }
  return NO;
}

- (BOOL)equWithoutSetWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)atom {
  if (self == atom) {
    return YES;
  }
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(atom)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_VAR) {
    atom = [((ComIgormaznitsaProlDataVar *) check_class_cast(atom, [ComIgormaznitsaProlDataVar class])) getValue];
  }
  if (atom == nil) {
    return YES;
  }
  else {
    if (atom == self) {
      return YES;
    }
  }
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(atom)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_STRUCT) {
    ComIgormaznitsaProlDataTermStruct *thisStruct = self;
    ComIgormaznitsaProlDataTermStruct *thatStruct = (ComIgormaznitsaProlDataTermStruct *) check_class_cast(atom, [ComIgormaznitsaProlDataTermStruct class]);
    int arity = [thisStruct getArity];
    if (arity == [thatStruct getArity] && [((ComIgormaznitsaProlDataTerm *) nil_chk([thisStruct getFunctor])) equWithoutSetWithComIgormaznitsaProlDataTerm:[thatStruct getFunctor]]) {
      for (int li = 0; li < arity; li++) {
        if (![((ComIgormaznitsaProlDataTerm *) nil_chk([thisStruct getElementWithInt:li])) equWithoutSetWithComIgormaznitsaProlDataTerm:[thatStruct getElementWithInt:li]]) {
          return NO;
        }
      }
      return YES;
    }
  }
  return NO;
}

- (int)termComparsionWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)atom {
  if (self == atom) {
    return 0;
  }
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(atom)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_VAR && ![((ComIgormaznitsaProlDataVar *) check_class_cast(atom, [ComIgormaznitsaProlDataVar class])) isUndefined]) {
    atom = [((ComIgormaznitsaProlDataVar *) check_class_cast(atom, [ComIgormaznitsaProlDataVar class])) getValue];
  }
  switch ([((ComIgormaznitsaProlDataTerm *) nil_chk(atom)) getTermType]) {
    case ComIgormaznitsaProlDataTerm_TYPE_LIST:
    return -1;
    case ComIgormaznitsaProlDataTerm_TYPE_STRUCT:
    {
      ComIgormaznitsaProlDataTermStruct *thatStruct = (ComIgormaznitsaProlDataTermStruct *) check_class_cast(atom, [ComIgormaznitsaProlDataTermStruct class]);
      int thisArity = [self getArity];
      int thatArity = [self getArity];
      if (thisArity == thatArity) {
        int result = [((ComIgormaznitsaProlDataTerm *) nil_chk([self getFunctor])) termComparsionWithComIgormaznitsaProlDataTerm:[thatStruct getFunctor]];
        if (result == 0) {
          for (int li = 0; li < thisArity; li++) {
            ComIgormaznitsaProlDataTerm *thisAtom = [self getElementWithInt:li];
            ComIgormaznitsaProlDataTerm *thatAtom = [thatStruct getElementWithInt:li];
            result = [((ComIgormaznitsaProlDataTerm *) nil_chk(thisAtom)) termComparsionWithComIgormaznitsaProlDataTerm:thatAtom];
            if (result != 0) {
              return result;
            }
          }
          return 0;
        }
        else {
          return result;
        }
      }
      else {
        if (thisArity < thatArity) {
          return -1;
        }
        else {
          return 1;
        }
      }
    }
    default:
    return 1;
  }
}

- (BOOL)hasAnyDifferenceWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)atom {
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(atom)) getTermType] != ComIgormaznitsaProlDataTerm_TYPE_STRUCT) {
    return YES;
  }
  ComIgormaznitsaProlDataTermStruct *thatStruct = (ComIgormaznitsaProlDataTermStruct *) check_class_cast(atom, [ComIgormaznitsaProlDataTermStruct class]);
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(functor_)) hasAnyDifferenceWithComIgormaznitsaProlDataTerm:thatStruct->functor_]) {
    return YES;
  }
  int thisarity = [self getArity];
  int thatarity = [thatStruct getArity];
  if (thatarity == thisarity) {
    for (int li = 0; li < thisarity; li++) {
      if ([((ComIgormaznitsaProlDataTerm *) IOSObjectArray_Get(nil_chk(terms_), li)) hasAnyDifferenceWithComIgormaznitsaProlDataTerm:IOSObjectArray_Get(thatStruct->terms_, li)]) {
        return YES;
      }
    }
  }
  else {
    return YES;
  }
  return NO;
}

- (BOOL)hasVariableWithNameWithNSString:(NSString *)name {
  int arity = [self getArity];
  for (int li = 0; li < arity; li++) {
    if ([((ComIgormaznitsaProlDataTerm *) nil_chk([self getElementWithInt:li])) hasVariableWithNameWithNSString:name]) {
      return YES;
    }
  }
  return NO;
}

- (BOOL)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return [JavaLangSystem identityHashCodeWithId:self];
}

+ (void)initialize {
  if (self == [ComIgormaznitsaProlDataTermStruct class]) {
    ComIgormaznitsaProlDataTermStruct_EMPTY_ARRAY_ = [IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[ComIgormaznitsaProlDataTerm class]]];
  }
}

- (void)copyAllFieldsTo:(ComIgormaznitsaProlDataTermStruct *)other {
  [super copyAllFieldsTo:other];
  other->functor_ = functor_;
  other->predicateProcessor_ = predicateProcessor_;
  other->rulefunctor_ = rulefunctor_;
  other->rulefunctorset_ = rulefunctorset_;
  other->structureSignature_ = structureSignature_;
  other->terms_ = terms_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithComIgormaznitsaProlDataTerm:", "TermStruct", NULL, 0x1, NULL },
    { "initWithNSString:withComIgormaznitsaProlDataTermArray:", "TermStruct", NULL, 0x1, NULL },
    { "initWithComIgormaznitsaProlDataTerm:withComIgormaznitsaProlDataTermArray:", "TermStruct", NULL, 0x1, NULL },
    { "isFunctorLikeRuleDefinition", NULL, "Z", 0x11, NULL },
    { "initWithComIgormaznitsaProlDataTerm:withComIgormaznitsaProlDataTermArray:withComIgormaznitsaProlLibrariesPredicateProcessor:", "TermStruct", NULL, 0x1, NULL },
    { "getFunctor", NULL, "Lcom.igormaznitsa.prol.data.Term;", 0x11, NULL },
    { "getElementsAsArray", NULL, "[Lcom.igormaznitsa.prol.data.Term;", 0x11, NULL },
    { "setElementWithInt:withComIgormaznitsaProlDataTerm:", "setElement", "V", 0x11, NULL },
    { "fillVarablesWithJavaUtilMap:", "fillVarables", "V", 0x1, NULL },
    { "hasNullElement", NULL, "Z", 0x11, NULL },
    { "getElementWithInt:", "getElement", "Lcom.igormaznitsa.prol.data.Term;", 0x11, NULL },
    { "getArity", NULL, "I", 0x11, NULL },
    { "getPriority", NULL, "I", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "getSourceLikeRepresentation", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getStringRepresentationWithBoolean:", "getStringRepresentation", "Ljava.lang.String;", 0x12, NULL },
    { "forWrite", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getPredicateProcessor", NULL, "Lcom.igormaznitsa.prol.libraries.PredicateProcessor;", 0x11, NULL },
    { "setPredicateProcessorWithComIgormaznitsaProlLibrariesPredicateProcessor:", "setPredicateProcessor", "V", 0x1, NULL },
    { "checkVariables", NULL, "Z", 0x1, NULL },
    { "getTermType", NULL, "I", 0x1, NULL },
    { "getSignature", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "EquWithComIgormaznitsaProlDataTerm:", "Equ", "Z", 0x1, NULL },
    { "equWithoutSetWithComIgormaznitsaProlDataTerm:", "equWithoutSet", "Z", 0x1, NULL },
    { "termComparsionWithComIgormaznitsaProlDataTerm:", "termComparsion", "I", 0x1, NULL },
    { "hasAnyDifferenceWithComIgormaznitsaProlDataTerm:", "hasAnyDifference", "Z", 0x1, NULL },
    { "hasVariableWithNameWithNSString:", "hasVariableWithName", "Z", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "EMPTY_ARRAY_", NULL, 0x1a, "[Lcom.igormaznitsa.prol.data.Term;" },
    { "terms_", NULL, 0x14, "[Lcom.igormaznitsa.prol.data.Term;" },
    { "functor_", NULL, 0x14, "Lcom.igormaznitsa.prol.data.Term;" },
    { "predicateProcessor_", NULL, 0x4, "Lcom.igormaznitsa.prol.libraries.PredicateProcessor;" },
    { "structureSignature_", NULL, 0x2, "Ljava.lang.String;" },
    { "rulefunctor_", NULL, 0x2, "Z" },
    { "rulefunctorset_", NULL, 0x2, "Z" },
  };
  static J2ObjcClassInfo _ComIgormaznitsaProlDataTermStruct = { "TermStruct", "com.igormaznitsa.prol.data", NULL, 0x1, 29, methods, 7, fields, 0, NULL};
  return &_ComIgormaznitsaProlDataTermStruct;
}

@end
