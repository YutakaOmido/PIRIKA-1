//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/igormaznitsa/prol/data/Var.java
//
//  Created by katsura on 14/04/13.
//

#include "IOSClass.h"
#include "com/igormaznitsa/prol/data/Term.h"
#include "com/igormaznitsa/prol/data/Var.h"
#include "java/lang/Character.h"
#include "java/lang/Comparable.h"
#include "java/lang/Long.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Map.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"

@implementation ComIgormaznitsaProlDataVar

static JavaUtilConcurrentAtomicAtomicInteger * ComIgormaznitsaProlDataVar_NonamedVariableCounter_;
static JavaUtilConcurrentAtomicAtomicInteger * ComIgormaznitsaProlDataVar_VariableUIDCounter_;

+ (JavaUtilConcurrentAtomicAtomicInteger *)NonamedVariableCounter {
  return ComIgormaznitsaProlDataVar_NonamedVariableCounter_;
}

+ (JavaUtilConcurrentAtomicAtomicInteger *)VariableUIDCounter {
  return ComIgormaznitsaProlDataVar_VariableUIDCounter_;
}

- (id)initComIgormaznitsaProlDataVarWithNSString:(NSString *)name {
  if (self = [super initWithNSString:name]) {
    variableUID_ = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(ComIgormaznitsaProlDataVar_VariableUIDCounter_)) incrementAndGet];
  }
  return self;
}

- (id)initWithNSString:(NSString *)name {
  return [self initComIgormaznitsaProlDataVarWithNSString:name];
}

- (id)init {
  if (self = [self initComIgormaznitsaProlDataVarWithNSString:[NSString stringWithFormat:@"_$%@", [JavaLangLong toHexStringWithLong:[((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(ComIgormaznitsaProlDataVar_NonamedVariableCounter_)) incrementAndGet]]]]) {
    anonymous_ = YES;
  }
  return self;
}

- (int)getVarUID {
  return variableUID_;
}

- (int)getTermType {
  return ComIgormaznitsaProlDataTerm_TYPE_VAR;
}

- (ComIgormaznitsaProlDataTerm *)getValue {
  ComIgormaznitsaProlDataTerm *result = value_;
  if (result != nil && [result getTermType] == ComIgormaznitsaProlDataTerm_TYPE_VAR) {
    result = [((ComIgormaznitsaProlDataVar *) check_class_cast(result, [ComIgormaznitsaProlDataVar class])) getValue];
  }
  return result;
}

- (BOOL)setValueWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)value {
  BOOL result = YES;
  if (value != self) {
    if ([((ComIgormaznitsaProlDataTerm *) nil_chk(value)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_VAR) {
      ComIgormaznitsaProlDataVar *curVar = ((ComIgormaznitsaProlDataVar *) check_class_cast(value, [ComIgormaznitsaProlDataVar class]));
      while (YES) {
        if (curVar == self) {
          return YES;
        }
        else {
          ComIgormaznitsaProlDataTerm *nextval = [curVar getThisValue];
          if (nextval != nil && [nextval getTermType] == ComIgormaznitsaProlDataTerm_TYPE_VAR) {
            curVar = (ComIgormaznitsaProlDataVar *) check_class_cast(nextval, [ComIgormaznitsaProlDataVar class]);
          }
          else {
            break;
          }
        }
      }
    }
    if (self->value_ == nil) {
      self->value_ = value;
    }
    else {
      ComIgormaznitsaProlDataTerm *curValue = [self getValue];
      if (curValue == nil) {
        [((ComIgormaznitsaProlDataVar *) check_class_cast(self->value_, [ComIgormaznitsaProlDataVar class])) setValueWithComIgormaznitsaProlDataTerm:value];
      }
      else {
        result = [curValue EquWithComIgormaznitsaProlDataTerm:value];
      }
    }
  }
  return result;
}

- (void)fillVarablesWithJavaUtilMap:(id<JavaUtilMap>)table {
  (void) [((id<JavaUtilMap>) nil_chk(table)) putWithId:[self getText] withId:self];
}

- (BOOL)isAnonymous {
  return anonymous_;
}

- (NSString *)getSourceLikeRepresentation {
  NSString *result = @"_";
  if (![self isAnonymous]) {
    result = [self getText];
  }
  return result;
}

- (BOOL)isUndefined {
  BOOL result = NO;
  if (value_ == nil) {
    result = YES;
  }
  else {
    if ([value_ getTermType] == ComIgormaznitsaProlDataTerm_TYPE_VAR) {
      result = [((ComIgormaznitsaProlDataVar *) check_class_cast(value_, [ComIgormaznitsaProlDataVar class])) isUndefined];
    }
  }
  return result;
}

- (BOOL)checkVariables {
  if ([self isAnonymous]) {
    return YES;
  }
  return ![self isUndefined];
}

- (NSString *)description {
  JavaLangStringBuilder *builder = [[JavaLangStringBuilder alloc] init];
  ComIgormaznitsaProlDataTerm *val = [self getValue];
  if (val == nil) {
    (void) [builder appendWithId:[self isAnonymous] ? [JavaLangCharacter valueOfWithChar:'_'] : [self getText]];
  }
  else {
    (void) [builder appendWithNSString:[val description]];
  }
  return [builder description];
}

- (ComIgormaznitsaProlDataTerm *)getThisValue {
  return value_;
}

- (ComIgormaznitsaProlDataVar *)getDeepestVar {
  ComIgormaznitsaProlDataVar *curVar = self;
  while (YES) {
    ComIgormaznitsaProlDataTerm *term = [curVar getThisValue];
    if (term == nil || [term getTermType] != ComIgormaznitsaProlDataTerm_TYPE_VAR) {
      return curVar;
    }
    else {
      curVar = (ComIgormaznitsaProlDataVar *) check_class_cast(term, [ComIgormaznitsaProlDataVar class]);
    }
  }
}

- (void)setThisValueWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)value {
  self->value_ = value;
}

- (void)changeValueWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)value {
  ComIgormaznitsaProlDataVar *deepestVar = [self getDeepestVar];
  [((ComIgormaznitsaProlDataVar *) nil_chk(deepestVar)) setThisValueWithComIgormaznitsaProlDataTerm:value];
}

- (NSUInteger)hash {
  return variableUID_;
}

- (BOOL)isEqual:(id)obj {
  if (obj == nil) {
    return NO;
  }
  if (self == obj) {
    return YES;
  }
  if ([nil_chk(obj) getClass] == [IOSClass classWithClass:[ComIgormaznitsaProlDataVar class]]) {
    ComIgormaznitsaProlDataVar *that = (ComIgormaznitsaProlDataVar *) check_class_cast(obj, [ComIgormaznitsaProlDataVar class]);
    return (variableUID_ == that->variableUID_ && [((NSString *) nil_chk([that getText])) hash] == [((NSString *) nil_chk([self getText])) hash]);
  }
  return NO;
}

- (NSString *)getSignature {
  return [NSString stringWithFormat:@".Var.%@", [self getText]];
}

- (NSString *)forWrite {
  ComIgormaznitsaProlDataTerm *val = [self getValue];
  if (val == nil) {
    if ([self isAnonymous]) {
      return @"_";
    }
    else {
      return [self getText];
    }
  }
  else {
    return [val forWrite];
  }
}

- (BOOL)EquWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)atom {
  BOOL result = YES;
  if (self != atom) {
    ComIgormaznitsaProlDataTerm *val = [self getValue];
    if (val == nil) {
      result = [self setValueWithComIgormaznitsaProlDataTerm:atom];
    }
    else {
      result = [val EquWithComIgormaznitsaProlDataTerm:atom];
    }
  }
  return result;
}

- (BOOL)equWithoutSetWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)atom {
  BOOL result = YES;
  if (self != atom) {
    ComIgormaznitsaProlDataTerm *val = [self getValue];
    if (val != nil) {
      result = [val equWithoutSetWithComIgormaznitsaProlDataTerm:atom];
    }
  }
  return result;
}

- (int)termComparsionWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)atom {
  if (self == atom) {
    return 0;
  }
  ComIgormaznitsaProlDataTerm *thisAtom = [self getValue];
  if (thisAtom == nil) {
    thisAtom = self;
  }
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(atom)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_VAR && ![((ComIgormaznitsaProlDataVar *) check_class_cast(atom, [ComIgormaznitsaProlDataVar class])) isUndefined]) {
    atom = [((ComIgormaznitsaProlDataVar *) check_class_cast(atom, [ComIgormaznitsaProlDataVar class])) getValue];
  }
  int result = -1;
  if (thisAtom == self) {
    if ([((ComIgormaznitsaProlDataTerm *) nil_chk(atom)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_VAR) {
      result = [((NSString *) nil_chk([self getText])) compareToWithId:[atom getText]];
    }
  }
  else {
    result = [((ComIgormaznitsaProlDataTerm *) nil_chk(thisAtom)) termComparsionWithComIgormaznitsaProlDataTerm:atom];
  }
  return result;
}

- (BOOL)hasAnyDifferenceWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)atom {
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(atom)) getTermType] != ComIgormaznitsaProlDataTerm_TYPE_VAR) {
    return YES;
  }
  ComIgormaznitsaProlDataVar *thatVar = (ComIgormaznitsaProlDataVar *) check_class_cast(atom, [ComIgormaznitsaProlDataVar class]);
  if (![((NSString *) nil_chk([self getText])) isEqual:[thatVar getText]]) {
    return YES;
  }
  ComIgormaznitsaProlDataTerm *thisVal = [self getValue];
  ComIgormaznitsaProlDataTerm *thatVal = [thatVar getValue];
  if (thisVal == nil && thatVal == nil) {
    return NO;
  }
  if (thisVal != nil && thatVal != nil) {
    return [thisVal hasAnyDifferenceWithComIgormaznitsaProlDataTerm:thatVal];
  }
  return YES;
}

- (BOOL)hasVariableWithNameWithNSString:(NSString *)name {
  return [((NSString *) nil_chk([self getText])) isEqual:name];
}

+ (void)initialize {
  if (self == [ComIgormaznitsaProlDataVar class]) {
    ComIgormaznitsaProlDataVar_NonamedVariableCounter_ = [[JavaUtilConcurrentAtomicAtomicInteger alloc] initWithInt:0];
    ComIgormaznitsaProlDataVar_VariableUIDCounter_ = [[JavaUtilConcurrentAtomicAtomicInteger alloc] initWithInt:0];
  }
}

- (void)copyAllFieldsTo:(ComIgormaznitsaProlDataVar *)other {
  [super copyAllFieldsTo:other];
  other->anonymous_ = anonymous_;
  other->value_ = value_;
  other->variableUID_ = variableUID_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "Var", NULL, 0x1, NULL },
    { "init", "Var", NULL, 0x1, NULL },
    { "getVarUID", NULL, "I", 0x11, NULL },
    { "getTermType", NULL, "I", 0x1, NULL },
    { "getValue", NULL, "Lcom.igormaznitsa.prol.data.Term;", 0x11, NULL },
    { "setValueWithComIgormaznitsaProlDataTerm:", "setValue", "Z", 0x11, NULL },
    { "fillVarablesWithJavaUtilMap:", "fillVarables", "V", 0x1, NULL },
    { "isAnonymous", NULL, "Z", 0x1, NULL },
    { "getSourceLikeRepresentation", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "isUndefined", NULL, "Z", 0x11, NULL },
    { "checkVariables", NULL, "Z", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "getThisValue", NULL, "Lcom.igormaznitsa.prol.data.Term;", 0x1, NULL },
    { "getDeepestVar", NULL, "Lcom.igormaznitsa.prol.data.Var;", 0x1, NULL },
    { "setThisValueWithComIgormaznitsaProlDataTerm:", "setThisValue", "V", 0x1, NULL },
    { "changeValueWithComIgormaznitsaProlDataTerm:", "changeValue", "V", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "getSignature", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "forWrite", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "EquWithComIgormaznitsaProlDataTerm:", "Equ", "Z", 0x1, NULL },
    { "equWithoutSetWithComIgormaznitsaProlDataTerm:", "equWithoutSet", "Z", 0x1, NULL },
    { "termComparsionWithComIgormaznitsaProlDataTerm:", "termComparsion", "I", 0x1, NULL },
    { "hasAnyDifferenceWithComIgormaznitsaProlDataTerm:", "hasAnyDifference", "Z", 0x1, NULL },
    { "hasVariableWithNameWithNSString:", "hasVariableWithName", "Z", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "NonamedVariableCounter_", NULL, 0x1a, "Ljava.util.concurrent.atomic.AtomicInteger;" },
    { "VariableUIDCounter_", NULL, 0x1a, "Ljava.util.concurrent.atomic.AtomicInteger;" },
    { "value_", NULL, 0x2, "Lcom.igormaznitsa.prol.data.Term;" },
    { "anonymous_", NULL, 0x2, "Z" },
    { "variableUID_", NULL, 0x12, "I" },
  };
  static J2ObjcClassInfo _ComIgormaznitsaProlDataVar = { "Var", "com.igormaznitsa.prol.data", NULL, 0x11, 25, methods, 5, fields, 0, NULL};
  return &_ComIgormaznitsaProlDataVar;
}

@end
