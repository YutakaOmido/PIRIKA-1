//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/igormaznitsa/prol/libraries/ProlAbstractLibrary.java
//
//  Created by katsura on 14/04/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/igormaznitsa/prol/annotations/Predicate.h"
#include "com/igormaznitsa/prol/annotations/PredicateSynonyms.h"
#include "com/igormaznitsa/prol/annotations/ProlOperator.h"
#include "com/igormaznitsa/prol/annotations/ProlOperators.h"
#include "com/igormaznitsa/prol/containers/OperatorContainer.h"
#include "com/igormaznitsa/prol/data/Operator.h"
#include "com/igormaznitsa/prol/data/TermStruct.h"
#include "com/igormaznitsa/prol/exceptions/ProlCriticalError.h"
#include "com/igormaznitsa/prol/libraries/PredicateProcessor.h"
#include "com/igormaznitsa/prol/libraries/PredicateTemplate.h"
#include "com/igormaznitsa/prol/libraries/ProlAbstractLibrary.h"
#include "com/igormaznitsa/prol/logic/ProlContext.h"
#include "com/igormaznitsa/prol/utils/Utils.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/reflect/Method.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"

@implementation ComIgormaznitsaProlLibrariesProlAbstractLibrary

- (id)initWithNSString:(NSString *)libraryID {
  if (self = [super init]) {
    libraryOperators_ = [[JavaUtilHashMap alloc] init];
    predicateMethodsMap_ = [[JavaUtilHashMap alloc] init];
    if (libraryID == nil) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"The library ID must not be null!"];
    }
    self->libraryUID_ = libraryID;
    [self loadStaticOperators];
    [self scanThisClassForPredicates];
  }
  return self;
}

- (BOOL)hasPredicateForSignatureWithNSString:(NSString *)signature {
  return [((id<JavaUtilMap>) nil_chk(predicateMethodsMap_)) containsKeyWithId:signature];
}

- (ComIgormaznitsaProlLibrariesPredicateProcessor *)findProcessorForPredicateWithComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  return [((id<JavaUtilMap>) nil_chk(predicateMethodsMap_)) getWithId:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getSignature]];
}

- (NSString *)getLibraryUID {
  return libraryUID_;
}

- (void)release__ {
  @try {
    [((id<JavaUtilMap>) nil_chk(predicateMethodsMap_)) clear];
    [((id<JavaUtilMap>) nil_chk(libraryOperators_)) clear];
  }
  @catch (JavaLangException *thr) {
    [((JavaUtilLoggingLogger *) nil_chk([JavaUtilLoggingLogger getLoggerWithNSString:[[self getClass] getCanonicalName]])) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel WARNING] withNSString:@"release()" withJavaLangThrowable:thr];
  }
}

- (NSUInteger)hash {
  return [((NSString *) nil_chk(libraryUID_)) hash];
}

- (BOOL)isEqual:(id)obj {
  if (obj == nil) {
    return NO;
  }
  if ([obj isKindOfClass:[ComIgormaznitsaProlLibrariesProlAbstractLibrary class]]) {
    ComIgormaznitsaProlLibrariesProlAbstractLibrary *other = (ComIgormaznitsaProlLibrariesProlAbstractLibrary *) check_class_cast(obj, [ComIgormaznitsaProlLibrariesProlAbstractLibrary class]);
    return [((NSString *) nil_chk(self->libraryUID_)) isEqual:((ComIgormaznitsaProlLibrariesProlAbstractLibrary *) nil_chk(other))->libraryUID_];
  }
  return YES;
}

- (void)scanThisClassForPredicates {
  IOSClass *thisClass = [self getClass];
  IOSObjectArray *methods = [thisClass getMethods];
  [((id<JavaUtilMap>) nil_chk(predicateMethodsMap_)) clear];
  for (int li = 0; li < (int) [((IOSObjectArray *) nil_chk(methods)) count]; li++) {
    JavaLangReflectMethod *method = IOSObjectArray_Get(methods, li);
    id<ComIgormaznitsaProlAnnotationsPredicate> predicateAnnotation = [((JavaLangReflectMethod *) nil_chk(method)) getAnnotationWithIOSClass:[IOSClass classWithProtocol:@protocol(ComIgormaznitsaProlAnnotationsPredicate)]];
    id<ComIgormaznitsaProlAnnotationsPredicateSynonyms> synonims = [method getAnnotationWithIOSClass:[IOSClass classWithProtocol:@protocol(ComIgormaznitsaProlAnnotationsPredicateSynonyms)]];
    if (predicateAnnotation != nil) {
      NSString *signature = [ComIgormaznitsaProlUtilsUtils normalizeSignatureWithNSString:[predicateAnnotation Signature]];
      if (signature == nil) {
        @throw [[ComIgormaznitsaProlExceptionsProlCriticalError alloc] initWithNSString:[NSString stringWithFormat:@"Wrong signature of a predicate method %@ at %@", [method getName], libraryUID_]];
      }
      if ([predicateMethodsMap_ containsKeyWithId:signature]) {
        @throw [[ComIgormaznitsaProlExceptionsProlCriticalError alloc] initWithNSString:[NSString stringWithFormat:@"Duplicated predicate method %@ at %@", signature, libraryUID_]];
      }
      IOSObjectArray *templates = nil;
      IOSObjectArray *templateStrings = [predicateAnnotation Template];
      if (templateStrings != nil && (int) [templateStrings count] > 0) {
        templates = [IOSObjectArray arrayWithLength:(int) [templateStrings count] type:[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[ComIgormaznitsaProlLibrariesPredicateTemplate class]]]];
        for (int lt = 0; lt < (int) [templateStrings count]; lt++) {
          IOSObjectArray *str = [((NSString *) IOSObjectArray_Get(templateStrings, lt)) split:@","];
          IOSObjectArray *curtemp = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(str)) count] type:[IOSClass classWithClass:[ComIgormaznitsaProlLibrariesPredicateTemplate class]]];
          for (int ld = 0; ld < (int) [str count]; ld++) {
            (void) IOSObjectArray_Set(curtemp, ld, [[ComIgormaznitsaProlLibrariesPredicateTemplate alloc] initWithNSString:IOSObjectArray_Get(str, ld)]);
          }
          (void) IOSObjectArray_Set(templates, lt, curtemp);
        }
      }
      ComIgormaznitsaProlLibrariesPredicateProcessor *processor = [[ComIgormaznitsaProlLibrariesPredicateProcessor alloc] initWithComIgormaznitsaProlLibrariesProlAbstractLibrary:self withNSString:signature withJavaLangReflectMethod:method withComIgormaznitsaProlLibrariesPredicateTemplateArray2:templates];
      (void) [predicateMethodsMap_ putWithId:signature withId:processor];
      if (synonims != nil) {
        IOSObjectArray *synonimSignatures = [synonims Signatures];
        for (int lz = 0; lz < (int) [((IOSObjectArray *) nil_chk(synonimSignatures)) count]; lz++) {
          (void) [predicateMethodsMap_ putWithId:[((NSString *) IOSObjectArray_Get(synonimSignatures, lz)) trim] withId:processor];
        }
      }
    }
  }
}

- (void)addStaticOperatorWithComIgormaznitsaProlAnnotationsProlOperator:(ComIgormaznitsaProlAnnotationsProlOperator *)operator_ {
  ComIgormaznitsaProlDataOperator *newOperator = [[ComIgormaznitsaProlDataOperator alloc] initWithInt:[((ComIgormaznitsaProlAnnotationsProlOperator *) nil_chk(operator_)) Priority] withInt:[operator_ Type] withNSString:[operator_ Name]];
  ComIgormaznitsaProlContainersOperatorContainer *container = [((id<JavaUtilMap>) nil_chk(libraryOperators_)) getWithId:[operator_ Name]];
  if (container == nil) {
    container = [[ComIgormaznitsaProlContainersOperatorContainer alloc] initWithComIgormaznitsaProlDataOperator:newOperator withBoolean:YES];
    (void) [libraryOperators_ putWithId:[operator_ Name] withId:container];
  }
  else {
    [container setOperatorWithComIgormaznitsaProlDataOperator:newOperator];
  }
}

- (void)loadStaticOperators {
  [((id<JavaUtilMap>) nil_chk(libraryOperators_)) clear];
  IOSClass *thisClass = [self getClass];
  IOSObjectArray *operatorList = [ComIgormaznitsaProlAnnotationsProlOperators Operators];
  {
    IOSObjectArray *a__ = operatorList;
    ComIgormaznitsaProlAnnotationsProlOperator * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    ComIgormaznitsaProlAnnotationsProlOperator * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      ComIgormaznitsaProlAnnotationsProlOperator *lst = (*b__++);
      [self addStaticOperatorWithComIgormaznitsaProlAnnotationsProlOperator:lst];
    }
  }
}

- (BOOL)isSystemOperatorWithNSString:(NSString *)nameToBeChecked {
  if (nameToBeChecked == nil) {
    return NO;
  }
  return [((id<JavaUtilMap>) nil_chk(libraryOperators_)) containsKeyWithId:nameToBeChecked];
}

- (BOOL)hasSyatemOperatorStartsWithWithNSString:(NSString *)startSubstring {
  id<JavaUtilIterator> operators = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(libraryOperators_)) keySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(operators)) hasNext]) {
    if ([((NSString *) nil_chk([operators next])) hasPrefix:startSubstring]) {
      return YES;
    }
  }
  return NO;
}

- (ComIgormaznitsaProlContainersOperatorContainer *)findSystemOperatorForNameWithNSString:(NSString *)operatorName {
  return [((id<JavaUtilMap>) nil_chk(libraryOperators_)) getWithId:operatorName];
}

- (void)contextHasBeenHaltedWithComIgormaznitsaProlLogicProlContext:(ComIgormaznitsaProlLogicProlContext *)context {
}

- (void)copyAllFieldsTo:(ComIgormaznitsaProlLibrariesProlAbstractLibrary *)other {
  [super copyAllFieldsTo:other];
  other->libraryOperators_ = libraryOperators_;
  other->libraryUID_ = libraryUID_;
  other->predicateMethodsMap_ = predicateMethodsMap_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "ProlAbstractLibrary", NULL, 0x1, NULL },
    { "hasPredicateForSignatureWithNSString:", "hasPredicateForSignature", "Z", 0x1, NULL },
    { "findProcessorForPredicateWithComIgormaznitsaProlDataTermStruct:", "findProcessorForPredicate", "Lcom.igormaznitsa.prol.libraries.PredicateProcessor;", 0x1, NULL },
    { "getLibraryUID", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "release__", "release", "V", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "scanThisClassForPredicates", NULL, "V", 0x2, NULL },
    { "addStaticOperatorWithComIgormaznitsaProlAnnotationsProlOperator:", "addStaticOperator", "V", 0x2, NULL },
    { "loadStaticOperators", NULL, "V", 0x2, NULL },
    { "isSystemOperatorWithNSString:", "isSystemOperator", "Z", 0x1, NULL },
    { "hasSyatemOperatorStartsWithWithNSString:", "hasSyatemOperatorStartsWith", "Z", 0x1, NULL },
    { "findSystemOperatorForNameWithNSString:", "findSystemOperatorForName", "Lcom.igormaznitsa.prol.containers.OperatorContainer;", 0x1, NULL },
    { "contextHasBeenHaltedWithComIgormaznitsaProlLogicProlContext:", "contextHasBeenHalted", "V", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "libraryOperators_", NULL, 0x14, "Ljava.util.Map;" },
    { "libraryUID_", NULL, 0x14, "Ljava.lang.String;" },
    { "predicateMethodsMap_", NULL, 0x14, "Ljava.util.Map;" },
  };
  static J2ObjcClassInfo _ComIgormaznitsaProlLibrariesProlAbstractLibrary = { "ProlAbstractLibrary", "com.igormaznitsa.prol.libraries", NULL, 0x401, 14, methods, 3, fields, 0, NULL};
  return &_ComIgormaznitsaProlLibrariesProlAbstractLibrary;
}

@end
