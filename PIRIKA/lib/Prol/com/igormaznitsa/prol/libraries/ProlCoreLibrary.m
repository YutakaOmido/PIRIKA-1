//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/igormaznitsa/prol/libraries/ProlCoreLibrary.java
//
//  Created by katsura on 14/04/15.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/igormaznitsa/prol/annotations/Determined.h"
#include "com/igormaznitsa/prol/annotations/Evaluable.h"
#include "com/igormaznitsa/prol/annotations/ItChangesGoalChain.h"
#include "com/igormaznitsa/prol/annotations/Predicate.h"
#include "com/igormaznitsa/prol/annotations/PredicateSynonyms.h"
#include "com/igormaznitsa/prol/containers/ClauseIterator.h"
#include "com/igormaznitsa/prol/containers/FactIterator.h"
#include "com/igormaznitsa/prol/containers/KnowledgeBase.h"
#include "com/igormaznitsa/prol/containers/OperatorContainer.h"
#include "com/igormaznitsa/prol/containers/RuleIterator.h"
#include "com/igormaznitsa/prol/data/NumericTerm.h"
#include "com/igormaznitsa/prol/data/Operator.h"
#include "com/igormaznitsa/prol/data/Term.h"
#include "com/igormaznitsa/prol/data/TermFloat.h"
#include "com/igormaznitsa/prol/data/TermInteger.h"
#include "com/igormaznitsa/prol/data/TermList.h"
#include "com/igormaznitsa/prol/data/TermStruct.h"
#include "com/igormaznitsa/prol/data/Var.h"
#include "com/igormaznitsa/prol/exceptions/ProlAbstractCatcheableException.h"
#include "com/igormaznitsa/prol/exceptions/ProlCriticalError.h"
#include "com/igormaznitsa/prol/exceptions/ProlCustomErrorException.h"
#include "com/igormaznitsa/prol/exceptions/ProlDomainErrorException.h"
#include "com/igormaznitsa/prol/exceptions/ProlEvaluationErrorException.h"
#include "com/igormaznitsa/prol/exceptions/ProlExistenceErrorException.h"
#include "com/igormaznitsa/prol/exceptions/ProlForkExecutionException.h"
#include "com/igormaznitsa/prol/exceptions/ProlHaltExecutionException.h"
#include "com/igormaznitsa/prol/exceptions/ProlInstantiationErrorException.h"
#include "com/igormaznitsa/prol/exceptions/ProlPermissionErrorException.h"
#include "com/igormaznitsa/prol/exceptions/ProlRepresentationErrorException.h"
#include "com/igormaznitsa/prol/exceptions/ProlTypeErrorException.h"
#include "com/igormaznitsa/prol/io/ProlStream.h"
#include "com/igormaznitsa/prol/io/ProlStreamManager.h"
#include "com/igormaznitsa/prol/io/ProlTextReader.h"
#include "com/igormaznitsa/prol/io/ProlTextWriter.h"
#include "com/igormaznitsa/prol/libraries/PredicateProcessor.h"
#include "com/igormaznitsa/prol/libraries/ProlCoreLibrary.h"
#include "com/igormaznitsa/prol/logic/Goal.h"
#include "com/igormaznitsa/prol/logic/ProlContext.h"
#include "com/igormaznitsa/prol/logic/triggers/AbstractProlTrigger.h"
#include "com/igormaznitsa/prol/logic/triggers/ProlTriggerGoal.h"
#include "com/igormaznitsa/prol/logic/triggers/ProlTriggerType.h"
#include "com/igormaznitsa/prol/parser/ProlConsult.h"
#include "com/igormaznitsa/prol/trace/TraceListener.h"
#include "com/igormaznitsa/prol/utils/Utils.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/ArithmeticException.h"
#include "java/lang/Character.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalMonitorStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Math.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/SecurityException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Calendar.h"
#include "java/util/Collection.h"
#include "java/util/Comparator.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Random.h"
#include "java/util/Set.h"
#include "java/util/concurrent/BlockingQueue.h"
#include "java/util/concurrent/ExecutionException.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/ThreadPoolExecutor.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"

@implementation ComIgormaznitsaProlLibrariesProlCoreLibrary

static JavaUtilLoggingLogger * ComIgormaznitsaProlLibrariesProlCoreLibrary_LOG_;
static ComIgormaznitsaProlDataTerm * ComIgormaznitsaProlLibrariesProlCoreLibrary_NEXT_LINE_;
static ComIgormaznitsaProlDataTerm * ComIgormaznitsaProlLibrariesProlCoreLibrary_SPACE_;
static JavaUtilRandom * ComIgormaznitsaProlLibrariesProlCoreLibrary_RANDOMIZEGEN_;
static ComIgormaznitsaProlDataTerm * ComIgormaznitsaProlLibrariesProlCoreLibrary_TRUE__;

+ (JavaUtilLoggingLogger *)LOG {
  return ComIgormaznitsaProlLibrariesProlCoreLibrary_LOG_;
}

+ (ComIgormaznitsaProlDataTerm *)NEXT_LINE {
  return ComIgormaznitsaProlLibrariesProlCoreLibrary_NEXT_LINE_;
}

+ (ComIgormaznitsaProlDataTerm *)SPACE {
  return ComIgormaznitsaProlLibrariesProlCoreLibrary_SPACE_;
}

+ (JavaUtilRandom *)RANDOMIZEGEN {
  return ComIgormaznitsaProlLibrariesProlCoreLibrary_RANDOMIZEGEN_;
}

+ (ComIgormaznitsaProlDataTerm *)getTRUE {
  return ComIgormaznitsaProlLibrariesProlCoreLibrary_TRUE__;
}

- (id)init {
  return [super initWithNSString:@"ProlCoreLib"];
}

- (BOOL)predicateArithEquWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                    withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlDataNumericTerm> left = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  id<ComIgormaznitsaProlDataNumericTerm> right = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
  return [((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(left)) compareWithComIgormaznitsaProlDataNumericTerm:right] == 0;
}

- (BOOL)predicateTermLessWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                    withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  return [((ComIgormaznitsaProlDataTerm *) nil_chk([((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0])) termComparsionWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]] < 0;
}

- (BOOL)predicateTermLessOrEquWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                         withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  return [((ComIgormaznitsaProlDataTerm *) nil_chk([((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0])) termComparsionWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]] <= 0;
}

- (BOOL)predicateTermMoreWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                    withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  return [((ComIgormaznitsaProlDataTerm *) nil_chk([((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0])) termComparsionWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]] > 0;
}

- (BOOL)predicateTermMoreOrEquWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                         withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  return [((ComIgormaznitsaProlDataTerm *) nil_chk([((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0])) termComparsionWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]] >= 0;
}

- (BOOL)predicateTermEquWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                   withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  return [((ComIgormaznitsaProlDataTerm *) nil_chk([((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0])) termComparsionWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]] == 0;
}

- (BOOL)predicateNotTermEquWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                      withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  return [((ComIgormaznitsaProlDataTerm *) nil_chk([((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0])) termComparsionWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]] != 0;
}

- (BOOL)predicateArithMoreWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                     withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlDataNumericTerm> left = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  id<ComIgormaznitsaProlDataNumericTerm> right = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
  return [((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(left)) compareWithComIgormaznitsaProlDataNumericTerm:right] > 0;
}

- (BOOL)predicateArithLessWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                     withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlDataNumericTerm> left = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  id<ComIgormaznitsaProlDataNumericTerm> right = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
  return [((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(left)) compareWithComIgormaznitsaProlDataNumericTerm:right] < 0;
}

- (BOOL)predicateArithMoreOrEquWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                          withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlDataNumericTerm> left = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  id<ComIgormaznitsaProlDataNumericTerm> right = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
  return [((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(left)) compareWithComIgormaznitsaProlDataNumericTerm:right] >= 0;
}

- (BOOL)predicateArithLessOrEquWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                          withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlDataNumericTerm> left = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  id<ComIgormaznitsaProlDataNumericTerm> right = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
  return [((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(left)) compareWithComIgormaznitsaProlDataNumericTerm:right] <= 0;
}

- (BOOL)predicateArithNotEquWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                       withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlDataNumericTerm> left = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  id<ComIgormaznitsaProlDataNumericTerm> right = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
  return [((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(left)) compareWithComIgormaznitsaProlDataNumericTerm:right] != 0;
}

- (ComIgormaznitsaProlDataTerm *)predicateXORWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                                        withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlDataNumericTerm> left = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  id<ComIgormaznitsaProlDataNumericTerm> right = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
  if ([(id) left isKindOfClass:[ComIgormaznitsaProlDataTermInteger class]] && [(id) right isKindOfClass:[ComIgormaznitsaProlDataTermInteger class]]) {
    int lft = [((NSNumber *) nil_chk([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(left)) getNumericValue])) intValue];
    int rght = [((NSNumber *) nil_chk([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(right)) getNumericValue])) intValue];
    return [[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:lft ^ rght];
  }
  else {
    @throw [[ComIgormaznitsaProlExceptionsProlInstantiationErrorException alloc] initWithNSString:@"Both arguments must be integer" withComIgormaznitsaProlDataTerm:predicate];
  }
}

- (ComIgormaznitsaProlDataTerm *)predicateBITWISENOTWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                                               withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlDataNumericTerm> left = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  if ([(id) left isKindOfClass:[ComIgormaznitsaProlDataTermInteger class]]) {
    int lft = [((NSNumber *) nil_chk([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(left)) getNumericValue])) intValue];
    return [[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:~lft];
  }
  else {
    @throw [[ComIgormaznitsaProlExceptionsProlInstantiationErrorException alloc] initWithNSString:@"Argument must be integer" withComIgormaznitsaProlDataTerm:predicate];
  }
}

- (ComIgormaznitsaProlDataTerm *)predicateBITWISEORWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                                              withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlDataNumericTerm> left = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  id<ComIgormaznitsaProlDataNumericTerm> right = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
  if ([(id) left isKindOfClass:[ComIgormaznitsaProlDataTermInteger class]] && [(id) right isKindOfClass:[ComIgormaznitsaProlDataTermInteger class]]) {
    int lft = [((NSNumber *) nil_chk([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(left)) getNumericValue])) intValue];
    int rght = [((NSNumber *) nil_chk([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(right)) getNumericValue])) intValue];
    return [[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:lft | rght];
  }
  else {
    @throw [[ComIgormaznitsaProlExceptionsProlInstantiationErrorException alloc] initWithNSString:@"Both arguments must be integer" withComIgormaznitsaProlDataTerm:predicate];
  }
}

- (ComIgormaznitsaProlDataTerm *)predicateBITWISEANDWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                                               withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlDataNumericTerm> left = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  id<ComIgormaznitsaProlDataNumericTerm> right = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
  if ([(id) left isKindOfClass:[ComIgormaznitsaProlDataTermInteger class]] && [(id) right isKindOfClass:[ComIgormaznitsaProlDataTermInteger class]]) {
    int lft = [((NSNumber *) nil_chk([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(left)) getNumericValue])) intValue];
    int rght = [((NSNumber *) nil_chk([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(right)) getNumericValue])) intValue];
    return [[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:lft & rght];
  }
  else {
    @throw [[ComIgormaznitsaProlExceptionsProlInstantiationErrorException alloc] initWithNSString:@"Both arguments must be integer" withComIgormaznitsaProlDataTerm:predicate];
  }
}

- (ComIgormaznitsaProlDataTerm *)predicateMODWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                                        withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlDataNumericTerm> left = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  id<ComIgormaznitsaProlDataNumericTerm> right = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
  int leftval = [((NSNumber *) nil_chk([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(left)) getNumericValue])) intValue];
  int rightval = [((NSNumber *) nil_chk([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(right)) getNumericValue])) intValue];
  return [[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:leftval % rightval];
}

- (ComIgormaznitsaProlDataTerm *)predicateREMWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                                        withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlDataNumericTerm> left = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  id<ComIgormaznitsaProlDataNumericTerm> right = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
  int leftval = [((NSNumber *) nil_chk([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(left)) getNumericValue])) intValue];
  int rightval = [((NSNumber *) nil_chk([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(right)) getNumericValue])) intValue];
  return [[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:leftval - (leftval / rightval) * rightval];
}

- (ComIgormaznitsaProlDataTerm *)predicatePOWERWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                                          withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlDataNumericTerm> left = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  id<ComIgormaznitsaProlDataNumericTerm> right = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
  float leftval = [((NSNumber *) nil_chk([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(left)) getNumericValue])) floatValue];
  float rightval = [((NSNumber *) nil_chk([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(right)) getNumericValue])) floatValue];
  return [[ComIgormaznitsaProlDataTermFloat alloc] initWithFloat:(float) [JavaLangMath powWithDouble:leftval withDouble:rightval]];
}

- (ComIgormaznitsaProlDataTerm *)predicateADDTWOWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                                           withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlDataNumericTerm> left = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  id<ComIgormaznitsaProlDataNumericTerm> right = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
  return (ComIgormaznitsaProlDataTerm *) check_class_cast(([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(left)) addWithComIgormaznitsaProlDataNumericTerm:right]), [ComIgormaznitsaProlDataTerm class]);
}

- (ComIgormaznitsaProlDataTerm *)predicateSINWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                                        withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlDataNumericTerm> arg = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  float value = [((NSNumber *) nil_chk([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(arg)) getNumericValue])) floatValue];
  return [[ComIgormaznitsaProlDataTermFloat alloc] initWithFloat:(float) [JavaLangMath sinWithDouble:value]];
}

- (ComIgormaznitsaProlDataTerm *)predicateFLOATINTEGERPARTWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                                                     withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlDataNumericTerm> arg = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  int value = [((NSNumber *) nil_chk([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(arg)) getNumericValue])) intValue];
  return [[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:value];
}

- (ComIgormaznitsaProlDataTerm *)predicateFLOATFRACTIONALPARTWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                                                        withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlDataNumericTerm> arg = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  float value = [((NSNumber *) nil_chk([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(arg)) getNumericValue])) floatValue];
  int valueInt = (int) value;
  return [[ComIgormaznitsaProlDataTermFloat alloc] initWithFloat:value - (float) valueInt];
}

- (ComIgormaznitsaProlDataTerm *)predicateFLOORWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                                          withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlDataNumericTerm> arg = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  float value = [((NSNumber *) nil_chk([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(arg)) getNumericValue])) floatValue];
  return [[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:(int) [JavaLangMath floorWithDouble:value]];
}

- (ComIgormaznitsaProlDataTerm *)predicateTRUNCATEWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                                             withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlDataNumericTerm> arg = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  float value = [((NSNumber *) nil_chk([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(arg)) getNumericValue])) floatValue];
  return [[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:value < 0 ? (int) [JavaLangMath ceilWithDouble:value] : (int) [JavaLangMath floorWithDouble:value]];
}

- (ComIgormaznitsaProlDataTerm *)predicateROUNDWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                                          withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlDataNumericTerm> arg = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  float value = [((NSNumber *) nil_chk([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(arg)) getNumericValue])) floatValue];
  return [[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:[JavaLangMath roundWithFloat:value]];
}

- (ComIgormaznitsaProlDataTerm *)predicateCEILINGWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                                            withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlDataNumericTerm> arg = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  float value = [((NSNumber *) nil_chk([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(arg)) getNumericValue])) floatValue];
  return [[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:(int) [JavaLangMath ceilWithDouble:value]];
}

- (ComIgormaznitsaProlDataTerm *)predicateCOSWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                                        withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlDataNumericTerm> arg = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  float value = [((NSNumber *) nil_chk([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(arg)) getNumericValue])) floatValue];
  return [[ComIgormaznitsaProlDataTermFloat alloc] initWithFloat:(float) [JavaLangMath cosWithDouble:value]];
}

- (ComIgormaznitsaProlDataTerm *)predicateATANWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                                         withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlDataNumericTerm> arg = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  float value = [((NSNumber *) nil_chk([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(arg)) getNumericValue])) floatValue];
  return [[ComIgormaznitsaProlDataTermFloat alloc] initWithFloat:(float) [JavaLangMath atanWithDouble:value]];
}

- (ComIgormaznitsaProlDataTerm *)predicateEXPWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                                        withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlDataNumericTerm> arg = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  float value = [((NSNumber *) nil_chk([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(arg)) getNumericValue])) floatValue];
  return [[ComIgormaznitsaProlDataTermFloat alloc] initWithFloat:(float) [JavaLangMath expWithDouble:value]];
}

- (ComIgormaznitsaProlDataTerm *)predicateLOGWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                                        withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlDataNumericTerm> arg = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  float value = [((NSNumber *) nil_chk([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(arg)) getNumericValue])) floatValue];
  return [[ComIgormaznitsaProlDataTermFloat alloc] initWithFloat:(float) [JavaLangMath logWithDouble:value]];
}

- (ComIgormaznitsaProlDataTerm *)predicateSQRTWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                                         withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlDataNumericTerm> arg = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  float value = [((NSNumber *) nil_chk([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(arg)) getNumericValue])) floatValue];
  return [[ComIgormaznitsaProlDataTermFloat alloc] initWithFloat:(float) [JavaLangMath sqrtWithDouble:value]];
}

- (ComIgormaznitsaProlDataTerm *)predicateABSWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                                        withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlDataNumericTerm> arg = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  return (ComIgormaznitsaProlDataTerm *) check_class_cast([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(arg)) abs], [ComIgormaznitsaProlDataTerm class]);
}

- (ComIgormaznitsaProlDataTerm *)predicateSIGNWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                                         withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlDataNumericTerm> arg = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  return (ComIgormaznitsaProlDataTerm *) check_class_cast([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(arg)) sign], [ComIgormaznitsaProlDataTerm class]);
}

- (ComIgormaznitsaProlDataTerm *)predicateSUBTWOWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                                           withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlDataNumericTerm> left = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  id<ComIgormaznitsaProlDataNumericTerm> right = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
  return (ComIgormaznitsaProlDataTerm *) check_class_cast(([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(left)) subWithComIgormaznitsaProlDataNumericTerm:right]), [ComIgormaznitsaProlDataTerm class]);
}

- (ComIgormaznitsaProlDataTerm *)predicateNegWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                                        withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlDataNumericTerm> val = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  return (ComIgormaznitsaProlDataTerm *) check_class_cast(([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(val)) neg]), [ComIgormaznitsaProlDataTerm class]);
}

- (ComIgormaznitsaProlDataTerm *)predicateTheSameWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                                            withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  return (ComIgormaznitsaProlDataTerm *) check_class_cast([self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]], [ComIgormaznitsaProlDataTerm class]);
}

- (ComIgormaznitsaProlDataTerm *)predicateMULWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                                        withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlDataNumericTerm> left = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  id<ComIgormaznitsaProlDataNumericTerm> right = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
  return (ComIgormaznitsaProlDataTerm *) check_class_cast(([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(left)) mulWithComIgormaznitsaProlDataNumericTerm:right]), [ComIgormaznitsaProlDataTerm class]);
}

- (ComIgormaznitsaProlDataTerm *)predicateDIVWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                                        withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlDataNumericTerm> left = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  id<ComIgormaznitsaProlDataNumericTerm> right = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
  return (ComIgormaznitsaProlDataTerm *) check_class_cast(([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(left)) divWithComIgormaznitsaProlDataNumericTerm:right]), [ComIgormaznitsaProlDataTerm class]);
}

- (ComIgormaznitsaProlDataTerm *)predicateINTDIVWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                                           withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlDataNumericTerm> left = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  id<ComIgormaznitsaProlDataNumericTerm> right = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
  ComIgormaznitsaProlDataTerm *result = (ComIgormaznitsaProlDataTerm *) check_class_cast([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(left)) divWithComIgormaznitsaProlDataNumericTerm:right], [ComIgormaznitsaProlDataTerm class]);
  if ([result isKindOfClass:[ComIgormaznitsaProlDataTermFloat class]]) {
    result = [[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:[((NSNumber *) nil_chk([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(((id<ComIgormaznitsaProlDataNumericTerm>) check_protocol_cast(result, @protocol(ComIgormaznitsaProlDataNumericTerm))))) getNumericValue])) intValue]];
  }
  return result;
}

- (ComIgormaznitsaProlDataTerm *)predicateSHIFTLEFTWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                                              withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlDataNumericTerm> left = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  id<ComIgormaznitsaProlDataNumericTerm> right = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
  int value = [((NSNumber *) nil_chk([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(left)) getNumericValue])) intValue];
  int shift = [((NSNumber *) nil_chk([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(right)) getNumericValue])) intValue];
  return [[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:value << shift];
}

- (ComIgormaznitsaProlDataTerm *)predicateSHIFTRIGHTWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                                               withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlDataNumericTerm> left = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  id<ComIgormaznitsaProlDataNumericTerm> right = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
  int value = [((NSNumber *) nil_chk([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(left)) getNumericValue])) intValue];
  int shift = [((NSNumber *) nil_chk([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(right)) getNumericValue])) intValue];
  return [[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:value >> shift];
}

- (BOOL)predicateISWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
              withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *leftPart = [((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0];
  id<ComIgormaznitsaProlDataNumericTerm> rightPart = [self calculatEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
  if (rightPart == nil) {
    return NO;
  }
  return [((ComIgormaznitsaProlDataTerm *) nil_chk(leftPart)) EquWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *) check_class_cast(rightPart, [ComIgormaznitsaProlDataTerm class])];
}

- (void)predicateTRUEWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
}

- (BOOL)predicateFAILWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  return NO;
}

- (void)predicateNLWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
              withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlIoProlTextWriter> outStream = [((ComIgormaznitsaProlLogicProlContext *) nil_chk([((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getContext])) getCurrentOutStream];
  if (outStream == nil) {
    return;
  }
  @try {
    [((id<ComIgormaznitsaProlIoProlTextWriter>) nil_chk(outStream)) writeCharWithComIgormaznitsaProlDataTerm:ComIgormaznitsaProlLibrariesProlCoreLibrary_NEXT_LINE_];
  }
  @catch (JavaIoIOException *ex) {
    @throw [[ComIgormaznitsaProlExceptionsProlPermissionErrorException alloc] initWithNSString:@"write" withNSString:@"text_output" withComIgormaznitsaProlDataTerm:predicate withJavaLangThrowable:ex];
  }
}

- (void)predicateTABWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
               withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlIoProlTextWriter> outStream = [((ComIgormaznitsaProlLogicProlContext *) nil_chk([((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getContext])) getCurrentOutStream];
  int spaces = [((NSNumber *) nil_chk([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(((id<ComIgormaznitsaProlDataNumericTerm>) check_protocol_cast([((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0], @protocol(ComIgormaznitsaProlDataNumericTerm))))) getNumericValue])) intValue];
  if (outStream == nil) {
    return;
  }
  @try {
    for (int li = 0; li < spaces; li++) {
      [((id<ComIgormaznitsaProlIoProlTextWriter>) nil_chk(outStream)) writeCharWithComIgormaznitsaProlDataTerm:ComIgormaznitsaProlLibrariesProlCoreLibrary_SPACE_];
    }
  }
  @catch (JavaIoIOException *ex) {
    @throw [[ComIgormaznitsaProlExceptionsProlPermissionErrorException alloc] initWithNSString:@"write" withNSString:@"text_output" withComIgormaznitsaProlDataTerm:predicate withJavaLangThrowable:ex];
  }
}

- (BOOL)predicateNOTWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
               withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlLogicGoal *localGoal = [[ComIgormaznitsaProlLogicGoal alloc] initWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0] withComIgormaznitsaProlLogicProlContext:[((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getContext] withComIgormaznitsaProlTraceTraceListener:[goal getTracer]];
  ComIgormaznitsaProlDataTerm *result = [localGoal solve];
  return result == nil;
}

- (BOOL)predicateEQUWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
               withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *left = [((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0];
  ComIgormaznitsaProlDataTerm *right = [predicate getElementWithInt:1];
  return [((ComIgormaznitsaProlDataTerm *) nil_chk(left)) EquWithComIgormaznitsaProlDataTerm:right];
}

- (BOOL)predicateNOTEQUWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                  withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *left = [((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0];
  ComIgormaznitsaProlDataTerm *right = [predicate getElementWithInt:1];
  return ![((ComIgormaznitsaProlDataTerm *) nil_chk(left)) EquWithComIgormaznitsaProlDataTerm:right];
}

- (BOOL)predicateCOPYTERMWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                    withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *left = [((ComIgormaznitsaProlDataTerm *) nil_chk([ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]])) makeClone];
  ComIgormaznitsaProlDataTerm *right = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
  return [((ComIgormaznitsaProlDataTerm *) nil_chk(right)) EquWithComIgormaznitsaProlDataTerm:left];
}

- (BOOL)predicateTimeWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  long long int time = [JavaLangSystem nanoTime];
  BOOL result = [self predicateCALLWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTermStruct:predicate];
  time = (([JavaLangSystem nanoTime] - time) + 500) / 1000;
  id<ComIgormaznitsaProlIoProlTextWriter> outStream = [((ComIgormaznitsaProlLogicProlContext *) nil_chk([((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getContext])) getCurrentOutStream];
  if (outStream != nil) {
    @try {
      [outStream writeTermWithComIgormaznitsaProlDataTerm:[[ComIgormaznitsaProlDataTerm alloc] initWithNSString:[NSString stringWithFormat:@"%% %lld.%lld millisec \n", (time / 1000), (time % 1000)]]];
    }
    @catch (JavaIoIOException *ex) {
      @throw [[ComIgormaznitsaProlExceptionsProlPermissionErrorException alloc] initWithNSString:@"write" withNSString:@"text_output" withComIgormaznitsaProlDataTerm:predicate];
    }
  }
  if (!result) {
    [goal noMoreVariants];
  }
  return result;
}

- (void)predicateCUTWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
               withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
}

- (void)predicateCUTLOCALWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                    withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
}

- (void)predicateREPEATWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                  withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
}

- (BOOL)predicateCannotBeProvenWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                          withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *argument = [((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0];
  ComIgormaznitsaProlLogicGoal *subgoal = [[ComIgormaznitsaProlLogicGoal alloc] initWithComIgormaznitsaProlDataTerm:argument withComIgormaznitsaProlLogicProlContext:[((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getContext] withComIgormaznitsaProlTraceTraceListener:[goal getTracer]];
  return [subgoal solve] == nil;
}

- (BOOL)predicateCLAUSEWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                  withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *head = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  ComIgormaznitsaProlDataTerm *body = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
  ComIgormaznitsaProlDataTermStruct *struct_ = [((ComIgormaznitsaProlDataTerm *) nil_chk(head)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_STRUCT ? (ComIgormaznitsaProlDataTermStruct *) check_class_cast(head, [ComIgormaznitsaProlDataTermStruct class]) : [[ComIgormaznitsaProlDataTermStruct alloc] initWithComIgormaznitsaProlDataTerm:head];
  if ([((ComIgormaznitsaProlLogicProlContext *) nil_chk([((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getContext])) findProcessorWithComIgormaznitsaProlDataTermStruct:struct_] != [ComIgormaznitsaProlLibrariesPredicateProcessor NULL_PROCESSOR]) {
    @throw [[ComIgormaznitsaProlExceptionsProlPermissionErrorException alloc] initWithNSString:@"access" withNSString:@"private_procedure" withComIgormaznitsaProlDataTerm:predicate];
  }
  id<ComIgormaznitsaProlContainersClauseIterator> clIterator = (id<ComIgormaznitsaProlContainersClauseIterator>) check_protocol_cast([goal getAuxObject], @protocol(ComIgormaznitsaProlContainersClauseIterator));
  if (clIterator == nil) {
    clIterator = [((id<ComIgormaznitsaProlContainersKnowledgeBase>) nil_chk([((ComIgormaznitsaProlLogicProlContext *) nil_chk([goal getContext])) getKnowledgeBase])) getClauseIteratorWithComIgormaznitsaProlDataTermStruct:[head getTermType] == ComIgormaznitsaProlDataTerm_TYPE_STRUCT ? (ComIgormaznitsaProlDataTermStruct *) check_class_cast(head, [ComIgormaznitsaProlDataTermStruct class]) : [[ComIgormaznitsaProlDataTermStruct alloc] initWithComIgormaznitsaProlDataTerm:head]];
    if (clIterator == nil || ![clIterator hasNext]) {
      [goal noMoreVariants];
      return NO;
    }
    [goal setAuxObjectWithId:clIterator];
  }
  if ([((id<ComIgormaznitsaProlContainersClauseIterator>) nil_chk(clIterator)) hasNext]) {
    while ([clIterator hasNext]) {
      ComIgormaznitsaProlDataTermStruct *nxtStruct = [clIterator next];
      if (nxtStruct != nil) {
        ComIgormaznitsaProlDataTerm *headClause;
        ComIgormaznitsaProlDataTerm *bodyClause;
        if ([nxtStruct isFunctorLikeRuleDefinition]) {
          headClause = [nxtStruct getElementWithInt:0];
          bodyClause = [nxtStruct getElementWithInt:1];
        }
        else {
          headClause = nxtStruct;
          bodyClause = ComIgormaznitsaProlLibrariesProlCoreLibrary_TRUE__;
        }
        if ([((ComIgormaznitsaProlDataTerm *) nil_chk(headClause)) equWithoutSetWithComIgormaznitsaProlDataTerm:head] && [((ComIgormaznitsaProlDataTerm *) nil_chk(bodyClause)) equWithoutSetWithComIgormaznitsaProlDataTerm:body]) {
          if (!([headClause EquWithComIgormaznitsaProlDataTerm:head] && [bodyClause EquWithComIgormaznitsaProlDataTerm:body])) {
            @throw [[ComIgormaznitsaProlExceptionsProlCriticalError alloc] initWithNSString:@"Impossible state at clause/2 #982342"];
          }
          return YES;
        }
      }
    }
  }
  [goal noMoreVariants];
  return NO;
}

- (BOOL)predicateCURRENTOPWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                     withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *priority = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  ComIgormaznitsaProlDataTerm *specifier = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
  ComIgormaznitsaProlDataTerm *name = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:2]];
  IOSObjectArray *auxObject = (IOSObjectArray *) check_class_cast([((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getAuxObject], [IOSObjectArray class]);
  if (auxObject == nil) {
    id<JavaUtilIterator> operator_iterator = [((id<ComIgormaznitsaProlContainersKnowledgeBase>) nil_chk([((ComIgormaznitsaProlLogicProlContext *) nil_chk([goal getContext])) getKnowledgeBase])) getOperatorIterator];
    auxObject = [IOSObjectArray arrayWithObjects:(id[]){ operator_iterator, nil, nil } count:3 type:[IOSClass classWithClass:[NSObject class]]];
    [goal setAuxObjectWithId:auxObject];
  }
  id<JavaUtilIterator> operator_iterator = (id<JavaUtilIterator>) check_protocol_cast(IOSObjectArray_Get(nil_chk(auxObject), 0), @protocol(JavaUtilIterator));
  ComIgormaznitsaProlContainersOperatorContainer *last_container = (ComIgormaznitsaProlContainersOperatorContainer *) check_class_cast(IOSObjectArray_Get(auxObject, 1), [ComIgormaznitsaProlContainersOperatorContainer class]);
  ComIgormaznitsaProlDataOperator *last_operator = (ComIgormaznitsaProlDataOperator *) check_class_cast(IOSObjectArray_Get(auxObject, 2), [ComIgormaznitsaProlDataOperator class]);
  NSString *opNameVal = [((ComIgormaznitsaProlDataTerm *) nil_chk(name)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_ATOM ? [name getText] : nil;
  int typeVal = [((ComIgormaznitsaProlDataTerm *) nil_chk(specifier)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_ATOM ? [ComIgormaznitsaProlDataOperator getTypeFromStringWithNSString:[specifier getText]] : -1;
  int priorityVal = 0;
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(priority)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_ATOM) {
    priorityVal = [((NSNumber *) nil_chk([((ComIgormaznitsaProlDataTermInteger *) check_class_cast(priority, [ComIgormaznitsaProlDataTermInteger class])) getNumericValue])) intValue];
    if (priorityVal < 1 || priorityVal > 1200) {
      @throw [[ComIgormaznitsaProlExceptionsProlDomainErrorException alloc] initWithNSString:@"Unsupported operator priority" withComIgormaznitsaProlDataTerm:predicate];
    }
  }
  while (YES) {
    if (last_container == nil) {
      while ([((id<JavaUtilIterator>) nil_chk(operator_iterator)) hasNext]) {
        last_container = [operator_iterator next];
        if (opNameVal != nil) {
          if ([((NSString *) nil_chk([((ComIgormaznitsaProlContainersOperatorContainer *) nil_chk(last_container)) getText])) isEqual:opNameVal]) {
            break;
          }
        }
        else {
          break;
        }
      }
      if (last_container == nil) {
        [goal noMoreVariants];
        [goal setAuxObjectWithId:nil];
        return NO;
      }
    }
    if (typeVal < 0) {
      int typestart = last_operator == nil ? 0 : [last_operator getOperatorType] + 1;
      for (int li = typestart; li < 7; li++) {
        last_operator = [((ComIgormaznitsaProlContainersOperatorContainer *) nil_chk(last_container)) getForTypePreciselyWithInt:li];
        if (last_operator != nil) {
          break;
        }
      }
    }
    else {
      ComIgormaznitsaProlDataOperator *op = [((ComIgormaznitsaProlContainersOperatorContainer *) nil_chk(last_container)) getForTypePreciselyWithInt:typeVal];
      if (op == last_operator) {
        last_operator = nil;
      }
    }
    if (last_operator != nil) {
      if (priorityVal > 0) {
        if ([last_operator getPriority] != priorityVal) {
          continue;
        }
      }
    }
    else {
      last_container = nil;
      continue;
    }
    (void) IOSObjectArray_Set(auxObject, 1, last_container);
    (void) IOSObjectArray_Set(auxObject, 2, last_operator);
    ComIgormaznitsaProlDataTerm *priorityOfFound = [[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:[((ComIgormaznitsaProlDataOperator *) nil_chk(last_operator)) getPriority]];
    ComIgormaznitsaProlDataTerm *specifierOfFound = [[ComIgormaznitsaProlDataTerm alloc] initWithNSString:[last_operator getTypeAsString]];
    ComIgormaznitsaProlDataTerm *nameOfFound = [[ComIgormaznitsaProlDataTerm alloc] initWithNSString:[last_operator getText]];
    if (!([((ComIgormaznitsaProlDataTerm *) nil_chk([predicate getElementWithInt:0])) EquWithComIgormaznitsaProlDataTerm:priorityOfFound] && [((ComIgormaznitsaProlDataTerm *) nil_chk([predicate getElementWithInt:1])) EquWithComIgormaznitsaProlDataTerm:specifierOfFound] && [((ComIgormaznitsaProlDataTerm *) nil_chk([predicate getElementWithInt:2])) EquWithComIgormaznitsaProlDataTerm:nameOfFound])) {
      [goal noMoreVariants];
      [goal setAuxObjectWithId:nil];
      return NO;
    }
    else {
      return YES;
    }
  }
}

- (BOOL)predicateOPWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
              withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  int priority = [((NSNumber *) nil_chk([((ComIgormaznitsaProlDataTermInteger *) nil_chk(((ComIgormaznitsaProlDataTermInteger *) check_class_cast([ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]], [ComIgormaznitsaProlDataTermInteger class])))) getNumericValue])) intValue];
  NSString *specifier = [((ComIgormaznitsaProlDataTerm *) nil_chk([ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]])) getText];
  ComIgormaznitsaProlDataTerm *atomOrList = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:2]];
  if (priority < 0 || priority > 1200) {
    @throw [[ComIgormaznitsaProlExceptionsProlDomainErrorException alloc] initWithNSString:@"Priority must be between 0 and 1200 inclusive" withComIgormaznitsaProlDataTerm:predicate];
  }
  int opType = [ComIgormaznitsaProlDataOperator getTypeFromStringWithNSString:specifier];
  if (opType < 0) {
    @throw [[ComIgormaznitsaProlExceptionsProlDomainErrorException alloc] initWithNSString:@"Wrong operator specifier" withComIgormaznitsaProlDataTerm:predicate];
  }
  JavaUtilArrayList *names = [[JavaUtilArrayList alloc] init];
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(atomOrList)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_LIST) {
    ComIgormaznitsaProlDataTermList *list = (ComIgormaznitsaProlDataTermList *) check_class_cast(atomOrList, [ComIgormaznitsaProlDataTermList class]);
    while (![list isNullList]) {
      ComIgormaznitsaProlDataTerm *atom = [list getHead];
      if (([atom conformsToProtocol: @protocol(ComIgormaznitsaProlDataNumericTerm)]) || [((ComIgormaznitsaProlDataTerm *) nil_chk(atom)) getTermType] != ComIgormaznitsaProlDataTerm_TYPE_ATOM) {
        @throw [[ComIgormaznitsaProlExceptionsProlDomainErrorException alloc] initWithNSString:@"Impossible operator name" withComIgormaznitsaProlDataTerm:predicate];
      }
      [names addWithId:[((ComIgormaznitsaProlDataTerm *) nil_chk(atom)) getText]];
      atom = [list getTail];
      if ([((ComIgormaznitsaProlDataTerm *) nil_chk(atom)) getTermType] != ComIgormaznitsaProlDataTerm_TYPE_LIST) {
        @throw [[ComIgormaznitsaProlExceptionsProlDomainErrorException alloc] initWithNSString:@"Unsuppoerted atom list format" withComIgormaznitsaProlDataTerm:predicate];
      }
      list = (ComIgormaznitsaProlDataTermList *) check_class_cast(atom, [ComIgormaznitsaProlDataTermList class]);
    }
  }
  else {
    [names addWithId:[atomOrList getText]];
  }
  id<ComIgormaznitsaProlContainersKnowledgeBase> base = [((ComIgormaznitsaProlLogicProlContext *) nil_chk([((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getContext])) getKnowledgeBase];
  @try {
    if (priority == 0) {
      for (NSString * __strong name in names) {
        [((id<ComIgormaznitsaProlContainersKnowledgeBase>) nil_chk(base)) removeOperatorWithNSString:name withInt:opType];
      }
    }
    else {
      for (NSString * __strong name in names) {
        [((id<ComIgormaznitsaProlContainersKnowledgeBase>) nil_chk(base)) addOperatorWithComIgormaznitsaProlDataOperator:[[ComIgormaznitsaProlDataOperator alloc] initWithInt:priority withInt:opType withNSString:name]];
      }
    }
  }
  @catch (JavaLangSecurityException *ex) {
    @throw [[ComIgormaznitsaProlExceptionsProlPermissionErrorException alloc] initWithNSString:@"create" withNSString:@"operator" withNSString:@"Attemption to override or remove a system operator" withComIgormaznitsaProlDataTerm:predicate];
  }
  return YES;
}

- (BOOL)predicateCALLWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlLogicGoal *currentgoal = (ComIgormaznitsaProlLogicGoal *) check_class_cast([((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getAuxObject], [ComIgormaznitsaProlLogicGoal class]);
  ComIgormaznitsaProlDataTerm *argument = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  if (currentgoal == nil) {
    currentgoal = [[ComIgormaznitsaProlLogicGoal alloc] initWithComIgormaznitsaProlDataTerm:argument withComIgormaznitsaProlLogicProlContext:[goal getContext] withComIgormaznitsaProlTraceTraceListener:[goal getTracer]];
    [goal setAuxObjectWithId:currentgoal];
  }
  ComIgormaznitsaProlDataTerm *nextResult = [((ComIgormaznitsaProlLogicGoal *) nil_chk(currentgoal)) solve];
  BOOL result = NO;
  if (nextResult != nil) {
    if (![((ComIgormaznitsaProlDataTerm *) nil_chk(argument)) EquWithComIgormaznitsaProlDataTerm:nextResult]) {
      @throw [[ComIgormaznitsaProlExceptionsProlCriticalError alloc] initWithNSString:@"Can't make equ for result of CALL"];
    }
    if ([currentgoal isCompleted]) {
      [goal noMoreVariants];
    }
    result = YES;
  }
  return result;
}

- (BOOL)predicateONCEWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *argument = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  ComIgormaznitsaProlLogicGoal *currentgoal = [[ComIgormaznitsaProlLogicGoal alloc] initWithComIgormaznitsaProlDataTerm:argument withComIgormaznitsaProlLogicProlContext:[((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getContext] withComIgormaznitsaProlTraceTraceListener:[goal getTracer]];
  ComIgormaznitsaProlDataTerm *nextResult = [currentgoal solve];
  return nextResult != nil;
}

- (void)predicateORWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
              withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
}

- (BOOL)predicateIFTHENWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                  withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlLogicGoal *leftSubbranch = [[ComIgormaznitsaProlLogicGoal alloc] initWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0] withComIgormaznitsaProlLogicProlContext:[((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getContext] withComIgormaznitsaProlTraceTraceListener:[goal getTracer]];
  BOOL result = NO;
  if ([leftSubbranch solve] != nil) {
    ComIgormaznitsaProlLogicGoal *thenPart = [goal replaceLastGoalAtChainWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
    [((ComIgormaznitsaProlLogicGoal *) nil_chk(thenPart)) cutLocal];
    result = YES;
  }
  else {
    [goal noMoreVariants];
  }
  return result;
}

- (void)predicateANDWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
               withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
}

- (BOOL)predicateVARWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
               withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *arg = [((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0];
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(arg)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_VAR) {
    return [((ComIgormaznitsaProlDataVar *) check_class_cast(arg, [ComIgormaznitsaProlDataVar class])) isUndefined];
  }
  else {
    return NO;
  }
}

- (BOOL)predicateNONVARWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                  withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *arg = [((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0];
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(arg)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_VAR) {
    return ![((ComIgormaznitsaProlDataVar *) check_class_cast(arg, [ComIgormaznitsaProlDataVar class])) isUndefined];
  }
  else {
    return YES;
  }
}

- (BOOL)predicateATOMWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *arg = [((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0];
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(arg)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_VAR) {
    arg = [((ComIgormaznitsaProlDataVar *) check_class_cast(arg, [ComIgormaznitsaProlDataVar class])) getValue];
    if (arg == nil) {
      return NO;
    }
  }
  BOOL result = NO;
  switch ([((ComIgormaznitsaProlDataTerm *) nil_chk(arg)) getTermType]) {
    case ComIgormaznitsaProlDataTerm_TYPE_ATOM:
    {
      result = !([arg conformsToProtocol: @protocol(ComIgormaznitsaProlDataNumericTerm)]);
    }
    break;
    case ComIgormaznitsaProlDataTerm_TYPE_LIST:
    {
      result = [((ComIgormaznitsaProlDataTermList *) check_class_cast(arg, [ComIgormaznitsaProlDataTermList class])) isNullList];
    }
    break;
  }
  return result;
}

- (BOOL)predicateINTEGERWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                   withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *arg = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(arg)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_ATOM) {
    return [arg isKindOfClass:[ComIgormaznitsaProlDataTermInteger class]];
  }
  else {
    return NO;
  }
}

- (BOOL)predicateNUMBERWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                  withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *arg = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  return ([((ComIgormaznitsaProlDataTerm *) nil_chk(arg)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_ATOM) && ([arg conformsToProtocol: @protocol(ComIgormaznitsaProlDataNumericTerm)]);
}

- (BOOL)predicateFLOATWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                 withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *arg = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(arg)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_ATOM) {
    return [arg isKindOfClass:[ComIgormaznitsaProlDataTermFloat class]];
  }
  else {
    return NO;
  }
}

- (BOOL)predicateCOMPOUNDWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                    withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *atom = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  switch ([((ComIgormaznitsaProlDataTerm *) nil_chk(atom)) getTermType]) {
    case ComIgormaznitsaProlDataTerm_TYPE_STRUCT:
    return YES;
    case ComIgormaznitsaProlDataTerm_TYPE_LIST:
    return ![((ComIgormaznitsaProlDataTermList *) check_class_cast(atom, [ComIgormaznitsaProlDataTermList class])) isNullList];
    default:
    return NO;
  }
}

- (BOOL)predicateATOMICWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                  withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *arg = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  BOOL result = NO;
  switch ([((ComIgormaznitsaProlDataTerm *) nil_chk(arg)) getTermType]) {
    case ComIgormaznitsaProlDataTerm_TYPE_ATOM:
    {
      result = YES;
    }
    break;
    case ComIgormaznitsaProlDataTerm_TYPE_LIST:
    {
      result = [((ComIgormaznitsaProlDataTermList *) check_class_cast(arg, [ComIgormaznitsaProlDataTermList class])) isNullList];
    }
    break;
  }
  return result;
}

- (BOOL)predicateARGWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
               withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTermInteger *number = (ComIgormaznitsaProlDataTermInteger *) check_class_cast([ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]], [ComIgormaznitsaProlDataTermInteger class]);
  ComIgormaznitsaProlDataTerm *compound_term = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
  ComIgormaznitsaProlDataTerm *element = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:2]];
  int index = [((NSNumber *) nil_chk([((ComIgormaznitsaProlDataTermInteger *) nil_chk(number)) getNumericValue])) intValue];
  if (index < 0) {
    @throw [[ComIgormaznitsaProlExceptionsProlDomainErrorException alloc] initWithNSString:@"Element number less than zero" withComIgormaznitsaProlDataTerm:number];
  }
  if (index == 0) {
    return NO;
  }
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(compound_term)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_STRUCT) {
    ComIgormaznitsaProlDataTermStruct *struct_ = (ComIgormaznitsaProlDataTermStruct *) check_class_cast(compound_term, [ComIgormaznitsaProlDataTermStruct class]);
    int elementIndex = index - 1;
    if (elementIndex >= [struct_ getArity]) {
      return NO;
    }
    return [((ComIgormaznitsaProlDataTerm *) nil_chk(element)) EquWithComIgormaznitsaProlDataTerm:[struct_ getElementWithInt:elementIndex]];
  }
  else {
    return NO;
  }
}

- (BOOL)predicateFUNCTORWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                   withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *argTerm = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  ComIgormaznitsaProlDataTerm *argName = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
  ComIgormaznitsaProlDataTerm *argArity = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:2]];
  switch ([((ComIgormaznitsaProlDataTerm *) nil_chk(argTerm)) getTermType]) {
    case ComIgormaznitsaProlDataTerm_TYPE_ATOM:
    {
      ComIgormaznitsaProlDataTerm *arity = [[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:0];
      return [((ComIgormaznitsaProlDataTerm *) nil_chk(argName)) EquWithComIgormaznitsaProlDataTerm:argTerm] && [((ComIgormaznitsaProlDataTerm *) nil_chk(argArity)) EquWithComIgormaznitsaProlDataTerm:arity];
    }
    case ComIgormaznitsaProlDataTerm_TYPE_STRUCT:
    {
      ComIgormaznitsaProlDataTermStruct *struct_ = (ComIgormaznitsaProlDataTermStruct *) check_class_cast(argTerm, [ComIgormaznitsaProlDataTermStruct class]);
      ComIgormaznitsaProlDataTerm *functor = [[ComIgormaznitsaProlDataTerm alloc] initWithNSString:[((ComIgormaznitsaProlDataTerm *) nil_chk([struct_ getFunctor])) getText]];
      ComIgormaznitsaProlDataTerm *arity = [[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:[struct_ getArity]];
      return [((ComIgormaznitsaProlDataTerm *) nil_chk(argName)) EquWithComIgormaznitsaProlDataTerm:functor] && [((ComIgormaznitsaProlDataTerm *) nil_chk(argArity)) EquWithComIgormaznitsaProlDataTerm:arity];
    }
    case ComIgormaznitsaProlDataTerm_TYPE_LIST:
    {
      ComIgormaznitsaProlDataTermList *list = (ComIgormaznitsaProlDataTermList *) check_class_cast(argTerm, [ComIgormaznitsaProlDataTermList class]);
      ComIgormaznitsaProlDataTerm *name;
      ComIgormaznitsaProlDataTerm *arity;
      if ([list isNullList]) {
        arity = [[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:0];
        name = [ComIgormaznitsaProlDataTermList NULLLIST];
      }
      else {
        arity = [[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:2];
        name = [ComIgormaznitsaProlDataTermList LIST_FUNCTOR_AS_TERM];
      }
      return [((ComIgormaznitsaProlDataTerm *) nil_chk(argName)) EquWithComIgormaznitsaProlDataTerm:name] && [((ComIgormaznitsaProlDataTerm *) nil_chk(argArity)) EquWithComIgormaznitsaProlDataTerm:arity];
    }
    case ComIgormaznitsaProlDataTerm_TYPE_VAR:
    {
      int arity = [((NSNumber *) nil_chk([((ComIgormaznitsaProlDataTermInteger *) nil_chk(((ComIgormaznitsaProlDataTermInteger *) check_class_cast(argArity, [ComIgormaznitsaProlDataTermInteger class])))) getNumericValue])) intValue];
      if (arity < 0) {
        @throw [[ComIgormaznitsaProlExceptionsProlRepresentationErrorException alloc] initWithNSString:@"Wrong arity value" withComIgormaznitsaProlDataTerm:predicate];
      }
      if ([argName conformsToProtocol: @protocol(ComIgormaznitsaProlDataNumericTerm)]) {
        if (arity == 0) {
          return [argTerm EquWithComIgormaznitsaProlDataTerm:argName];
        }
        else {
          @throw [[ComIgormaznitsaProlExceptionsProlTypeErrorException alloc] initWithNSString:@"atom" withComIgormaznitsaProlDataTerm:predicate];
        }
      }
      IOSObjectArray *elements = nil;
      if (arity > 0) {
        elements = [IOSObjectArray arrayWithLength:arity type:[IOSClass classWithClass:[ComIgormaznitsaProlDataTerm class]]];
        for (int li = 0; li < arity; li++) {
          (void) IOSObjectArray_Set(elements, li, [[ComIgormaznitsaProlDataVar alloc] init]);
        }
      }
      ComIgormaznitsaProlDataTermStruct *newStruct = [[ComIgormaznitsaProlDataTermStruct alloc] initWithComIgormaznitsaProlDataTerm:argName withComIgormaznitsaProlDataTermArray:elements];
      return [argTerm EquWithComIgormaznitsaProlDataTerm:newStruct];
    }
    default:
    @throw [[ComIgormaznitsaProlExceptionsProlCriticalError alloc] initWithNSString:@"Unsupported type found!"];
  }
}

- (BOOL)predicateUNIVWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *argLeft = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  ComIgormaznitsaProlDataTerm *argRight = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(argRight)) getTermType] != ComIgormaznitsaProlDataTerm_TYPE_VAR) {
    ComIgormaznitsaProlDataTerm *atom = [ComIgormaznitsaProlUtilsUtils getListAsAtomWithComIgormaznitsaProlLogicProlContext:[((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getContext] withComIgormaznitsaProlDataTermList:(ComIgormaznitsaProlDataTermList *) check_class_cast(argRight, [ComIgormaznitsaProlDataTermList class])];
    return [((ComIgormaznitsaProlDataTerm *) nil_chk(argLeft)) EquWithComIgormaznitsaProlDataTerm:atom];
  }
  else {
    ComIgormaznitsaProlDataTermList *lst = [ComIgormaznitsaProlUtilsUtils unrollTermIntoListWithComIgormaznitsaProlDataTerm:argLeft];
    return [argRight EquWithComIgormaznitsaProlDataTerm:lst];
  }
}

- (BOOL)predicateTIMEWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  JavaUtilCalendar *date = [JavaUtilCalendar getInstance];
  ComIgormaznitsaProlDataTermInteger *hours = [[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:[((JavaUtilCalendar *) nil_chk(date)) getWithInt:JavaUtilCalendar_HOUR_OF_DAY]];
  ComIgormaznitsaProlDataTermInteger *minutes = [[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:[date getWithInt:JavaUtilCalendar_MINUTE]];
  ComIgormaznitsaProlDataTermInteger *seconds = [[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:[date getWithInt:JavaUtilCalendar_SECOND]];
  ComIgormaznitsaProlDataTermInteger *milliseconds = [[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:[date getWithInt:JavaUtilCalendar_MILLISECOND]];
  return [((ComIgormaznitsaProlDataTerm *) nil_chk([((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0])) EquWithComIgormaznitsaProlDataTerm:hours] && [((ComIgormaznitsaProlDataTerm *) nil_chk([predicate getElementWithInt:1])) EquWithComIgormaznitsaProlDataTerm:minutes] && [((ComIgormaznitsaProlDataTerm *) nil_chk([predicate getElementWithInt:2])) EquWithComIgormaznitsaProlDataTerm:seconds] && [((ComIgormaznitsaProlDataTerm *) nil_chk([predicate getElementWithInt:3])) EquWithComIgormaznitsaProlDataTerm:milliseconds];
}

- (BOOL)predicateDATEWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  JavaUtilCalendar *date = [JavaUtilCalendar getInstance];
  ComIgormaznitsaProlDataTermInteger *year = [[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:[((JavaUtilCalendar *) nil_chk(date)) getWithInt:JavaUtilCalendar_YEAR]];
  ComIgormaznitsaProlDataTermInteger *month = [[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:[date getWithInt:JavaUtilCalendar_MONTH] + 1];
  ComIgormaznitsaProlDataTermInteger *day = [[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:[date getWithInt:JavaUtilCalendar_DAY_OF_MONTH]];
  return [((ComIgormaznitsaProlDataTerm *) nil_chk([((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0])) EquWithComIgormaznitsaProlDataTerm:year] && [((ComIgormaznitsaProlDataTerm *) nil_chk([predicate getElementWithInt:1])) EquWithComIgormaznitsaProlDataTerm:month] && [((ComIgormaznitsaProlDataTerm *) nil_chk([predicate getElementWithInt:2])) EquWithComIgormaznitsaProlDataTerm:day];
}

- (void)predicateWriteWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                 withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlIoProlTextWriter> outStream = [((ComIgormaznitsaProlLogicProlContext *) nil_chk([((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getContext])) getCurrentOutStream];
  if (outStream == nil) {
    return;
  }
  @try {
    [((id<ComIgormaznitsaProlIoProlTextWriter>) nil_chk(outStream)) writeTermWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  }
  @catch (JavaIoIOException *ex) {
    @throw [[ComIgormaznitsaProlExceptionsProlPermissionErrorException alloc] initWithNSString:@"write" withNSString:@"text_output" withComIgormaznitsaProlDataTerm:predicate withJavaLangThrowable:ex];
  }
}

- (void)predicatePUTWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
               withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *arg = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  id<ComIgormaznitsaProlIoProlTextWriter> outStream = [((ComIgormaznitsaProlLogicProlContext *) nil_chk([((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getContext])) getCurrentOutStream];
  if (outStream == nil) {
    return;
  }
  @try {
    [((id<ComIgormaznitsaProlIoProlTextWriter>) nil_chk(outStream)) writeCharWithComIgormaznitsaProlDataTerm:arg];
  }
  @catch (JavaIoIOException *ex) {
    @throw [[ComIgormaznitsaProlExceptionsProlPermissionErrorException alloc] initWithNSString:@"write" withNSString:@"text_output" withComIgormaznitsaProlDataTerm:predicate withJavaLangThrowable:ex];
  }
}

- (BOOL)predicateGETWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
               withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *arg = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  id<ComIgormaznitsaProlIoProlTextReader> inStream = [((ComIgormaznitsaProlLogicProlContext *) nil_chk([((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getContext])) getCurrentInputStream];
  if (inStream == nil) {
    @throw [[ComIgormaznitsaProlExceptionsProlPermissionErrorException alloc] initWithNSString:@"read" withNSString:@"text_input" withComIgormaznitsaProlDataTerm:predicate];
  }
  @try {
    ComIgormaznitsaProlDataTerm *nextchar = [((id<ComIgormaznitsaProlIoProlTextReader>) nil_chk(inStream)) readChar];
    return [((ComIgormaznitsaProlDataTerm *) nil_chk(arg)) EquWithComIgormaznitsaProlDataTerm:nextchar];
  }
  @catch (JavaIoIOException *ex) {
    @throw [[ComIgormaznitsaProlExceptionsProlPermissionErrorException alloc] initWithNSString:@"write" withNSString:@"text_output" withComIgormaznitsaProlDataTerm:predicate withJavaLangThrowable:ex];
  }
}

- (BOOL)predicateGET0WithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *arg = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  id<ComIgormaznitsaProlIoProlTextReader> inStream = [((ComIgormaznitsaProlLogicProlContext *) nil_chk([((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getContext])) getCurrentInputStream];
  if (inStream == nil) {
    @throw [[ComIgormaznitsaProlExceptionsProlPermissionErrorException alloc] initWithNSString:@"read" withNSString:@"text_input" withComIgormaznitsaProlDataTerm:predicate];
  }
  @try {
    while (YES) {
      ComIgormaznitsaProlDataTermInteger *nextchar = [((id<ComIgormaznitsaProlIoProlTextReader>) nil_chk(inStream)) readChar];
      int num = [((NSNumber *) nil_chk([((ComIgormaznitsaProlDataTermInteger *) nil_chk(nextchar)) getNumericValue])) intValue];
      if (num >= 0 && [JavaLangCharacter isSpaceCharWithChar:(unichar) num]) {
        continue;
      }
      return [((ComIgormaznitsaProlDataTerm *) nil_chk(arg)) EquWithComIgormaznitsaProlDataTerm:nextchar];
    }
  }
  @catch (JavaIoIOException *ex) {
    @throw [[ComIgormaznitsaProlExceptionsProlPermissionErrorException alloc] initWithNSString:@"write" withNSString:@"text_output" withComIgormaznitsaProlDataTerm:predicate withJavaLangThrowable:ex];
  }
}

- (BOOL)predicateReadWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *arg = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  id<ComIgormaznitsaProlIoProlTextReader> outStream = [((ComIgormaznitsaProlLogicProlContext *) nil_chk([((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getContext])) getCurrentInputStream];
  if (outStream == nil) {
    @throw [[ComIgormaznitsaProlExceptionsProlPermissionErrorException alloc] initWithNSString:@"read" withNSString:@"text_input" withComIgormaznitsaProlDataTerm:predicate];
  }
  @try {
    ComIgormaznitsaProlDataTerm *term = [((id<ComIgormaznitsaProlIoProlTextReader>) nil_chk(outStream)) readTerm];
    if (term == nil) {
      term = [ComIgormaznitsaProlIoProlStream END_OF_FILE];
    }
    return [((ComIgormaznitsaProlDataTerm *) nil_chk(arg)) EquWithComIgormaznitsaProlDataTerm:term];
  }
  @catch (JavaIoIOException *ex) {
    @throw [[ComIgormaznitsaProlExceptionsProlPermissionErrorException alloc] initWithNSString:@"read" withNSString:@"text_input" withComIgormaznitsaProlDataTerm:predicate withJavaLangThrowable:ex];
  }
}

- (NSString *)readFromCurrentInputStreamUntilNLWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                                          withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlIoProlTextReader> outStream = [((ComIgormaznitsaProlLogicProlContext *) nil_chk([((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getContext])) getCurrentInputStream];
  if (outStream == nil) {
    @throw [[ComIgormaznitsaProlExceptionsProlPermissionErrorException alloc] initWithNSString:@"read" withNSString:@"text_input" withComIgormaznitsaProlDataTerm:predicate];
  }
  @try {
    JavaLangStringBuilder *builder = [[JavaLangStringBuilder alloc] init];
    BOOL working = YES;
    while (working) {
      ComIgormaznitsaProlDataTermInteger *integer = [((id<ComIgormaznitsaProlIoProlTextReader>) nil_chk(outStream)) readChar];
      int code = [((NSNumber *) nil_chk([((ComIgormaznitsaProlDataTermInteger *) nil_chk(integer)) getNumericValue])) intValue];
      switch (code) {
        case -1:
        {
          if ([builder sequenceLength] <= 0) {
            [builder setLengthWithInt:0];
            (void) [builder appendWithNSString:[ComIgormaznitsaProlIoProlStream END_OF_FILE_STR]];
          }
          working = NO;
        }
        break;
        case 0x000d:
        {
        }
        break;
        case 0x000a:
        {
          working = NO;
        }
        break;
        case 8:
        {
          if ([builder sequenceLength] > 0) {
            [builder setLengthWithInt:[builder sequenceLength] - 1];
          }
        }
        break;
        default:
        {
          (void) [builder appendWithChar:(unichar) code];
        }
        break;
      }
    }
    return [builder description];
  }
  @catch (JavaIoIOException *ex) {
    @throw [[ComIgormaznitsaProlExceptionsProlPermissionErrorException alloc] initWithNSString:@"read" withNSString:@"text_input" withComIgormaznitsaProlDataTerm:predicate withJavaLangThrowable:ex];
  }
}

- (BOOL)predicateReadLnWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                  withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *arg = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  return [((ComIgormaznitsaProlDataTerm *) nil_chk(arg)) EquWithComIgormaznitsaProlDataTerm:[[ComIgormaznitsaProlDataTerm alloc] initWithNSString:[self readFromCurrentInputStreamUntilNLWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTermStruct:predicate]]];
}

- (BOOL)predicateReadIntWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                   withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *arg = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  NSString *str = [((NSString *) nil_chk([self readFromCurrentInputStreamUntilNLWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTermStruct:predicate])) trim];
  ComIgormaznitsaProlDataTerm *term;
  if ([((NSString *) nil_chk(str)) isEqual:[ComIgormaznitsaProlIoProlStream END_OF_FILE_STR]]) {
    term = [ComIgormaznitsaProlIoProlStream END_OF_FILE];
  }
  else {
    @try {
      term = [[ComIgormaznitsaProlDataTermInteger alloc] initWithNSString:str];
    }
    @catch (JavaLangNumberFormatException *ex) {
      return NO;
    }
  }
  return [((ComIgormaznitsaProlDataTerm *) nil_chk(arg)) EquWithComIgormaznitsaProlDataTerm:term];
}

- (BOOL)predicateReadRealWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                    withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *arg = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  NSString *str = [((NSString *) nil_chk([self readFromCurrentInputStreamUntilNLWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTermStruct:predicate])) trim];
  ComIgormaznitsaProlDataTerm *term = nil;
  if ([((NSString *) nil_chk(str)) isEqual:[ComIgormaznitsaProlIoProlStream END_OF_FILE_STR]]) {
    term = [ComIgormaznitsaProlIoProlStream END_OF_FILE];
  }
  else {
    @try {
      term = [[ComIgormaznitsaProlDataTermFloat alloc] initWithNSString:str];
    }
    @catch (JavaLangNumberFormatException *ex) {
      return NO;
    }
  }
  return [((ComIgormaznitsaProlDataTerm *) nil_chk(arg)) EquWithComIgormaznitsaProlDataTerm:term];
}

- (BOOL)consultFromResourceWithNSString:(NSString *)resource
withComIgormaznitsaProlLogicProlContext:(ComIgormaznitsaProlLogicProlContext *)context
withComIgormaznitsaProlIoProlStreamManager:(id<ComIgormaznitsaProlIoProlStreamManager>)streamManager {
  JavaIoReader *reader = nil;
  @try {
    reader = [((id<ComIgormaznitsaProlIoProlStreamManager>) nil_chk(streamManager)) getReaderForResourceWithNSString:resource];
    ComIgormaznitsaProlParserProlConsult *consulter = [[ComIgormaznitsaProlParserProlConsult alloc] initWithJavaIoReader:reader withComIgormaznitsaProlLogicProlContext:context];
    [consulter consult];
    return YES;
  }
  @catch (JavaIoIOException *ex) {
    [((JavaUtilLoggingLogger *) nil_chk(ComIgormaznitsaProlLibrariesProlCoreLibrary_LOG_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel WARNING] withNSString:@"consultFromResource()" withJavaLangThrowable:ex];
    return NO;
  }
  @finally {
    if (reader != nil) {
      @try {
        [reader close];
      }
      @catch (JavaLangException *ex) {
        [((JavaUtilLoggingLogger *) nil_chk(ComIgormaznitsaProlLibrariesProlCoreLibrary_LOG_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel WARNING] withNSString:@"consultFromResource()" withJavaLangThrowable:ex];
      }
    }
  }
}

- (BOOL)predicateCONSULTWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                   withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *term = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  ComIgormaznitsaProlLogicProlContext *ctxt = [((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getContext];
  id<ComIgormaznitsaProlIoProlStreamManager> streamManager = [((ComIgormaznitsaProlLogicProlContext *) nil_chk(ctxt)) getStreamManager];
  switch ([((ComIgormaznitsaProlDataTerm *) nil_chk(term)) getTermType]) {
    case ComIgormaznitsaProlDataTerm_TYPE_ATOM:
    {
      NSString *name = [term getText];
      return [self consultFromResourceWithNSString:name withComIgormaznitsaProlLogicProlContext:ctxt withComIgormaznitsaProlIoProlStreamManager:streamManager];
    }
    case ComIgormaznitsaProlDataTerm_TYPE_LIST:
    {
      ComIgormaznitsaProlDataTermList *list = (ComIgormaznitsaProlDataTermList *) check_class_cast(term, [ComIgormaznitsaProlDataTermList class]);
      while (YES) {
        if ([list isNullList]) {
          return YES;
        }
        ComIgormaznitsaProlDataTerm *headterm = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[list getHead]];
        ComIgormaznitsaProlDataTerm *tailTerm = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[list getTail]];
        if ([((ComIgormaznitsaProlDataTerm *) nil_chk(tailTerm)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_LIST) {
          list = (ComIgormaznitsaProlDataTermList *) check_class_cast(tailTerm, [ComIgormaznitsaProlDataTermList class]);
        }
        else {
          return NO;
        }
        NSString *name = [((ComIgormaznitsaProlDataTerm *) nil_chk(headterm)) getText];
        if (![self consultFromResourceWithNSString:name withComIgormaznitsaProlLogicProlContext:ctxt withComIgormaznitsaProlIoProlStreamManager:streamManager]) {
          return NO;
        }
      }
    }
    default:
    return NO;
  }
}

- (void)predicateSEEWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
               withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *arg = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  NSString *name = [((ComIgormaznitsaProlDataTerm *) nil_chk(arg)) getText];
  @try {
    [((ComIgormaznitsaProlLogicProlContext *) nil_chk([((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getContext])) seeWithNSString:name];
  }
  @catch (JavaIoIOException *ex) {
    if ([ex isKindOfClass:[JavaIoFileNotFoundException class]]) {
      @throw [[ComIgormaznitsaProlExceptionsProlExistenceErrorException alloc] initWithNSString:@"source_sink" withComIgormaznitsaProlDataTerm:predicate withJavaLangThrowable:ex];
    }
    else {
      @throw [[ComIgormaznitsaProlExceptionsProlPermissionErrorException alloc] initWithNSString:@"create" withNSString:@"text_stream" withComIgormaznitsaProlDataTerm:predicate withJavaLangThrowable:ex];
    }
  }
}

- (void)predicateSEENWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  @try {
    [((ComIgormaznitsaProlLogicProlContext *) nil_chk([((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getContext])) seen];
  }
  @catch (JavaIoIOException *ex) {
    @throw [[ComIgormaznitsaProlExceptionsProlPermissionErrorException alloc] initWithNSString:@"close" withNSString:@"text_stream" withComIgormaznitsaProlDataTerm:predicate withJavaLangThrowable:ex];
  }
}

- (BOOL)predicateSEEINGWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                  withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *arg = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  id<ComIgormaznitsaProlIoProlTextReader> inStream = [((ComIgormaznitsaProlLogicProlContext *) nil_chk([((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getContext])) getCurrentInputStream];
  ComIgormaznitsaProlDataTerm *result = [ComIgormaznitsaProlDataTermList NULLLIST];
  if (inStream != nil) {
    result = [[ComIgormaznitsaProlDataTerm alloc] initWithNSString:[inStream getResourceId]];
  }
  return [((ComIgormaznitsaProlDataTerm *) nil_chk(arg)) EquWithComIgormaznitsaProlDataTerm:result];
}

- (BOOL)predicateTELLINGWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                   withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *arg = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  id<ComIgormaznitsaProlIoProlTextWriter> outStream = [((ComIgormaznitsaProlLogicProlContext *) nil_chk([((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getContext])) getCurrentOutStream];
  ComIgormaznitsaProlDataTerm *result = [ComIgormaznitsaProlDataTermList NULLLIST];
  if (outStream != nil) {
    result = [[ComIgormaznitsaProlDataTerm alloc] initWithNSString:[outStream getResourceId]];
  }
  return [((ComIgormaznitsaProlDataTerm *) nil_chk(arg)) EquWithComIgormaznitsaProlDataTerm:result];
}

- (void)predicateTOLDWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  @try {
    [((ComIgormaznitsaProlLogicProlContext *) nil_chk([((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getContext])) told];
  }
  @catch (JavaIoIOException *ex) {
    @throw [[ComIgormaznitsaProlExceptionsProlPermissionErrorException alloc] initWithNSString:@"close" withNSString:@"text_stream" withComIgormaznitsaProlDataTerm:predicate withJavaLangThrowable:ex];
  }
}

- (void)predicateTELLWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *arg = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  NSString *name = [((ComIgormaznitsaProlDataTerm *) nil_chk(arg)) getText];
  @try {
    [((ComIgormaznitsaProlLogicProlContext *) nil_chk([((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getContext])) tellWithNSString:name withBoolean:NO];
  }
  @catch (JavaIoIOException *ex) {
    if ([ex isKindOfClass:[JavaIoFileNotFoundException class]]) {
      @throw [[ComIgormaznitsaProlExceptionsProlExistenceErrorException alloc] initWithNSString:@"source_sink" withComIgormaznitsaProlDataTerm:predicate withJavaLangThrowable:ex];
    }
    else {
      @throw [[ComIgormaznitsaProlExceptionsProlPermissionErrorException alloc] initWithNSString:@"create" withNSString:@"text_stream" withComIgormaznitsaProlDataTerm:predicate withJavaLangThrowable:ex];
    }
  }
}

- (void)predicateAPPENDWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                  withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *arg = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  NSString *name = [((ComIgormaznitsaProlDataTerm *) nil_chk(arg)) getText];
  @try {
    [((ComIgormaznitsaProlLogicProlContext *) nil_chk([((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getContext])) tellWithNSString:name withBoolean:YES];
  }
  @catch (JavaIoIOException *ex) {
    if ([ex isKindOfClass:[JavaIoFileNotFoundException class]]) {
      @throw [[ComIgormaznitsaProlExceptionsProlExistenceErrorException alloc] initWithNSString:@"source_sink" withComIgormaznitsaProlDataTerm:predicate withJavaLangThrowable:ex];
    }
    else {
      @throw [[ComIgormaznitsaProlExceptionsProlPermissionErrorException alloc] initWithNSString:@"create" withNSString:@"text_stream" withComIgormaznitsaProlDataTerm:predicate withJavaLangThrowable:ex];
    }
  }
}

- (id<ComIgormaznitsaProlDataNumericTerm>)calculatEvaluableWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                                                            withComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)term {
  @try {
    if ([((ComIgormaznitsaProlDataTerm *) nil_chk(term)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_VAR) {
      ComIgormaznitsaProlDataVar *varoriginal = (ComIgormaznitsaProlDataVar *) check_class_cast(term, [ComIgormaznitsaProlDataVar class]);
      term = [((ComIgormaznitsaProlDataVar *) check_class_cast(term, [ComIgormaznitsaProlDataVar class])) getValue];
      if (term == nil) {
        @throw [[ComIgormaznitsaProlExceptionsProlInstantiationErrorException alloc] initWithNSString:[NSString stringWithFormat:@"An empty variable [%@] found at [%@]", varoriginal, goal] withComIgormaznitsaProlDataTerm:varoriginal];
      }
    }
    switch ([((ComIgormaznitsaProlDataTerm *) nil_chk(term)) getTermType]) {
      case ComIgormaznitsaProlDataTerm_TYPE_ATOM:
      {
        if ([term conformsToProtocol: @protocol(ComIgormaznitsaProlDataNumericTerm)]) {
          return (id<ComIgormaznitsaProlDataNumericTerm>) check_protocol_cast(term, @protocol(ComIgormaznitsaProlDataNumericTerm));
        }
        else {
          @throw [[ComIgormaznitsaProlExceptionsProlTypeErrorException alloc] initWithNSString:@"number" withNSString:[NSString stringWithFormat:@"Not a numeric atom +[%@] found at goal [%@]", term, goal] withComIgormaznitsaProlDataTerm:term];
        }
      }
      case ComIgormaznitsaProlDataTerm_TYPE_STRUCT:
      {
        ComIgormaznitsaProlLibrariesPredicateProcessor *processor = [((ComIgormaznitsaProlDataTermStruct *) check_class_cast(term, [ComIgormaznitsaProlDataTermStruct class])) getPredicateProcessor];
        if ([((ComIgormaznitsaProlLibrariesPredicateProcessor *) nil_chk(processor)) isEvaluable]) {
          return (id<ComIgormaznitsaProlDataNumericTerm>) check_protocol_cast([processor executeEvaluableWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *) check_class_cast(term, [ComIgormaznitsaProlDataTermStruct class])], @protocol(ComIgormaznitsaProlDataNumericTerm));
        }
        else {
          @throw [[ComIgormaznitsaProlExceptionsProlTypeErrorException alloc] initWithNSString:@"evaluable" withNSString:[NSString stringWithFormat:@"Not an arithmetic operator found [%@]", [((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) description]] withComIgormaznitsaProlDataTerm:term];
        }
      }
      default:
      @throw [[ComIgormaznitsaProlExceptionsProlTypeErrorException alloc] initWithNSString:@"evaluable" withNSString:[NSString stringWithFormat:@"Unsupported atom at an arithmetic expression [%@]", [((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) description]] withComIgormaznitsaProlDataTerm:term];
    }
  }
  @catch (JavaLangArithmeticException *ex) {
    @throw [[ComIgormaznitsaProlExceptionsProlEvaluationErrorException alloc] initWithNSString:[((JavaLangArithmeticException *) nil_chk(ex)) getMessage] withNSString:@"Arithmetic exception" withComIgormaznitsaProlDataTerm:term withJavaLangThrowable:ex];
  }
}

- (BOOL)predicateATOMCHARSWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                     withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *left = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  ComIgormaznitsaProlDataTerm *right = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
  switch ([((ComIgormaznitsaProlDataTerm *) nil_chk(left)) getTermType]) {
    case ComIgormaznitsaProlDataTerm_TYPE_ATOM:
    {
      left = [left asCharList];
      return [((ComIgormaznitsaProlDataTerm *) nil_chk(left)) EquWithComIgormaznitsaProlDataTerm:right];
    }
    case ComIgormaznitsaProlDataTerm_TYPE_LIST:
    {
      if ([((ComIgormaznitsaProlDataTermList *) nil_chk(((ComIgormaznitsaProlDataTermList *) check_class_cast(left, [ComIgormaznitsaProlDataTermList class])))) isNullList]) {
        left = [((ComIgormaznitsaProlDataTerm *) [[ComIgormaznitsaProlDataTerm alloc] initWithNSString:@"[]"]) asCharList];
        return [((ComIgormaznitsaProlDataTerm *) nil_chk(left)) EquWithComIgormaznitsaProlDataTerm:right];
      }
      else {
        @throw [[ComIgormaznitsaProlExceptionsProlTypeErrorException alloc] initWithNSString:@"atom" withComIgormaznitsaProlDataTerm:predicate];
      }
    }
  }
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(right)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_LIST) {
    JavaLangStringBuilder *builder = [[JavaLangStringBuilder alloc] init];
    ComIgormaznitsaProlDataTermList *list = (ComIgormaznitsaProlDataTermList *) check_class_cast(right, [ComIgormaznitsaProlDataTermList class]);
    while (list != [ComIgormaznitsaProlDataTermList NULLLIST]) {
      ComIgormaznitsaProlDataTerm *head = [list getHead];
      (void) [builder appendWithNSString:[((ComIgormaznitsaProlDataTerm *) nil_chk(head)) getText]];
      ComIgormaznitsaProlDataTerm *tail = [list getTail];
      if ([((ComIgormaznitsaProlDataTerm *) nil_chk(tail)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_LIST) {
        list = (ComIgormaznitsaProlDataTermList *) check_class_cast(tail, [ComIgormaznitsaProlDataTermList class]);
      }
      else {
        return NO;
      }
    }
    right = [[ComIgormaznitsaProlDataTerm alloc] initWithNSString:[builder description]];
    return [((ComIgormaznitsaProlDataTerm *) nil_chk(left)) EquWithComIgormaznitsaProlDataTerm:right];
  }
  return NO;
}

- (BOOL)predicateCHARCODEWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                    withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *left = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  ComIgormaznitsaProlDataTerm *right = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(left)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_ATOM) {
    left = [[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:(int) [((NSString *) nil_chk([left getText])) charAtWithInt:0]];
    return [((ComIgormaznitsaProlDataTerm *) nil_chk(right)) EquWithComIgormaznitsaProlDataTerm:left];
  }
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(right)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_ATOM) {
    right = [[ComIgormaznitsaProlDataTerm alloc] initWithNSString:[JavaLangCharacter toStringWithChar:(unichar) [((NSNumber *) nil_chk([((ComIgormaznitsaProlDataTermInteger *) check_class_cast(right, [ComIgormaznitsaProlDataTermInteger class])) getNumericValue])) intValue]]];
    return [left EquWithComIgormaznitsaProlDataTerm:right];
  }
  return NO;
}

- (BOOL)predicateNUMBERCODESWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                       withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *left = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  ComIgormaznitsaProlDataTerm *right = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(left)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_ATOM && [((ComIgormaznitsaProlDataTerm *) nil_chk(right)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_VAR) {
    left = [left asCharCodeList];
    return [((ComIgormaznitsaProlDataTerm *) nil_chk(left)) EquWithComIgormaznitsaProlDataTerm:right];
  }
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(right)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_LIST) {
    JavaLangStringBuilder *builder = [[JavaLangStringBuilder alloc] init];
    ComIgormaznitsaProlDataTermList *list = (ComIgormaznitsaProlDataTermList *) check_class_cast(right, [ComIgormaznitsaProlDataTermList class]);
    while (list != [ComIgormaznitsaProlDataTermList NULLLIST]) {
      ComIgormaznitsaProlDataTermInteger *head = (ComIgormaznitsaProlDataTermInteger *) check_class_cast([list getHead], [ComIgormaznitsaProlDataTermInteger class]);
      (void) [builder appendWithChar:(unichar) [((NSNumber *) nil_chk([((ComIgormaznitsaProlDataTermInteger *) nil_chk(head)) getNumericValue])) intValue]];
      ComIgormaznitsaProlDataTerm *tail = [list getTail];
      if ([((ComIgormaznitsaProlDataTerm *) nil_chk(tail)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_LIST) {
        list = (ComIgormaznitsaProlDataTermList *) check_class_cast(tail, [ComIgormaznitsaProlDataTermList class]);
      }
      else {
        return NO;
      }
    }
    NSString *numberValue = [builder description];
    ComIgormaznitsaProlDataTerm *number;
    @try {
      if ([((NSString *) nil_chk(numberValue)) hasPrefix:@"0x"]) {
        number = [[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:[JavaLangInteger parseIntWithNSString:[numberValue substring:2] withInt:16]];
      }
      else {
        number = [[ComIgormaznitsaProlDataTermInteger alloc] initWithNSString:numberValue];
      }
    }
    @catch (JavaLangNumberFormatException *ex) {
      @try {
        number = [[ComIgormaznitsaProlDataTermFloat alloc] initWithNSString:numberValue];
      }
      @catch (JavaLangNumberFormatException *exx) {
        number = [[ComIgormaznitsaProlDataTerm alloc] initWithNSString:numberValue];
      }
    }
    return [((ComIgormaznitsaProlDataTerm *) nil_chk(left)) EquWithComIgormaznitsaProlDataTerm:number];
  }
  return NO;
}

- (BOOL)predicateNUMBERCHARSWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                       withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *left = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  ComIgormaznitsaProlDataTerm *right = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(right)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_LIST) {
    JavaLangStringBuilder *builder = [[JavaLangStringBuilder alloc] init];
    ComIgormaznitsaProlDataTermList *list = (ComIgormaznitsaProlDataTermList *) check_class_cast(right, [ComIgormaznitsaProlDataTermList class]);
    BOOL add = NO;
    while (list != [ComIgormaznitsaProlDataTermList NULLLIST]) {
      ComIgormaznitsaProlDataTerm *head = [list getHead];
      unichar chr = [((NSString *) nil_chk([((ComIgormaznitsaProlDataTerm *) nil_chk(head)) getText])) charAtWithInt:0];
      if (!add) {
        if (![JavaLangCharacter isWhitespaceWithChar:chr]) {
          add = YES;
          (void) [builder appendWithChar:chr];
        }
      }
      else {
        (void) [builder appendWithChar:chr];
      }
      ComIgormaznitsaProlDataTerm *tail = [list getTail];
      if ([((ComIgormaznitsaProlDataTerm *) nil_chk(tail)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_LIST) {
        list = (ComIgormaznitsaProlDataTermList *) check_class_cast(tail, [ComIgormaznitsaProlDataTermList class]);
      }
      else {
        return NO;
      }
    }
    ComIgormaznitsaProlDataTerm *number = nil;
    NSString *numberValue = [builder description];
    @try {
      if ([((NSString *) nil_chk(numberValue)) hasPrefix:@"0x"]) {
        number = [[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:[JavaLangInteger parseIntWithNSString:[numberValue substring:2] withInt:16]];
      }
      else {
        number = [[ComIgormaznitsaProlDataTermInteger alloc] initWithNSString:numberValue];
      }
    }
    @catch (JavaLangNumberFormatException *ex) {
      @try {
        number = [[ComIgormaznitsaProlDataTermFloat alloc] initWithNSString:numberValue];
      }
      @catch (JavaLangNumberFormatException *exx) {
        @throw [[ComIgormaznitsaProlExceptionsProlCustomErrorException alloc] initWithComIgormaznitsaProlDataTerm:[[ComIgormaznitsaProlDataTermStruct alloc] initWithComIgormaznitsaProlDataTerm:[[ComIgormaznitsaProlDataTerm alloc] initWithNSString:@"syntax_error"] withComIgormaznitsaProlDataTermArray:[IOSObjectArray arrayWithObjects:(id[]){ [[ComIgormaznitsaProlDataTerm alloc] initWithNSString:numberValue] } count:1 type:[IOSClass classWithClass:[ComIgormaznitsaProlDataTerm class]]]] withComIgormaznitsaProlDataTerm:predicate];
      }
    }
    return [((ComIgormaznitsaProlDataTerm *) nil_chk(left)) EquWithComIgormaznitsaProlDataTerm:number];
  }
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(left)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_ATOM) {
    left = [left asCharList];
    return [((ComIgormaznitsaProlDataTerm *) nil_chk(left)) EquWithComIgormaznitsaProlDataTerm:right];
  }
  return NO;
}

- (BOOL)predicateFORWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
               withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *term = [((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0];
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(term)) getTermType] != ComIgormaznitsaProlDataTerm_TYPE_VAR) {
    [((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) noMoreVariants];
    return NO;
  }
  ComIgormaznitsaProlDataVar *var = (ComIgormaznitsaProlDataVar *) check_class_cast([predicate getElementWithInt:0], [ComIgormaznitsaProlDataVar class]);
  int start = [((NSNumber *) nil_chk([((ComIgormaznitsaProlDataTermInteger *) nil_chk(((ComIgormaznitsaProlDataTermInteger *) check_class_cast([ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]], [ComIgormaznitsaProlDataTermInteger class])))) getNumericValue])) intValue];
  int limit = [((NSNumber *) nil_chk([((ComIgormaznitsaProlDataTermInteger *) nil_chk(((ComIgormaznitsaProlDataTermInteger *) check_class_cast([ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:2]], [ComIgormaznitsaProlDataTermInteger class])))) getNumericValue])) intValue];
  JavaLangInteger *currentInt = (JavaLangInteger *) check_class_cast([((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getAuxObject], [JavaLangInteger class]);
  if (currentInt == nil) {
    [((ComIgormaznitsaProlDataVar *) nil_chk(var)) changeValueWithComIgormaznitsaProlDataTerm:[[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:start]];
    [goal setAuxObjectWithId:[JavaLangInteger valueOfWithInt:start]];
  }
  else {
    (void) PostIncrInt(&currentInt);
    if ([currentInt intValue] > limit) {
      [goal noMoreVariants];
      return NO;
    }
    else {
      [((ComIgormaznitsaProlDataVar *) nil_chk(var)) changeValueWithComIgormaznitsaProlDataTerm:[[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:[currentInt intValue]]];
      [goal setAuxObjectWithId:currentInt];
    }
  }
  return YES;
}

- (BOOL)predicateRNDWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
               withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *term = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(term)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_LIST) {
    ComIgormaznitsaProlDataTermList *list = (ComIgormaznitsaProlDataTermList *) check_class_cast(term, [ComIgormaznitsaProlDataTermList class]);
    ComIgormaznitsaProlDataTerm *result = nil;
    if ([list isNullList]) {
      result = [ComIgormaznitsaProlDataTermList NULLLIST];
    }
    else {
      IOSObjectArray *array = [ComIgormaznitsaProlUtilsUtils listToArrayWithComIgormaznitsaProlDataTermList:list];
      result = IOSObjectArray_Get(array, [((JavaUtilRandom *) nil_chk(ComIgormaznitsaProlLibrariesProlCoreLibrary_RANDOMIZEGEN_)) nextIntWithInt:(int) [((IOSObjectArray *) nil_chk(array)) count]]);
    }
    return [((ComIgormaznitsaProlDataTerm *) nil_chk([predicate getElementWithInt:1])) EquWithComIgormaznitsaProlDataTerm:result];
  }
  else {
    int limit = [((NSNumber *) nil_chk([((ComIgormaznitsaProlDataTermInteger *) nil_chk(((ComIgormaznitsaProlDataTermInteger *) check_class_cast([ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:0]], [ComIgormaznitsaProlDataTermInteger class])))) getNumericValue])) intValue];
    ComIgormaznitsaProlDataTermInteger *genVal = [[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:[((JavaUtilRandom *) nil_chk(ComIgormaznitsaProlLibrariesProlCoreLibrary_RANDOMIZEGEN_)) nextIntWithInt:limit]];
    return [((ComIgormaznitsaProlDataTerm *) nil_chk([predicate getElementWithInt:1])) EquWithComIgormaznitsaProlDataTerm:genVal];
  }
}

- (BOOL)predicateATOMLENGTHWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                      withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *left = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  ComIgormaznitsaProlDataTerm *right = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
  left = [[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:[((ComIgormaznitsaProlDataTerm *) nil_chk(left)) getTextLength]];
  return [left EquWithComIgormaznitsaProlDataTerm:right];
}

- (BOOL)predicateATOMCHARCODESWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                         withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *left = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  ComIgormaznitsaProlDataTerm *right = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
  switch ([((ComIgormaznitsaProlDataTerm *) nil_chk(left)) getTermType]) {
    case ComIgormaznitsaProlDataTerm_TYPE_ATOM:
    {
      left = [left asCharCodeList];
      return [((ComIgormaznitsaProlDataTerm *) nil_chk(left)) EquWithComIgormaznitsaProlDataTerm:right];
    }
    case ComIgormaznitsaProlDataTerm_TYPE_LIST:
    {
      if ([((ComIgormaznitsaProlDataTermList *) nil_chk(((ComIgormaznitsaProlDataTermList *) check_class_cast(left, [ComIgormaznitsaProlDataTermList class])))) isNullList]) {
        left = [((ComIgormaznitsaProlDataTerm *) [[ComIgormaznitsaProlDataTerm alloc] initWithNSString:@"[]"]) asCharCodeList];
        return [((ComIgormaznitsaProlDataTerm *) nil_chk(left)) EquWithComIgormaznitsaProlDataTerm:right];
      }
      else {
        @throw [[ComIgormaznitsaProlExceptionsProlTypeErrorException alloc] initWithNSString:@"atom" withComIgormaznitsaProlDataTerm:predicate];
      }
    }
  }
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(left)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_ATOM) {
    left = [left asCharCodeList];
    return [((ComIgormaznitsaProlDataTerm *) nil_chk(left)) EquWithComIgormaznitsaProlDataTerm:right];
  }
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(right)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_LIST) {
    JavaLangStringBuilder *builder = [[JavaLangStringBuilder alloc] init];
    ComIgormaznitsaProlDataTermList *list = (ComIgormaznitsaProlDataTermList *) check_class_cast(right, [ComIgormaznitsaProlDataTermList class]);
    while (list != [ComIgormaznitsaProlDataTermList NULLLIST]) {
      ComIgormaznitsaProlDataTerm *head = [list getHead];
      if (!([head isKindOfClass:[ComIgormaznitsaProlDataTermInteger class]])) {
        @throw [[ComIgormaznitsaProlExceptionsProlRepresentationErrorException alloc] initWithNSString:@"character_code" withComIgormaznitsaProlDataTerm:predicate];
      }
      (void) [builder appendWithChar:(unichar) [((NSNumber *) nil_chk([((ComIgormaznitsaProlDataTermInteger *) nil_chk(((ComIgormaznitsaProlDataTermInteger *) check_class_cast(head, [ComIgormaznitsaProlDataTermInteger class])))) getNumericValue])) intValue]];
      ComIgormaznitsaProlDataTerm *tail = [list getTail];
      if ([((ComIgormaznitsaProlDataTerm *) nil_chk(tail)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_LIST) {
        list = (ComIgormaznitsaProlDataTermList *) check_class_cast(tail, [ComIgormaznitsaProlDataTermList class]);
      }
      else {
        return NO;
      }
    }
    right = [[ComIgormaznitsaProlDataTerm alloc] initWithNSString:[builder description]];
    return [((ComIgormaznitsaProlDataTerm *) nil_chk(left)) EquWithComIgormaznitsaProlDataTerm:right];
  }
  return NO;
}

- (void)predicateHALTWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  if ([((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getArity] == 0) {
    [((ComIgormaznitsaProlLogicProlContext *) nil_chk([((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getContext])) halt];
    @throw [[ComIgormaznitsaProlExceptionsProlHaltExecutionException alloc] init];
  }
  else {
    int status = [((NSNumber *) nil_chk([((ComIgormaznitsaProlDataTermInteger *) nil_chk(((ComIgormaznitsaProlDataTermInteger *) check_class_cast([ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:0]], [ComIgormaznitsaProlDataTermInteger class])))) getNumericValue])) intValue];
    [((ComIgormaznitsaProlLogicProlContext *) nil_chk([((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getContext])) halt];
    @throw [[ComIgormaznitsaProlExceptionsProlHaltExecutionException alloc] initWithInt:status];
  }
}

- (BOOL)predicateABOLISHWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                   withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  NSString *signature = [ComIgormaznitsaProlUtilsUtils extractPredicateSignatureFromStructureWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTermStruct *) check_class_cast([((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0], [ComIgormaznitsaProlDataTermStruct class])];
  id<ComIgormaznitsaProlContainersKnowledgeBase> base = [((ComIgormaznitsaProlLogicProlContext *) nil_chk([((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getContext])) getKnowledgeBase];
  if ([((ComIgormaznitsaProlLogicProlContext *) nil_chk([goal getContext])) hasPredicateAtLibraryForSignatureWithNSString:signature]) {
    @throw [[ComIgormaznitsaProlExceptionsProlPermissionErrorException alloc] initWithNSString:@"modify" withNSString:@"_procedure" withComIgormaznitsaProlDataTerm:[[ComIgormaznitsaProlDataTerm alloc] initWithNSString:signature]];
  }
  [((id<ComIgormaznitsaProlContainersKnowledgeBase>) nil_chk(base)) abolishWithNSString:signature];
  return YES;
}

- (BOOL)predicateSORTWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *nonsorted = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  ComIgormaznitsaProlDataTerm *sorted = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
  IOSObjectArray *bufferarray = [ComIgormaznitsaProlUtilsUtils listToArrayWithComIgormaznitsaProlDataTermList:(ComIgormaznitsaProlDataTermList *) check_class_cast(nonsorted, [ComIgormaznitsaProlDataTermList class])];
  [JavaUtilArrays sortWithNSObjectArray:bufferarray withJavaUtilComparator:[ComIgormaznitsaProlUtilsUtils TERM_COMPARATOR]];
  ComIgormaznitsaProlDataTermList *sortedList = [ComIgormaznitsaProlUtilsUtils arrayToListWithComIgormaznitsaProlDataTermArray:bufferarray];
  return [((ComIgormaznitsaProlDataTerm *) nil_chk(sorted)) EquWithComIgormaznitsaProlDataTerm:sortedList];
}

- (BOOL)predicateFINDALLWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                   withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *template_ = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  ComIgormaznitsaProlDataTerm *pgoal = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
  ComIgormaznitsaProlDataTerm *instances = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:2]];
  ComIgormaznitsaProlLogicGoal *find_goal = [[ComIgormaznitsaProlLogicGoal alloc] initWithComIgormaznitsaProlDataTerm:pgoal withComIgormaznitsaProlLogicProlContext:[((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getContext] withComIgormaznitsaProlTraceTraceListener:[goal getTracer]];
  ComIgormaznitsaProlDataTermList *result = nil;
  ComIgormaznitsaProlDataTermList *currentList = nil;
  while (YES) {
    ComIgormaznitsaProlDataTerm *nextTemplate = [find_goal solve];
    if (nextTemplate == nil) {
      break;
    }
    ComIgormaznitsaProlDataTerm *templateCopy = [((ComIgormaznitsaProlDataTerm *) nil_chk(template_)) makeClone];
    ComIgormaznitsaProlDataTerm *pgoalCopy = [((ComIgormaznitsaProlDataTerm *) nil_chk(pgoal)) makeClone];
    [ComIgormaznitsaProlUtilsUtils arrangeVariablesInsideTermsWithComIgormaznitsaProlDataTerm:templateCopy withComIgormaznitsaProlDataTerm:pgoalCopy];
    if ([((ComIgormaznitsaProlDataTerm *) nil_chk(pgoalCopy)) EquWithComIgormaznitsaProlDataTerm:nextTemplate]) {
      if (result == nil) {
        result = [[ComIgormaznitsaProlDataTermList alloc] initWithComIgormaznitsaProlDataTerm:templateCopy];
        currentList = result;
      }
      else {
        currentList = [ComIgormaznitsaProlDataTermList appendItemWithComIgormaznitsaProlDataTermList:currentList withComIgormaznitsaProlDataTerm:templateCopy];
      }
    }
    else {
      @throw [[ComIgormaznitsaProlExceptionsProlCriticalError alloc] initWithNSString:@"Impossible situation at findall/3!"];
    }
  }
  if (result == nil) {
    result = [ComIgormaznitsaProlDataTermList NULLLIST];
  }
  return [((ComIgormaznitsaProlDataTerm *) nil_chk(instances)) EquWithComIgormaznitsaProlDataTerm:result];
}

- (BOOL)predicateASSERTAWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                   withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlContainersKnowledgeBase> base = [((ComIgormaznitsaProlLogicProlContext *) nil_chk([((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getContext])) getKnowledgeBase];
  ComIgormaznitsaProlDataTerm *atom = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(atom)) getTermType] != ComIgormaznitsaProlDataTerm_TYPE_STRUCT) {
    atom = [[ComIgormaznitsaProlDataTermStruct alloc] initWithComIgormaznitsaProlDataTerm:atom];
  }
  NSString *signature = [((ComIgormaznitsaProlDataTermStruct *) check_class_cast(atom, [ComIgormaznitsaProlDataTermStruct class])) isFunctorLikeRuleDefinition] ? [((ComIgormaznitsaProlDataTerm *) nil_chk([((ComIgormaznitsaProlDataTermStruct *) check_class_cast(atom, [ComIgormaznitsaProlDataTermStruct class])) getElementWithInt:0])) getSignature] : [((ComIgormaznitsaProlDataTermStruct *) check_class_cast(atom, [ComIgormaznitsaProlDataTermStruct class])) getSignature];
  if ([((ComIgormaznitsaProlLogicProlContext *) nil_chk([goal getContext])) hasPredicateAtLibraryForSignatureWithNSString:signature]) {
    @throw [[ComIgormaznitsaProlExceptionsProlPermissionErrorException alloc] initWithNSString:@"modify" withNSString:@"_procedure" withComIgormaznitsaProlDataTerm:[[ComIgormaznitsaProlDataTerm alloc] initWithNSString:signature]];
  }
  [((id<ComIgormaznitsaProlContainersKnowledgeBase>) nil_chk(base)) assertAWithComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *) check_class_cast(atom, [ComIgormaznitsaProlDataTermStruct class])];
  return YES;
}

- (BOOL)predicateASSERTZWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                   withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlContainersKnowledgeBase> base = [((ComIgormaznitsaProlLogicProlContext *) nil_chk([((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getContext])) getKnowledgeBase];
  ComIgormaznitsaProlDataTerm *atom = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(atom)) getTermType] != ComIgormaznitsaProlDataTerm_TYPE_STRUCT) {
    atom = [[ComIgormaznitsaProlDataTermStruct alloc] initWithComIgormaznitsaProlDataTerm:atom];
  }
  NSString *signature = [((ComIgormaznitsaProlDataTermStruct *) check_class_cast(atom, [ComIgormaznitsaProlDataTermStruct class])) isFunctorLikeRuleDefinition] ? [((ComIgormaznitsaProlDataTerm *) nil_chk([((ComIgormaznitsaProlDataTermStruct *) check_class_cast(atom, [ComIgormaznitsaProlDataTermStruct class])) getElementWithInt:0])) getSignature] : [((ComIgormaznitsaProlDataTermStruct *) check_class_cast(atom, [ComIgormaznitsaProlDataTermStruct class])) getSignature];
  if ([((ComIgormaznitsaProlLogicProlContext *) nil_chk([goal getContext])) hasPredicateAtLibraryForSignatureWithNSString:signature]) {
    @throw [[ComIgormaznitsaProlExceptionsProlPermissionErrorException alloc] initWithNSString:@"modify" withNSString:@"_procedure" withComIgormaznitsaProlDataTerm:[[ComIgormaznitsaProlDataTerm alloc] initWithNSString:signature]];
  }
  [((id<ComIgormaznitsaProlContainersKnowledgeBase>) nil_chk(base)) assertZWithComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *) check_class_cast(atom, [ComIgormaznitsaProlDataTermStruct class])];
  return YES;
}

- (BOOL)predicateRETRACTWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                   withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlContainersKnowledgeBase> base = [((ComIgormaznitsaProlLogicProlContext *) nil_chk([((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getContext])) getKnowledgeBase];
  ComIgormaznitsaProlDataTerm *atom = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(atom)) getTermType] != ComIgormaznitsaProlDataTerm_TYPE_STRUCT) {
    atom = [[ComIgormaznitsaProlDataTermStruct alloc] initWithComIgormaznitsaProlDataTerm:atom];
  }
  NSString *signature = [((ComIgormaznitsaProlDataTermStruct *) check_class_cast(atom, [ComIgormaznitsaProlDataTermStruct class])) isFunctorLikeRuleDefinition] ? [((ComIgormaznitsaProlDataTerm *) nil_chk([((ComIgormaznitsaProlDataTermStruct *) check_class_cast(atom, [ComIgormaznitsaProlDataTermStruct class])) getElementWithInt:0])) getSignature] : [((ComIgormaznitsaProlDataTermStruct *) check_class_cast(atom, [ComIgormaznitsaProlDataTermStruct class])) getSignature];
  if ([((ComIgormaznitsaProlLogicProlContext *) nil_chk([goal getContext])) hasPredicateAtLibraryForSignatureWithNSString:signature]) {
    @throw [[ComIgormaznitsaProlExceptionsProlPermissionErrorException alloc] initWithNSString:@"modify" withNSString:@"_procedure" withComIgormaznitsaProlDataTerm:[[ComIgormaznitsaProlDataTerm alloc] initWithNSString:signature]];
  }
  return [((id<ComIgormaznitsaProlContainersKnowledgeBase>) nil_chk(base)) retractAWithComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *) check_class_cast(atom, [ComIgormaznitsaProlDataTermStruct class])];
}

- (BOOL)predicateRETRACTZWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                    withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlContainersKnowledgeBase> base = [((ComIgormaznitsaProlLogicProlContext *) nil_chk([((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getContext])) getKnowledgeBase];
  ComIgormaznitsaProlDataTerm *atom = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(atom)) getTermType] != ComIgormaznitsaProlDataTerm_TYPE_STRUCT) {
    atom = [[ComIgormaznitsaProlDataTermStruct alloc] initWithComIgormaznitsaProlDataTerm:atom];
  }
  NSString *signature = [((ComIgormaznitsaProlDataTermStruct *) check_class_cast(atom, [ComIgormaznitsaProlDataTermStruct class])) isFunctorLikeRuleDefinition] ? [((ComIgormaznitsaProlDataTerm *) nil_chk([((ComIgormaznitsaProlDataTermStruct *) check_class_cast(atom, [ComIgormaznitsaProlDataTermStruct class])) getElementWithInt:0])) getSignature] : [((ComIgormaznitsaProlDataTermStruct *) check_class_cast(atom, [ComIgormaznitsaProlDataTermStruct class])) getSignature];
  if ([((ComIgormaznitsaProlLogicProlContext *) nil_chk([goal getContext])) hasPredicateAtLibraryForSignatureWithNSString:signature]) {
    @throw [[ComIgormaznitsaProlExceptionsProlPermissionErrorException alloc] initWithNSString:@"modify" withNSString:@"_procedure" withComIgormaznitsaProlDataTerm:[[ComIgormaznitsaProlDataTerm alloc] initWithNSString:signature]];
  }
  return [((id<ComIgormaznitsaProlContainersKnowledgeBase>) nil_chk(base)) retractZWithComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *) check_class_cast(atom, [ComIgormaznitsaProlDataTermStruct class])];
}

- (BOOL)predicateRETRACTALLWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                      withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlContainersKnowledgeBase> base = [((ComIgormaznitsaProlLogicProlContext *) nil_chk([((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getContext])) getKnowledgeBase];
  ComIgormaznitsaProlDataTerm *atom = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(atom)) getTermType] != ComIgormaznitsaProlDataTerm_TYPE_STRUCT) {
    atom = [[ComIgormaznitsaProlDataTermStruct alloc] initWithComIgormaznitsaProlDataTerm:atom];
  }
  NSString *signature = [((ComIgormaznitsaProlDataTermStruct *) check_class_cast(atom, [ComIgormaznitsaProlDataTermStruct class])) isFunctorLikeRuleDefinition] ? [((ComIgormaznitsaProlDataTerm *) nil_chk([((ComIgormaznitsaProlDataTermStruct *) check_class_cast(atom, [ComIgormaznitsaProlDataTermStruct class])) getElementWithInt:0])) getSignature] : [((ComIgormaznitsaProlDataTermStruct *) check_class_cast(atom, [ComIgormaznitsaProlDataTermStruct class])) getSignature];
  if ([((ComIgormaznitsaProlLogicProlContext *) nil_chk([goal getContext])) hasPredicateAtLibraryForSignatureWithNSString:signature]) {
    @throw [[ComIgormaznitsaProlExceptionsProlPermissionErrorException alloc] initWithNSString:@"modify" withNSString:@"_procedure" withComIgormaznitsaProlDataTerm:[[ComIgormaznitsaProlDataTerm alloc] initWithNSString:signature]];
  }
  return [((id<ComIgormaznitsaProlContainersKnowledgeBase>) nil_chk(base)) retractAllWithComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *) check_class_cast(atom, [ComIgormaznitsaProlDataTermStruct class])];
}

- (BOOL)predicateCATCHWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                 withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlLogicGoal *catchGoal = (ComIgormaznitsaProlLogicGoal *) check_class_cast([((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getAuxObject], [ComIgormaznitsaProlLogicGoal class]);
  ComIgormaznitsaProlDataTerm *catching = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  ComIgormaznitsaProlDataTerm *catcher = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
  ComIgormaznitsaProlDataTerm *solver = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:2]];
  if (catchGoal == nil) {
    catchGoal = [[ComIgormaznitsaProlLogicGoal alloc] initWithComIgormaznitsaProlDataTerm:catching withComIgormaznitsaProlLogicProlContext:[goal getContext] withComIgormaznitsaProlTraceTraceListener:[goal getTracer]];
    [goal setAuxObjectWithId:catchGoal];
  }
  if ([((ComIgormaznitsaProlLogicGoal *) nil_chk(catchGoal)) getGoalTerm] == solver) {
    ComIgormaznitsaProlDataTerm *result = [catchGoal solve];
    if (result == nil) {
      [goal noMoreVariants];
      return NO;
    }
    else {
      if ([catchGoal isCompleted]) {
        [goal noMoreVariants];
      }
      return YES;
    }
  }
  else {
    @try {
      ComIgormaznitsaProlDataTerm *result = [catchGoal solve];
      if (result == nil) {
        [goal noMoreVariants];
        return NO;
      }
      else {
        if ([catchGoal isCompleted]) {
          [goal noMoreVariants];
        }
        return YES;
      }
    }
    @catch (ComIgormaznitsaProlExceptionsProlAbstractCatcheableException *ex) {
      if ([((ComIgormaznitsaProlDataTerm *) nil_chk(catcher)) EquWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlExceptionsProlAbstractCatcheableException *) nil_chk(ex)) getAsStruct]]) {
        catchGoal = [[ComIgormaznitsaProlLogicGoal alloc] initWithComIgormaznitsaProlDataTerm:solver withComIgormaznitsaProlLogicProlContext:[goal getContext] withComIgormaznitsaProlTraceTraceListener:[goal getTracer]];
        [goal setAuxObjectWithId:catchGoal];
        ComIgormaznitsaProlDataTerm *result = [catchGoal solve];
        if (result == nil) {
          [goal noMoreVariants];
          return NO;
        }
        else {
          if ([catchGoal isCompleted]) {
            [goal noMoreVariants];
          }
          [goal setAuxObjectWithId:catchGoal];
          return YES;
        }
      }
      else {
        @throw ex;
      }
    }
  }
}

- (void)predicateTHROWWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                 withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *term = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  NSString *exceptionSignature = [((ComIgormaznitsaProlDataTerm *) nil_chk(term)) getSignature];
  [((JavaUtilLoggingLogger *) nil_chk(ComIgormaznitsaProlLibrariesProlCoreLibrary_LOG_)) infoWithNSString:[NSString stringWithFormat:@"throw/1 %@", exceptionSignature]];
  if ([@"instantiation_error/0" isEqual:exceptionSignature]) {
    @throw [[ComIgormaznitsaProlExceptionsProlInstantiationErrorException alloc] initWithComIgormaznitsaProlDataTerm:predicate];
  }
  if ([@"type_error/2" isEqual:exceptionSignature]) {
    ComIgormaznitsaProlDataTermStruct *struct_ = predicate;
    @throw [[ComIgormaznitsaProlExceptionsProlTypeErrorException alloc] initWithNSString:[((ComIgormaznitsaProlDataTerm *) nil_chk([struct_ getElementWithInt:0])) forWrite] withComIgormaznitsaProlDataTerm:[struct_ getElementWithInt:1]];
  }
  if ([@"domain_error/2" isEqual:exceptionSignature]) {
    ComIgormaznitsaProlDataTermStruct *struct_ = predicate;
    @throw [[ComIgormaznitsaProlExceptionsProlDomainErrorException alloc] initWithNSString:[((ComIgormaznitsaProlDataTerm *) nil_chk([struct_ getElementWithInt:0])) forWrite] withComIgormaznitsaProlDataTerm:[struct_ getElementWithInt:1]];
  }
  if ([@"permission_error/3" isEqual:exceptionSignature]) {
    ComIgormaznitsaProlDataTermStruct *struct_ = predicate;
    @throw [[ComIgormaznitsaProlExceptionsProlPermissionErrorException alloc] initWithNSString:[((ComIgormaznitsaProlDataTerm *) nil_chk([struct_ getElementWithInt:0])) forWrite] withNSString:[((ComIgormaznitsaProlDataTerm *) nil_chk([struct_ getElementWithInt:1])) forWrite] withComIgormaznitsaProlDataTerm:[struct_ getElementWithInt:2]];
  }
  if ([@"representation_error/1" isEqual:exceptionSignature]) {
    ComIgormaznitsaProlDataTermStruct *struct_ = predicate;
    @throw [[ComIgormaznitsaProlExceptionsProlRepresentationErrorException alloc] initWithNSString:[((ComIgormaznitsaProlDataTerm *) nil_chk([struct_ getElementWithInt:0])) forWrite] withComIgormaznitsaProlDataTerm:predicate];
  }
  if ([@"evaluation_error/1" isEqual:exceptionSignature]) {
    ComIgormaznitsaProlDataTermStruct *struct_ = predicate;
    @throw [[ComIgormaznitsaProlExceptionsProlEvaluationErrorException alloc] initWithNSString:[((ComIgormaznitsaProlDataTerm *) nil_chk([struct_ getElementWithInt:0])) forWrite] withComIgormaznitsaProlDataTerm:predicate];
  }
  ComIgormaznitsaProlDataTerm *arg = [predicate getElementWithInt:0];
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(arg)) getTermType] != ComIgormaznitsaProlDataTerm_TYPE_STRUCT) {
    arg = [[ComIgormaznitsaProlDataTermStruct alloc] initWithComIgormaznitsaProlDataTerm:arg];
  }
  @throw [[ComIgormaznitsaProlExceptionsProlCustomErrorException alloc] initWithComIgormaznitsaProlDataTerm:arg withComIgormaznitsaProlDataTerm:predicate];
}

- (void)predicateBEEPWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
}

- (void)predicatePAUSEWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                 withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlDataNumericTerm> term = (id<ComIgormaznitsaProlDataNumericTerm>) check_protocol_cast([((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0], @protocol(ComIgormaznitsaProlDataNumericTerm));
  int milliseconds = [((NSNumber *) nil_chk([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(term)) getNumericValue])) intValue];
  if (milliseconds > 0) {
    [JavaLangThread sleepWithLong:milliseconds];
  }
}

- (ComIgormaznitsaProlDataTermStruct *)processIteratorWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                                       withComIgormaznitsaProlContainersClauseIterator:(id<ComIgormaznitsaProlContainersClauseIterator>)iterator {
  ComIgormaznitsaProlDataTermStruct *result = nil;
  if ([((id<ComIgormaznitsaProlContainersClauseIterator>) nil_chk(iterator)) hasNext]) {
    result = [iterator next];
  }
  else {
    [((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) noMoreVariants];
  }
  return result;
}

- (BOOL)predicateFACTSWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                 withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id<ComIgormaznitsaProlContainersFactIterator> factIterator = (id<ComIgormaznitsaProlContainersFactIterator>) check_protocol_cast([((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getAuxObject], @protocol(ComIgormaznitsaProlContainersFactIterator));
  ComIgormaznitsaProlDataTerm *origterm = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  if (factIterator == nil) {
    ComIgormaznitsaProlDataTerm *term = origterm;
    if ([((ComIgormaznitsaProlDataTerm *) nil_chk(term)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_ATOM) {
      term = [[ComIgormaznitsaProlDataTermStruct alloc] initWithComIgormaznitsaProlDataTerm:term];
    }
    id<ComIgormaznitsaProlContainersKnowledgeBase> base = [((ComIgormaznitsaProlLogicProlContext *) nil_chk([goal getContext])) getKnowledgeBase];
    factIterator = [((id<ComIgormaznitsaProlContainersKnowledgeBase>) nil_chk(base)) getFactIteratorWithComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *) check_class_cast(term, [ComIgormaznitsaProlDataTermStruct class])];
    if (factIterator == nil) {
      [goal noMoreVariants];
      return NO;
    }
    else {
      [goal setAuxObjectWithId:factIterator];
    }
  }
  BOOL result = NO;
  ComIgormaznitsaProlDataTermStruct *nextFact = [self processIteratorWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlContainersClauseIterator:factIterator];
  if (nextFact == nil) {
    [goal setAuxObjectWithId:nil];
    [goal noMoreVariants];
  }
  else if ([((ComIgormaznitsaProlDataTerm *) nil_chk(origterm)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_ATOM) {
    result = YES;
  }
  else {
    if (![origterm EquWithComIgormaznitsaProlDataTerm:nextFact]) {
      @throw [[ComIgormaznitsaProlExceptionsProlCriticalError alloc] initWithNSString:@"Critical error, not Equ!"];
    }
    result = YES;
  }
  return result;
}

- (BOOL)predicateRULESWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                 withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlLibrariesProlCoreLibrary_RuleAuxObject *ruleAuxObject = (ComIgormaznitsaProlLibrariesProlCoreLibrary_RuleAuxObject *) check_class_cast([((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getAuxObject], [ComIgormaznitsaProlLibrariesProlCoreLibrary_RuleAuxObject class]);
  if (ruleAuxObject == nil) {
    ComIgormaznitsaProlDataTerm *term = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
    if ([((ComIgormaznitsaProlDataTerm *) nil_chk(term)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_ATOM) {
      term = [[ComIgormaznitsaProlDataTermStruct alloc] initWithComIgormaznitsaProlDataTerm:term];
    }
    id<ComIgormaznitsaProlContainersKnowledgeBase> base = [((ComIgormaznitsaProlLogicProlContext *) nil_chk([goal getContext])) getKnowledgeBase];
    id<ComIgormaznitsaProlContainersRuleIterator> ruleIterator = [((id<ComIgormaznitsaProlContainersKnowledgeBase>) nil_chk(base)) getRuleIteratorWithComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *) check_class_cast(term, [ComIgormaznitsaProlDataTermStruct class])];
    if (ruleIterator == nil) {
      [goal noMoreVariants];
      return NO;
    }
    else {
      ruleAuxObject = [[ComIgormaznitsaProlLibrariesProlCoreLibrary_RuleAuxObject alloc] initWithComIgormaznitsaProlContainersRuleIterator:ruleIterator];
      [goal setAuxObjectWithId:ruleAuxObject];
    }
  }
  BOOL result = NO;
  while (YES) {
    ComIgormaznitsaProlLogicGoal *currentGoal = ((ComIgormaznitsaProlLibrariesProlCoreLibrary_RuleAuxObject *) nil_chk(ruleAuxObject))->currentActiveGoal_;
    if (currentGoal == nil) {
      ComIgormaznitsaProlDataTermStruct *nextRule = [self processIteratorWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlContainersClauseIterator:ruleAuxObject->iterator_];
      if (nextRule == nil) {
        [goal setAuxObjectWithId:nil];
        [goal noMoreVariants];
        break;
      }
      ruleAuxObject->rule_ = nextRule;
      ruleAuxObject->currentActiveGoal_ = [[ComIgormaznitsaProlLogicGoal alloc] initWithComIgormaznitsaProlDataTerm:nextRule withComIgormaznitsaProlLogicProlContext:[goal getContext] withComIgormaznitsaProlTraceTraceListener:[goal getTracer]];
    }
    else {
      ComIgormaznitsaProlDataTerm *goalresult = [currentGoal solve];
      if (goalresult == nil) {
        ruleAuxObject->currentActiveGoal_ = nil;
      }
      else {
        ComIgormaznitsaProlDataTerm *term = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
        if ([((ComIgormaznitsaProlDataTerm *) nil_chk(term)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_STRUCT) {
          ComIgormaznitsaProlDataTermStruct *ruleClone = (ComIgormaznitsaProlDataTermStruct *) check_class_cast([((ComIgormaznitsaProlDataTermStruct *) nil_chk(ruleAuxObject->rule_)) makeClone], [ComIgormaznitsaProlDataTermStruct class]);
          if (![term EquWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(ruleClone)) getElementWithInt:0]]) {
            @throw [[ComIgormaznitsaProlExceptionsProlCriticalError alloc] initWithNSString:@"Can't make Equ, impossible case!"];
          }
        }
        result = YES;
        break;
      }
    }
  }
  return result;
}

- (void)predicateLOCKWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  NSString *atomName = [((ComIgormaznitsaProlDataTerm *) nil_chk([((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0])) getText];
  [((ComIgormaznitsaProlLogicProlContext *) nil_chk([((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getContext])) lockLockerForNameWithNSString:atomName];
}

- (void)predicateUNLOCKWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                  withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  NSString *atomName = [((ComIgormaznitsaProlDataTerm *) nil_chk([((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0])) getText];
  @try {
    [((ComIgormaznitsaProlLogicProlContext *) nil_chk([((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getContext])) unlockLockerForNameWithNSString:atomName];
  }
  @catch (JavaLangIllegalArgumentException *ex) {
    ComIgormaznitsaProlExceptionsProlExistenceErrorException *exx = [[ComIgormaznitsaProlExceptionsProlExistenceErrorException alloc] initWithNSString:@"locker" withNSString:@"unlock" withComIgormaznitsaProlDataTerm:predicate withJavaLangThrowable:ex];
    [((JavaUtilLoggingLogger *) nil_chk(ComIgormaznitsaProlLibrariesProlCoreLibrary_LOG_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel SEVERE] withNSString:@"unlock/1, unknown locker name" withJavaLangThrowable:ex];
    [ComIgormaznitsaProlLibrariesProlCoreLibrary_LOG_ throwingWithNSString:[[IOSClass classWithClass:[ComIgormaznitsaProlLibrariesProlCoreLibrary class]] getCanonicalName] withNSString:@"predicateUNLOCK()" withJavaLangThrowable:exx];
    @throw exx;
  }
  @catch (JavaLangIllegalMonitorStateException *ex) {
    [((JavaUtilLoggingLogger *) nil_chk(ComIgormaznitsaProlLibrariesProlCoreLibrary_LOG_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel SEVERE] withNSString:@"unlock/1, wrong monitor state" withJavaLangThrowable:ex];
    ComIgormaznitsaProlExceptionsProlPermissionErrorException *exx = [[ComIgormaznitsaProlExceptionsProlPermissionErrorException alloc] initWithNSString:@"locker" withNSString:@"unlock" withComIgormaznitsaProlDataTerm:predicate withJavaLangThrowable:ex];
    [ComIgormaznitsaProlLibrariesProlCoreLibrary_LOG_ throwingWithNSString:[[IOSClass classWithClass:[ComIgormaznitsaProlLibrariesProlCoreLibrary class]] getCanonicalName] withNSString:@"predicateUNLOCK()" withJavaLangThrowable:exx];
    @throw exx;
  }
}

- (BOOL)predicateTRYLOCKWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                   withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  NSString *atomName = [((ComIgormaznitsaProlDataTerm *) nil_chk([((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0])) getText];
  return [((ComIgormaznitsaProlLogicProlContext *) nil_chk([((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getContext])) trylockLockerForNameWithNSString:atomName];
}

- (void)predicateASYNCWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                 withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *goalToSolve = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  ComIgormaznitsaProlLogicProlContext *context = [((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getContext];
  id<JavaUtilMap> vars = [ComIgormaznitsaProlUtilsUtils fillTableWithVarsWithComIgormaznitsaProlDataTerm:goalToSolve];
  for (ComIgormaznitsaProlDataVar * __strong var in nil_chk([((id<JavaUtilMap>) nil_chk(vars)) values])) {
    if (![((ComIgormaznitsaProlDataVar *) nil_chk(var)) isAnonymous] && [var isUndefined]) {
      @throw [[ComIgormaznitsaProlExceptionsProlInstantiationErrorException alloc] initWithNSString:[NSString stringWithFormat:@"Variable '%@' is not instantiated, you must have all variables instantiated for async/1 .", [var getText]] withComIgormaznitsaProlDataTerm:predicate];
    }
  }
  (void) [((ComIgormaznitsaProlLogicProlContext *) nil_chk(context)) solveAsynchronouslyWithComIgormaznitsaProlDataTerm:goalToSolve withComIgormaznitsaProlTraceTraceListener:[goal getTracer]];
}

- (void)predicateWAITASYNCWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                     withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  JavaUtilConcurrentThreadPoolExecutor *service = [((ComIgormaznitsaProlLogicProlContext *) nil_chk([((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getContext])) getContextExecutorService];
  while (![((JavaLangThread *) nil_chk([JavaLangThread currentThread])) isInterrupted] && (![((id<JavaUtilConcurrentBlockingQueue>) nil_chk([((JavaUtilConcurrentThreadPoolExecutor *) nil_chk(service)) getQueue])) isEmpty] || [service getActiveCount] > 0)) {
    [JavaLangThread sleepWithLong:1];
  }
}

- (id<JavaUtilList>)startListAsForkWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                              withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate
                                withComIgormaznitsaProlDataTermList:(ComIgormaznitsaProlDataTermList *)termlist {
  id<JavaUtilList> goalList = (id<JavaUtilList>) check_protocol_cast([((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getAuxObject], @protocol(JavaUtilList));
  if (goalList == nil) {
    id<JavaUtilSet> varFlagTable = nil;
    goalList = [[JavaUtilArrayList alloc] init];
    ComIgormaznitsaProlDataTermList *tlist = termlist;
    ComIgormaznitsaProlLogicProlContext *context = [goal getContext];
    while (![((ComIgormaznitsaProlDataTermList *) nil_chk(tlist)) isNullList]) {
      ComIgormaznitsaProlDataTerm *term = [tlist getHead];
      if ([((ComIgormaznitsaProlDataTerm *) nil_chk(term)) getTermType] != ComIgormaznitsaProlDataTerm_TYPE_ATOM) {
        id<JavaUtilMap> varTable = [ComIgormaznitsaProlUtilsUtils fillTableWithVarsWithComIgormaznitsaProlDataTerm:term];
        if (![((id<JavaUtilMap>) nil_chk(varTable)) isEmpty]) {
          if (varFlagTable == nil) {
            varFlagTable = [[JavaUtilHashSet alloc] init];
          }
          for (id<JavaUtilMap_Entry> __strong pair in nil_chk([varTable entrySet])) {
            ComIgormaznitsaProlDataVar *variable = [((id<JavaUtilMap_Entry>) nil_chk(pair)) getValue];
            if (![((ComIgormaznitsaProlDataVar *) nil_chk(variable)) isAnonymous] && [variable isUndefined]) {
              JavaLangInteger *varUID = [JavaLangInteger valueOfWithInt:[variable getVarUID]];
              if ([((id<JavaUtilSet>) nil_chk(varFlagTable)) containsWithId:varUID]) {
                @throw [[ComIgormaznitsaProlExceptionsProlInstantiationErrorException alloc] initWithNSString:[NSString stringWithFormat:@"Variable '%@' is being shared between one or more parallel solving goals but not instantiated.", [variable getText]] withComIgormaznitsaProlDataTerm:predicate];
              }
              else {
                [varFlagTable addWithId:varUID];
              }
            }
          }
        }
        varTable = nil;
      }
      [goalList addWithId:[[ComIgormaznitsaProlLibrariesProlCoreLibrary_AuxForkTask alloc] initWithComIgormaznitsaProlLibrariesProlCoreLibrary:self withComIgormaznitsaProlDataTerm:term withComIgormaznitsaProlLogicProlContext:context]];
      ComIgormaznitsaProlDataTerm *tail = [tlist getTail];
      if ([((ComIgormaznitsaProlDataTerm *) nil_chk(tail)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_LIST) {
        tlist = (ComIgormaznitsaProlDataTermList *) check_class_cast(tail, [ComIgormaznitsaProlDataTermList class]);
      }
      else {
        break;
      }
    }
    [goal setAuxObjectWithId:goalList];
  }
  id<JavaUtilList> resultList = [[JavaUtilArrayList alloc] init];
  id<JavaUtilConcurrentExecutorService> executor = [((ComIgormaznitsaProlLogicProlContext *) nil_chk([goal getContext])) getContextExecutorService];
  for (ComIgormaznitsaProlLibrariesProlCoreLibrary_AuxForkTask * __strong task in nil_chk(goalList)) {
    [resultList addWithId:[((id<JavaUtilConcurrentExecutorService>) nil_chk(executor)) submitWithJavaUtilConcurrentCallable:task]];
  }
  return resultList;
}

- (BOOL)predicateFORKWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTermList *termlist = (ComIgormaznitsaProlDataTermList *) check_class_cast([ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]], [ComIgormaznitsaProlDataTermList class]);
  id<JavaUtilList> taskList = [self startListAsForkWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTermStruct:predicate withComIgormaznitsaProlDataTermList:termlist];
  BOOL result = YES;
  int taskindex = 0;
  id<JavaUtilList> forkExceptions = nil;
  while (![((ComIgormaznitsaProlDataTermList *) nil_chk(termlist)) isNullList]) {
    ComIgormaznitsaProlDataTerm *head = [termlist getHead];
    @try {
      id<JavaUtilConcurrentFuture> task = [((id<JavaUtilList>) nil_chk(taskList)) getWithInt:taskindex];
      ComIgormaznitsaProlDataTerm *resultOfTask = [((id<JavaUtilConcurrentFuture>) nil_chk(task)) get];
      if (resultOfTask == nil) {
        result = NO;
        break;
      }
      else {
        if (![((ComIgormaznitsaProlDataTerm *) nil_chk(head)) EquWithComIgormaznitsaProlDataTerm:resultOfTask]) {
          ComIgormaznitsaProlExceptionsProlCriticalError *err = [[ComIgormaznitsaProlExceptionsProlCriticalError alloc] initWithNSString:@"Impossible situation, the proven fork task goal is not equal the etalon task goal."];
          [((JavaUtilLoggingLogger *) nil_chk(ComIgormaznitsaProlLibrariesProlCoreLibrary_LOG_)) throwingWithNSString:[[IOSClass classWithClass:[ComIgormaznitsaProlLibrariesProlCoreLibrary class]] getCanonicalName] withNSString:@"fork/1" withJavaLangThrowable:err];
          @throw err;
        }
      }
    }
    @catch (JavaUtilConcurrentExecutionException *ex) {
      [((JavaUtilLoggingLogger *) nil_chk(ComIgormaznitsaProlLibrariesProlCoreLibrary_LOG_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel SEVERE] withNSString:[NSString stringWithFormat:@"predicateFORK()[%@] task index=%d", [predicate description], taskindex] withJavaLangThrowable:[((JavaUtilConcurrentExecutionException *) nil_chk(ex)) getCause] == nil ? ex : [ex getCause]];
      if (forkExceptions == nil) {
        forkExceptions = [[JavaUtilArrayList alloc] init];
      }
      [((id<JavaUtilList>) nil_chk(forkExceptions)) addWithId:ex];
    }
    ComIgormaznitsaProlDataTerm *tail = [termlist getTail];
    if ([((ComIgormaznitsaProlDataTerm *) nil_chk(tail)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_LIST) {
      termlist = (ComIgormaznitsaProlDataTermList *) check_class_cast(tail, [ComIgormaznitsaProlDataTermList class]);
    }
    else {
      break;
    }
    taskindex++;
  }
  if (forkExceptions != nil) {
    ComIgormaznitsaProlExceptionsProlForkExecutionException *ex = [[ComIgormaznitsaProlExceptionsProlForkExecutionException alloc] initWithComIgormaznitsaProlDataTerm:predicate withJavaLangThrowableArray:[forkExceptions toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[forkExceptions size] type:[IOSClass classWithClass:[JavaLangThrowable class]]]]];
    [((JavaUtilLoggingLogger *) nil_chk(ComIgormaznitsaProlLibrariesProlCoreLibrary_LOG_)) throwingWithNSString:[[IOSClass classWithClass:[ComIgormaznitsaProlLibrariesProlCoreLibrary class]] getCanonicalName] withNSString:@"fork/1" withJavaLangThrowable:ex];
    @throw ex;
  }
  if (!result) {
    [((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) noMoreVariants];
  }
  return result;
}

- (BOOL)predicateIFORKWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                 withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTermList *termlist = (ComIgormaznitsaProlDataTermList *) check_class_cast([ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]], [ComIgormaznitsaProlDataTermList class]);
  id<JavaUtilList> taskList = [self startListAsForkWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTermStruct:predicate withComIgormaznitsaProlDataTermList:termlist];
  BOOL result = YES;
  JavaLangException *forkException = nil;
  ComIgormaznitsaProlDataTerm *termThrowsException = nil;
  IOSObjectArray *parsedgoal = [ComIgormaznitsaProlUtilsUtils listToArrayWithComIgormaznitsaProlDataTermList:termlist];
  id<JavaUtilMap> workingThreads = [[JavaUtilHashMap alloc] init];
  int index = 0;
  for (id<JavaUtilConcurrentFuture> __strong task in nil_chk(taskList)) {
    (void) [workingThreads putWithId:[JavaLangInteger valueOfWithInt:index++] withId:task];
  }
  while (![workingThreads isEmpty]) {
    if ([((JavaLangThread *) nil_chk([JavaLangThread currentThread])) isInterrupted]) {
      for (id<JavaUtilConcurrentFuture> __strong task in nil_chk([workingThreads values])) {
        [((id<JavaUtilConcurrentFuture>) nil_chk(task)) cancelWithBoolean:YES];
      }
      [workingThreads clear];
      @throw [[JavaLangInterruptedException alloc] init];
    }
    BOOL stopAllWorkingThreads = NO;
    JavaLangInteger *completedIndex = nil;
    for (id<JavaUtilMap_Entry> __strong checkingtask in nil_chk([workingThreads entrySet])) {
      id<JavaUtilConcurrentFuture> term = [((id<JavaUtilMap_Entry>) nil_chk(checkingtask)) getValue];
      if ([((id<JavaUtilConcurrentFuture>) nil_chk(term)) isDone]) {
        completedIndex = [checkingtask getKey];
        if ([term isCancelled]) {
          stopAllWorkingThreads = YES;
          break;
        }
        @try {
          ComIgormaznitsaProlDataTerm *resultterm = [term get];
          if (resultterm == nil) {
            result = NO;
            stopAllWorkingThreads = YES;
            break;
          }
          else {
            int threadindex = [((JavaLangInteger *) nil_chk(completedIndex)) intValue];
            ComIgormaznitsaProlDataTerm *originalGoal = IOSObjectArray_Get(nil_chk(parsedgoal), threadindex);
            if (![((ComIgormaznitsaProlDataTerm *) nil_chk(originalGoal)) EquWithComIgormaznitsaProlDataTerm:resultterm]) {
              ComIgormaznitsaProlExceptionsProlCriticalError *err = [[ComIgormaznitsaProlExceptionsProlCriticalError alloc] initWithNSString:[NSString stringWithFormat:@"Impossible situation, the proven fork task goal is not equal the etalon task goal. [index=%d]", threadindex]];
              [((JavaUtilLoggingLogger *) nil_chk(ComIgormaznitsaProlLibrariesProlCoreLibrary_LOG_)) throwingWithNSString:[[IOSClass classWithClass:[ComIgormaznitsaProlLibrariesProlCoreLibrary class]] getCanonicalName] withNSString:@"ifork/1" withJavaLangThrowable:err];
              @throw err;
            }
          }
        }
        @catch (JavaLangException *ex) {
          int threadindex = [((JavaLangInteger *) nil_chk(completedIndex)) intValue];
          termThrowsException = IOSObjectArray_Get(nil_chk(parsedgoal), threadindex);
          forkException = ex;
          stopAllWorkingThreads = YES;
          result = NO;
        }
        break;
      }
    }
    if (completedIndex != nil) {
      (void) [workingThreads removeWithId:completedIndex];
    }
    if (stopAllWorkingThreads) {
      for (id<JavaUtilConcurrentFuture> __strong task in nil_chk([workingThreads values])) {
        [((id<JavaUtilConcurrentFuture>) nil_chk(task)) cancelWithBoolean:YES];
      }
    }
  }
  if (forkException != nil) {
    ComIgormaznitsaProlExceptionsProlForkExecutionException *ex = [[ComIgormaznitsaProlExceptionsProlForkExecutionException alloc] initWithComIgormaznitsaProlDataTerm:termThrowsException withJavaLangThrowableArray:[IOSObjectArray arrayWithObjects:(id[]){ forkException } count:1 type:[IOSClass classWithClass:[JavaLangThrowable class]]]];
    [((JavaUtilLoggingLogger *) nil_chk(ComIgormaznitsaProlLibrariesProlCoreLibrary_LOG_)) throwingWithNSString:[[IOSClass classWithClass:[ComIgormaznitsaProlLibrariesProlCoreLibrary class]] getCanonicalName] withNSString:@"ifork/1" withJavaLangThrowable:ex];
    @throw ex;
  }
  if (!result) {
    [((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) noMoreVariants];
  }
  return result;
}

- (BOOL)predicateREGTRIGGERWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                      withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  NSString *signature = [ComIgormaznitsaProlUtilsUtils extractPredicateSignatureFromStructureWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTermStruct *) check_class_cast([((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0], [ComIgormaznitsaProlDataTermStruct class])];
  NSString *triggerevent = [((ComIgormaznitsaProlDataTerm *) nil_chk([ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]])) getText];
  ComIgormaznitsaProlDataTerm *callableTerm = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:2]];
  ComIgormaznitsaProlLogicProlContext *context = [((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getContext];
  ComIgormaznitsaProlLogicTriggersProlTriggerGoal *triggergoal = [[ComIgormaznitsaProlLogicTriggersProlTriggerGoal alloc] initWithComIgormaznitsaProlDataTerm:callableTerm withComIgormaznitsaProlLogicProlContext:context withComIgormaznitsaProlTraceTraceListener:[goal getTracer]];
  if ([@"onassert" isEqual:triggerevent]) {
    (void) [triggergoal addSignatureWithNSString:signature withComIgormaznitsaProlLogicTriggersProlTriggerTypeEnum:[ComIgormaznitsaProlLogicTriggersProlTriggerTypeEnum TRIGGER_ASSERT]];
  }
  else if ([@"onretract" isEqual:triggerevent]) {
    (void) [triggergoal addSignatureWithNSString:signature withComIgormaznitsaProlLogicTriggersProlTriggerTypeEnum:[ComIgormaznitsaProlLogicTriggersProlTriggerTypeEnum TRIGGER_RETRACT]];
  }
  else if ([@"onassertretract" isEqual:triggerevent]) {
    (void) [triggergoal addSignatureWithNSString:signature withComIgormaznitsaProlLogicTriggersProlTriggerTypeEnum:[ComIgormaznitsaProlLogicTriggersProlTriggerTypeEnum TRIGGER_ASSERT_RETRACT]];
  }
  else {
    @throw [[ComIgormaznitsaProlExceptionsProlCriticalError alloc] initWithNSString:[NSString stringWithFormat:@"Unsupported trigger event detected [%@]", triggerevent]];
  }
  [((ComIgormaznitsaProlLogicProlContext *) nil_chk(context)) registerTriggerWithComIgormaznitsaProlLogicTriggersProlTrigger:triggergoal];
  return YES;
}

+ (void)initialize {
  if (self == [ComIgormaznitsaProlLibrariesProlCoreLibrary class]) {
    ComIgormaznitsaProlLibrariesProlCoreLibrary_LOG_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[ComIgormaznitsaProlLibrariesProlCoreLibrary class]] getCanonicalName]];
    ComIgormaznitsaProlLibrariesProlCoreLibrary_NEXT_LINE_ = [[ComIgormaznitsaProlDataTerm alloc] initWithNSString:@"\n"];
    ComIgormaznitsaProlLibrariesProlCoreLibrary_SPACE_ = [[ComIgormaznitsaProlDataTerm alloc] initWithNSString:@" "];
    ComIgormaznitsaProlLibrariesProlCoreLibrary_RANDOMIZEGEN_ = [[JavaUtilRandom alloc] initWithLong:[JavaLangSystem nanoTime]];
    ComIgormaznitsaProlLibrariesProlCoreLibrary_TRUE__ = [[ComIgormaznitsaProlDataTerm alloc] initWithNSString:@"true"];
  }
}

+ (IOSObjectArray *)__annotations_predicateArithEquWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Arithmetic Equal" withSignature:@"=:=/2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"@evaluable,@evaluable" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateTermLessWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Term less than" withSignature:@"@</2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"?term,?term" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateTermLessOrEquWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Term less than or equal to." withSignature:@"@=</2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"?term,?term" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateTermMoreWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Term greater than" withSignature:@"@>/2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"?term,?term" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateTermMoreOrEquWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Term greater than or equal to." withSignature:@"@>=/2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"?term,?term" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateTermEquWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Term identical" withSignature:@"==/2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"?term,?term" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateNotTermEquWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Term not identical" withSignature:@"\\==/2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"?term,?term" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateArithMoreWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Arithmetic greater than" withSignature:@">/2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"@evaluable,@evaluable" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateArithLessWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Arithmetic less than" withSignature:@"</2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"@evaluable,@evaluable" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateArithMoreOrEquWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Arithmetic greater than or equal to" withSignature:@">=/2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"@evaluable,@evaluable" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateArithLessOrEquWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Arithmetic less than or equal to" withSignature:@"=</2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"@evaluable,@evaluable" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateArithNotEquWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Arithmetic Not equal" withSignature:@"=\\=/2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"@evaluable,@evaluable" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateXORWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Bitwise `exclusive or'" withSignature:@"xor/2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+evaluable,+evaluable" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsEvaluable alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateBITWISENOTWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Bitwise 'not'" withSignature:@"\\/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+evaluable" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsEvaluable alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateBITWISEORWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Bitwise 'or'" withSignature:@"\\//2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+evaluable,+evaluable" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsEvaluable alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateBITWISEANDWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Bitwise 'and'" withSignature:@"/\\/2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+evaluable,+evaluable" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsEvaluable alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateMODWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Modulus" withSignature:@"mod/2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+evaluable,+evaluable" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsEvaluable alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateREMWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Remainder" withSignature:@"rem/2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+evaluable,+evaluable" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsEvaluable alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicatePOWERWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Power" withSignature:@"**/2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+evaluable,+evaluable" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsEvaluable alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateADDTWOWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Addition" withSignature:@"+/2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+evaluable,+evaluable" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsEvaluable alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateSINWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Sine" withSignature:@"sin/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+evaluable" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsEvaluable alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateFLOATINTEGERPARTWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Integer part" withSignature:@"float_integer_part/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+evaluable" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsEvaluable alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateFLOATFRACTIONALPARTWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Fractional part" withSignature:@"float_fractional_part/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+evaluable" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsEvaluable alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateFLOORWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Floor" withSignature:@"floor/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+evaluable" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsEvaluable alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateTRUNCATEWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Truncate" withSignature:@"truncate/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+evaluable" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsEvaluable alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateROUNDWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Round" withSignature:@"round/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+evaluable" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsEvaluable alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateCEILINGWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Ceiling" withSignature:@"ceiling/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+evaluable" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsEvaluable alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateCOSWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Cosine" withSignature:@"cos/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+evaluable" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsEvaluable alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateATANWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Arc tangent" withSignature:@"atan/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+evaluable" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsEvaluable alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateEXPWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Exponentiation" withSignature:@"exp/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+evaluable" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsEvaluable alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateLOGWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Log" withSignature:@"log/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+evaluable" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsEvaluable alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateSQRTWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Square root" withSignature:@"sqrt/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+evaluable" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsEvaluable alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateABSWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Absolute value" withSignature:@"abs/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+evaluable" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsEvaluable alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateSIGNWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"SIGN" withSignature:@"sign/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+evaluable" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsEvaluable alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateSUBTWOWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Subtraction" withSignature:@"-/2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+evaluable,+evaluable" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsEvaluable alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateNegWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Negation" withSignature:@"-/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+evaluable" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsEvaluable alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateTheSameWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Not action over a number" withSignature:@"+/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+evaluable" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsEvaluable alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateMULWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Multiplication" withSignature:@"*/2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+evaluable,+evaluable" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsEvaluable alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateDIVWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Dividsion" withSignature:@"//2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+evaluable,+evaluable" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsEvaluable alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateINTDIVWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Integer division" withSignature:@"///2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+evaluable,+evaluable" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsEvaluable alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateSHIFTLEFTWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Bitwise left shift" withSignature:@"<</2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+evaluable,+evaluable" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsEvaluable alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateSHIFTRIGHTWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Bitwise right shift" withSignature:@">>/2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+evaluable,+evaluable" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsEvaluable alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateISWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"'is'(Result, Expression) is true if and only if the value of evaluating Expression as an expression is Result" withSignature:@"is/2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"?evaluable,@evaluable" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateTRUEWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"The perdicate is always true." withSignature:@"true/0" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateFAILWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"The predicate is always false." withSignature:@"fail/0" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateNLWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Out the next line char symbol into current output stream" withSignature:@"nl/0" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateTABWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Out a number of space symbols into current output stream" withSignature:@"tab/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+integer" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateNOTWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"True if goal cannot be proven" withSignature:@"not/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateEQUWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Unify X and Y terms. It is true if X and Y are unifiable." withSignature:@"=/2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateNOTEQUWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Unify X and Y terms. It is true if X and Y are not-unifiable." withSignature:@"\\=/2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateCOPYTERMWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"copy_term(X,Y) is true if and only if Y unifies with a term T which is a renamed copy of X." withSignature:@"copy_term/2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"?term,?term" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateTimeWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Execute  Goal just but  print used time, It supports choice point (!) for inside goal." withSignature:@"time/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+callable_term" } count:1 type:[[NSObject class] getClass]]] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateCUTWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"! is true. All choice ponts between the cut and the parent goal are removed. The effect is commit to use of both the current clause and the substitutions found at the point of the cut." withSignature:@"!/0" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateCUTLOCALWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"!! is true. Local version of !/0. It doesn't cut the knowledge base selection, i.e. it works only inbounds of current goal." withSignature:@"!!/0" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateREPEATWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"repeat is true. It just places a choice point every call." withSignature:@"repeat/0" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:[[NSObject class] getClass]]] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateCannotBeProvenWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"\\+(Term) is true if and only if call(Term) is false." withSignature:@"\\+/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+callable_term" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateCLAUSEWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"clause(Head, Body) is true if and only if\n* The predicate of Head is public (the standard does not specify how a predicate is declared public but dynamic predicates are public, and\n* There is a clause in the database which corresponds to a term H:- B which unifies with Head :- Body." withSignature:@"clause/2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+head,?callable_term" } count:1 type:[[NSObject class] getClass]]] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateCURRENTOPWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"current_op(Priority, Op_specifier, Operator) is true if and only if Operator is an operator with properties given by  Op_specifier and Priority" withSignature:@"current_op/3" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"?integer,?operator_specifier,?atom" } count:1 type:[[NSObject class] getClass]]] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateOPWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"These predicates allow the operator table to be altered or inspected.\nop(Priority, Op_Specifier, Operator) is true, with the side effect that\n1. if Priority is 0 then Operator is removed from the operator table, else\n2. Operator is added to the Operator table, with priority (lower binds tighter) Priority and associativity determined by Op_Specifier" withSignature:@"op/3" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+integer,+operator_specifier,@atom_or_atom_list" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateCALLWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"call(G) is true if and only if G represents a goal which is true." withSignature:@"call/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+callable_term" } count:1 type:[[NSObject class] getClass]]] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateONCEWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"once(Term) is true. once/1 is not re-executable." withSignature:@"once/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+callable_term" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateORWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"';'(Either, Or) is true iff and either Either or Or is true." withSignature:@";/2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:[[NSObject class] getClass]]] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateIFTHENWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"'->'(If, Then) is true if and only if If is true and Then is true for the first solution of If" withSignature:@"->/2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsItChangesGoalChain alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateANDWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"','(First, Second) is true if and only if First is true and Second is true." withSignature:@",/2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:[[NSObject class] getClass]]] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateVARWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"var(X) is true if and only if X is a variable." withSignature:@"var/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateNONVARWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"nonvar(X) is true if and only if X is not a variable." withSignature:@"nonvar/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateATOMWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"atom(X) is true if and only if X is an atom." withSignature:@"atom/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateINTEGERWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"integer(X) is true if and only if X is an integer." withSignature:@"integer/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateNUMBERWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"number(X) is true if and only if X is an integer or a float." withSignature:@"number/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateFLOATWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"float(X) is true if and only if X is a float." withSignature:@"float/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateCOMPOUNDWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"compound(X) is true if and only if X is a compound term, that is neither atomic nor a variable." withSignature:@"compound/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateATOMICWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"atomic(X) is true if and only if X is atomic (that is an atom, an integer or a float)." withSignature:@"atomic/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateARGWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"arg(N,Term, Arg) is true if nad only if the Nth argument of Term is Arg" withSignature:@"arg/3" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+integer,+compound_term,?term" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateFUNCTORWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"functor(Term, Name, Arity) is true if and only if:\n* Term is a compound term with functor name Name and arity Arity or\n* Term is an atomic term equal to Name and Arity is 0." withSignature:@"functor/3" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"-nonvar,+atomic,+integer", @"+nonvar,?atomic,?integer" } count:2 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateUNIVWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Term =.. List is true if and only if\n* Term is an atomic term and List is the list whose only element is Term, or\n* Term is a compound term and List is the list whose head is the functor name of Term and whose tail is the list of the arguments of Term. " withSignature:@"=../2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+nonvar,?non_empty_list", @"-nonvar,+non_empty_list" } count:2 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateTIMEWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Get current time Hours,Minutes,Seconds,Milliseconds." withSignature:@"time/4" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"?integer,?integer,?integer,?integer" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateDATEWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Get current date Year, Month, Day. The January is 1st month" withSignature:@"date/3" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"?integer,?integer,?integer" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateWriteWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Write a term into the current output stream." withSignature:@"write/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicatePUTWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Write a char for its code into the current output stream." withSignature:@"put/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+number" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateGETWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Read next non-blank char code from the current input stream." withSignature:@"get/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"?number" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateGET0WithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Read next char code from the current input stream." withSignature:@"get0/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"?number" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateReadWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@" Read  the next Prolog term from the current input stream." withSignature:@"read/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateReadLnWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@" Read  the next line (until NL symbol) from the current input stream as an atom. It sypports backspace to remove last symbol from buffer." withSignature:@"readln/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateReadIntWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@" Read  an integer number (and ignore white space) until NL symbol from the current input stream as an integer atom or the end_of_file atom. It sypports backspace to remove last symbol from buffer. If the input string can't be converted to an integer atom, the predicate will return false." withSignature:@"readint/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateReadRealWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@" Read  an real number (and ignore white space) until NL symbol from the current input stream as an real atom or the end_of_file atom. It sypports backspace to remove last symbol from buffer. If the input string can't be converted to a real atom, the predicate will return false." withSignature:@"readreal/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateCONSULTWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Take an atom as the file name of the resource to be used for consultation, or a list contains a resource name chain. The resource will be getted through the current ProlStreamManager." withSignature:@"consult/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+atom", @"+list" } count:2 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateSEEWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Open SrcDest for reading and make it the current input" withSignature:@"see/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+atom" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateSEENWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Close the current input stream." withSignature:@"seen/0" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateSEEINGWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Return the current input stream name." withSignature:@"seeing/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"?term" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateTELLINGWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Return the current output stream name." withSignature:@"telling/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"?term" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateTOLDWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Close the current output stream." withSignature:@"told/0" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateTELLWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Open SrcDest for writing and make it the current output" withSignature:@"tell/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+atom" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateAPPENDWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Open SrcDest to append new data and make it the current input" withSignature:@"append/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+atom" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateATOMCHARSWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"atom_chars(Atom, List) succeeds if and only if List is a list whose elements are the one character atoms that in order make up  Atom." withSignature:@"atom_chars/2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+atom,?list", @"-atom,+character_list" } count:2 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateCHARCODEWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"char_code(Char, Code) succeeds if and only if Code is the character code that corresponds to the character Char." withSignature:@"char_code/2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+character,?character_code", @"-character,+character_code" } count:2 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateNUMBERCODESWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"number_codes(Number, CodeList) succeeds if and only if CodeList is a list whose elements are the codes for the one character atoms that in order make up Number." withSignature:@"number_codes/2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+number,?character_code_list", @"-number,+character_code_list" } count:2 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateNUMBERCHARSWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"number_chars(Number, List) succeeds if and only if List is a list whose elements are the one character atoms that in order make up Number." withSignature:@"number_chars/2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+number,?character_list", @"-number,+character_list" } count:2 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateFORWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Allows to make an integer counter from a variable, (Var, Start, End)." withSignature:@"for/3" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"?term,+integer,+integer" } count:1 type:[[NSObject class] getClass]]] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateRNDWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Allows to generate a pseudo randomize integer (limit,value) between 0 (inclusive) and the limit (exclusive) or select random element from the list." withSignature:@"rnd/2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+integer,?integer", @"+list,?term" } count:2 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateATOMLENGTHWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"atom_length(Atom, Length) is true if and only if the integer Length equals the number of characters in the name of the atom Atom." withSignature:@"atom_length/2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+atom,?integer" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateATOMCHARCODESWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"atom_codes(Atom, List) succeeds if and only if List is a list whose elements are the character codes that in order correspond to the characters that make up  Atom." withSignature:@"atom_codes/2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+atom,?character_code_list", @"?atom,+list" } count:2 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateHALTWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@" These predicate terminate a Prolog engine and you can send the status of a cause." withSignature:@"halt/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+integer" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsPredicateSynonyms alloc] initWithSignatures:[IOSObjectArray arrayWithObjects:(id[]) { @"halt/0" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:3 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateABOLISHWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"abolish(Pred/2) is true. It has for side effect the removal of all clauses of the predicate indicated by Pred. After abolish/1 the predicate is not found by current_predicate." withSignature:@"abolish/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"@predicate_indicator" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateSORTWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"True if Sorted can be unified with a list holding the elements of List, sorted to the standard order of terms" withSignature:@"sort/2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+list,?list" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateFINDALLWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Creates  a list of the instantiations Template gets  successively on backtracking  over Goal and unifies the  result with Bag." withSignature:@"findall/3" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"?term,+callable_term,?list" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateASSERTAWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Addition of a clause into the knowlwde base before all other clauses." withSignature:@"asserta/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"@clause" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateASSERTZWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Addition of a clause into the knowlwde base after all other clauses." withSignature:@"assertz/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"@clause" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsPredicateSynonyms alloc] initWithSignatures:[IOSObjectArray arrayWithObjects:(id[]) { @"assert/1" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:3 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateRETRACTWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Retract the first clause which can be unified with argument. True if there is such clause in the knowledge base." withSignature:@"retract/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"@clause" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsPredicateSynonyms alloc] initWithSignatures:[IOSObjectArray arrayWithObjects:(id[]) { @"retracta/1" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:3 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateRETRACTZWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Retract the last clause which can be unified with argument. True if there is such clause in the knowledge base." withSignature:@"retractz/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"@clause" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateRETRACTALLWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Retract all clauses which can be unified with argument. True if there is as minimum one clause in the knowledge base." withSignature:@"retractall/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"@clause" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateCATCHWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"A goal catch(Goal, Catcher, Handler) is true if\n1. call(Goal) is true, or\n2. An exception is raised which throws a Ball that is caught by Catcher and Handler then succeeds " withSignature:@"catch/3" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+callable_term,?term,+callable_term" } count:1 type:[[NSObject class] getClass]]] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateTHROWWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Throw an exception which can be catched by catch/3" withSignature:@"throw/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+callable_term" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateBEEPWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Make a short sound. It depends on the OS." withSignature:@"beep/0" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicatePAUSEWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Make a pause for defined millisecond number." withSignature:@"pause/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+number" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateFACTSWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Finds only facts at the knowledge base." withSignature:@"facts/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+callable_term" } count:1 type:[[NSObject class] getClass]]] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateRULESWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Finds and call only rules at the knowledge base." withSignature:@"rules/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+callable_term" } count:1 type:[[NSObject class] getClass]]] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateLOCKWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Block current thread until it will be possible to lock an atom, don't forget unlock." withSignature:@"lock/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+atom" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateUNLOCKWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Unlock a locker for its name and allow to continue work of waiting threads. If any other thread is the owner for the locker then permission_error/3 will be thrown." withSignature:@"unlock/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+atom" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateTRYLOCKWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Try make lock for a named locker, if it is being locked already then fail else success." withSignature:@"trylock/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+atom" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateASYNCWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Allows to solve a goal asynchronously, it will be started as a daemon so it will be stopped when the main goal will be solved or failed. If there will be uncatched exception it will be just out at the log." withSignature:@"async/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+callable_term" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateWAITASYNCWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Blocking waiting until all daemon threads (started with either fork/1 or async/1) in the context will be completed and deactivated (it checks the queue of the threads and their activity). Always true." withSignature:@"waitasync/0" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateFORKWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Allows to prove a few goals (non linked between each other) in separated threads simultaneously, it is blocking the calling thread until all threads (started by the predicate) are completed. The fork implements AND operation (i.e. all goals have to be true else the predicate will fail).You must not have the same noninstantiated variables in terms that will be executed in different threads. The fork_error/1 will be thrown if any thread will throw an exception." withSignature:@"fork/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+list" } count:1 type:[[NSObject class] getClass]]] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateIFORKWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"It works like fork/1 but it will interrupt all noncompleted threads of the fork if any proven result is fail." withSignature:@"ifork/1" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+list" } count:1 type:[[NSObject class] getClass]]] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateREGTRIGGERWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"regtrigger(somepredicate/3,onassert,triggerhandler) is always true. The predicate allows to register a trigger handler for distinguished predicate signature. The handled trigger event can be selected from the list [onassert, onretract, onassertretract]." withSignature:@"regtrigger/3" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+predicate_indicator,+triggerevent,+callable_term" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", "ProlCoreLibrary", NULL, 0x1, NULL },
    { "predicateArithEquWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateArithEqu", "Z", 0x1, NULL },
    { "predicateTermLessWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateTermLess", "Z", 0x1, NULL },
    { "predicateTermLessOrEquWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateTermLessOrEqu", "Z", 0x1, NULL },
    { "predicateTermMoreWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateTermMore", "Z", 0x1, NULL },
    { "predicateTermMoreOrEquWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateTermMoreOrEqu", "Z", 0x1, NULL },
    { "predicateTermEquWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateTermEqu", "Z", 0x1, NULL },
    { "predicateNotTermEquWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateNotTermEqu", "Z", 0x1, NULL },
    { "predicateArithMoreWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateArithMore", "Z", 0x1, NULL },
    { "predicateArithLessWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateArithLess", "Z", 0x1, NULL },
    { "predicateArithMoreOrEquWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateArithMoreOrEqu", "Z", 0x1, NULL },
    { "predicateArithLessOrEquWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateArithLessOrEqu", "Z", 0x1, NULL },
    { "predicateArithNotEquWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateArithNotEqu", "Z", 0x1, NULL },
    { "predicateXORWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateXOR", "Lcom.igormaznitsa.prol.data.Term;", 0x1, NULL },
    { "predicateBITWISENOTWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateBITWISENOT", "Lcom.igormaznitsa.prol.data.Term;", 0x1, NULL },
    { "predicateBITWISEORWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateBITWISEOR", "Lcom.igormaznitsa.prol.data.Term;", 0x1, NULL },
    { "predicateBITWISEANDWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateBITWISEAND", "Lcom.igormaznitsa.prol.data.Term;", 0x1, NULL },
    { "predicateMODWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateMOD", "Lcom.igormaznitsa.prol.data.Term;", 0x1, NULL },
    { "predicateREMWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateREM", "Lcom.igormaznitsa.prol.data.Term;", 0x1, NULL },
    { "predicatePOWERWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicatePOWER", "Lcom.igormaznitsa.prol.data.Term;", 0x1, NULL },
    { "predicateADDTWOWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateADDTWO", "Lcom.igormaznitsa.prol.data.Term;", 0x1, NULL },
    { "predicateSINWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateSIN", "Lcom.igormaznitsa.prol.data.Term;", 0x1, NULL },
    { "predicateFLOATINTEGERPARTWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateFLOATINTEGERPART", "Lcom.igormaznitsa.prol.data.Term;", 0x1, NULL },
    { "predicateFLOATFRACTIONALPARTWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateFLOATFRACTIONALPART", "Lcom.igormaznitsa.prol.data.Term;", 0x1, NULL },
    { "predicateFLOORWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateFLOOR", "Lcom.igormaznitsa.prol.data.Term;", 0x1, NULL },
    { "predicateTRUNCATEWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateTRUNCATE", "Lcom.igormaznitsa.prol.data.Term;", 0x1, NULL },
    { "predicateROUNDWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateROUND", "Lcom.igormaznitsa.prol.data.Term;", 0x1, NULL },
    { "predicateCEILINGWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateCEILING", "Lcom.igormaznitsa.prol.data.Term;", 0x1, NULL },
    { "predicateCOSWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateCOS", "Lcom.igormaznitsa.prol.data.Term;", 0x1, NULL },
    { "predicateATANWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateATAN", "Lcom.igormaznitsa.prol.data.Term;", 0x1, NULL },
    { "predicateEXPWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateEXP", "Lcom.igormaznitsa.prol.data.Term;", 0x1, NULL },
    { "predicateLOGWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateLOG", "Lcom.igormaznitsa.prol.data.Term;", 0x1, NULL },
    { "predicateSQRTWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateSQRT", "Lcom.igormaznitsa.prol.data.Term;", 0x1, NULL },
    { "predicateABSWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateABS", "Lcom.igormaznitsa.prol.data.Term;", 0x1, NULL },
    { "predicateSIGNWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateSIGN", "Lcom.igormaznitsa.prol.data.Term;", 0x1, NULL },
    { "predicateSUBTWOWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateSUBTWO", "Lcom.igormaznitsa.prol.data.Term;", 0x1, NULL },
    { "predicateNegWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateNeg", "Lcom.igormaznitsa.prol.data.Term;", 0x1, NULL },
    { "predicateTheSameWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateTheSame", "Lcom.igormaznitsa.prol.data.Term;", 0x1, NULL },
    { "predicateMULWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateMUL", "Lcom.igormaznitsa.prol.data.Term;", 0x1, NULL },
    { "predicateDIVWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateDIV", "Lcom.igormaznitsa.prol.data.Term;", 0x1, NULL },
    { "predicateINTDIVWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateINTDIV", "Lcom.igormaznitsa.prol.data.Term;", 0x1, NULL },
    { "predicateSHIFTLEFTWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateSHIFTLEFT", "Lcom.igormaznitsa.prol.data.Term;", 0x1, NULL },
    { "predicateSHIFTRIGHTWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateSHIFTRIGHT", "Lcom.igormaznitsa.prol.data.Term;", 0x1, NULL },
    { "predicateISWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateIS", "Z", 0x1, NULL },
    { "predicateTRUEWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateTRUE", "V", 0x1, NULL },
    { "predicateFAILWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateFAIL", "Z", 0x1, NULL },
    { "predicateNLWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateNL", "V", 0x11, NULL },
    { "predicateTABWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateTAB", "V", 0x11, NULL },
    { "predicateNOTWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateNOT", "Z", 0x1, "Ljava.lang.InterruptedException;" },
    { "predicateEQUWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateEQU", "Z", 0x1, NULL },
    { "predicateNOTEQUWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateNOTEQU", "Z", 0x1, NULL },
    { "predicateCOPYTERMWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateCOPYTERM", "Z", 0x11, NULL },
    { "predicateTimeWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateTime", "Z", 0x11, "Ljava.lang.InterruptedException;" },
    { "predicateCUTWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateCUT", "V", 0x1, NULL },
    { "predicateCUTLOCALWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateCUTLOCAL", "V", 0x1, NULL },
    { "predicateREPEATWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateREPEAT", "V", 0x1, NULL },
    { "predicateCannotBeProvenWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateCannotBeProven", "Z", 0x11, "Ljava.lang.InterruptedException;" },
    { "predicateCLAUSEWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateCLAUSE", "Z", 0x1, NULL },
    { "predicateCURRENTOPWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateCURRENTOP", "Z", 0x1, NULL },
    { "predicateOPWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateOP", "Z", 0x1, NULL },
    { "predicateCALLWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateCALL", "Z", 0x1, "Ljava.lang.InterruptedException;" },
    { "predicateONCEWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateONCE", "Z", 0x1, "Ljava.lang.InterruptedException;" },
    { "predicateORWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateOR", "V", 0x11, "Ljava.lang.InterruptedException;" },
    { "predicateIFTHENWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateIFTHEN", "Z", 0x11, "Ljava.lang.InterruptedException;" },
    { "predicateANDWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateAND", "V", 0x1, "Ljava.lang.InterruptedException;" },
    { "predicateVARWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateVAR", "Z", 0x1, NULL },
    { "predicateNONVARWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateNONVAR", "Z", 0x1, NULL },
    { "predicateATOMWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateATOM", "Z", 0x1, NULL },
    { "predicateINTEGERWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateINTEGER", "Z", 0x1, NULL },
    { "predicateNUMBERWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateNUMBER", "Z", 0x1, NULL },
    { "predicateFLOATWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateFLOAT", "Z", 0x1, NULL },
    { "predicateCOMPOUNDWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateCOMPOUND", "Z", 0x1, NULL },
    { "predicateATOMICWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateATOMIC", "Z", 0x1, NULL },
    { "predicateARGWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateARG", "Z", 0x1, NULL },
    { "predicateFUNCTORWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateFUNCTOR", "Z", 0x1, NULL },
    { "predicateUNIVWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateUNIV", "Z", 0x1, NULL },
    { "predicateTIMEWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateTIME", "Z", 0x11, NULL },
    { "predicateDATEWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateDATE", "Z", 0x11, NULL },
    { "predicateWriteWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateWrite", "V", 0x11, NULL },
    { "predicatePUTWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicatePUT", "V", 0x11, NULL },
    { "predicateGETWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateGET", "Z", 0x11, NULL },
    { "predicateGET0WithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateGET0", "Z", 0x11, NULL },
    { "predicateReadWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateRead", "Z", 0x11, "Ljava.lang.InterruptedException;" },
    { "readFromCurrentInputStreamUntilNLWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "readFromCurrentInputStreamUntilNL", "Ljava.lang.String;", 0x2, NULL },
    { "predicateReadLnWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateReadLn", "Z", 0x11, NULL },
    { "predicateReadIntWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateReadInt", "Z", 0x11, NULL },
    { "predicateReadRealWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateReadReal", "Z", 0x11, NULL },
    { "consultFromResourceWithNSString:withComIgormaznitsaProlLogicProlContext:withComIgormaznitsaProlIoProlStreamManager:", "consultFromResource", "Z", 0x2, NULL },
    { "predicateCONSULTWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateCONSULT", "Z", 0x1, NULL },
    { "predicateSEEWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateSEE", "V", 0x11, NULL },
    { "predicateSEENWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateSEEN", "V", 0x11, NULL },
    { "predicateSEEINGWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateSEEING", "Z", 0x11, NULL },
    { "predicateTELLINGWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateTELLING", "Z", 0x11, NULL },
    { "predicateTOLDWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateTOLD", "V", 0x11, NULL },
    { "predicateTELLWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateTELL", "V", 0x11, NULL },
    { "predicateAPPENDWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateAPPEND", "V", 0x11, NULL },
    { "calculatEvaluableWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTerm:", "calculatEvaluable", "Lcom.igormaznitsa.prol.data.NumericTerm;", 0x2, NULL },
    { "predicateATOMCHARSWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateATOMCHARS", "Z", 0x1, NULL },
    { "predicateCHARCODEWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateCHARCODE", "Z", 0x1, NULL },
    { "predicateNUMBERCODESWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateNUMBERCODES", "Z", 0x1, NULL },
    { "predicateNUMBERCHARSWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateNUMBERCHARS", "Z", 0x1, NULL },
    { "predicateFORWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateFOR", "Z", 0x1, NULL },
    { "predicateRNDWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateRND", "Z", 0x1, NULL },
    { "predicateATOMLENGTHWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateATOMLENGTH", "Z", 0x1, NULL },
    { "predicateATOMCHARCODESWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateATOMCHARCODES", "Z", 0x1, NULL },
    { "predicateHALTWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateHALT", "V", 0x1, NULL },
    { "predicateABOLISHWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateABOLISH", "Z", 0x1, NULL },
    { "predicateSORTWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateSORT", "Z", 0x1, NULL },
    { "predicateFINDALLWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateFINDALL", "Z", 0x1, "Ljava.lang.InterruptedException;" },
    { "predicateASSERTAWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateASSERTA", "Z", 0x1, NULL },
    { "predicateASSERTZWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateASSERTZ", "Z", 0x1, NULL },
    { "predicateRETRACTWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateRETRACT", "Z", 0x1, NULL },
    { "predicateRETRACTZWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateRETRACTZ", "Z", 0x1, NULL },
    { "predicateRETRACTALLWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateRETRACTALL", "Z", 0x1, NULL },
    { "predicateCATCHWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateCATCH", "Z", 0x1, "Ljava.lang.InterruptedException;" },
    { "predicateTHROWWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateTHROW", "V", 0x1, NULL },
    { "predicateBEEPWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateBEEP", "V", 0x1, NULL },
    { "predicatePAUSEWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicatePAUSE", "V", 0x1, "Ljava.lang.InterruptedException;" },
    { "processIteratorWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlContainersClauseIterator:", "processIterator", "Lcom.igormaznitsa.prol.data.TermStruct;", 0x2, NULL },
    { "predicateFACTSWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateFACTS", "Z", 0x1, NULL },
    { "predicateRULESWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateRULES", "Z", 0x1, "Ljava.lang.InterruptedException;" },
    { "predicateLOCKWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateLOCK", "V", 0x1, NULL },
    { "predicateUNLOCKWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateUNLOCK", "V", 0x1, NULL },
    { "predicateTRYLOCKWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateTRYLOCK", "Z", 0x1, NULL },
    { "predicateASYNCWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateASYNC", "V", 0x1, NULL },
    { "predicateWAITASYNCWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateWAITASYNC", "V", 0x1, "Ljava.lang.InterruptedException;" },
    { "startListAsForkWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:withComIgormaznitsaProlDataTermList:", "startListAsFork", "Ljava.util.List;", 0x2, "Ljava.lang.InterruptedException;" },
    { "predicateFORKWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateFORK", "Z", 0x1, "Ljava.lang.InterruptedException;" },
    { "predicateIFORKWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateIFORK", "Z", 0x1, "Ljava.lang.InterruptedException;" },
    { "predicateREGTRIGGERWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateREGTRIGGER", "Z", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "LOG_", NULL, 0x1c, "Ljava.util.logging.Logger;" },
    { "NEXT_LINE_", NULL, 0x19, "Lcom.igormaznitsa.prol.data.Term;" },
    { "SPACE_", NULL, 0x19, "Lcom.igormaznitsa.prol.data.Term;" },
    { "RANDOMIZEGEN_", NULL, 0x1a, "Ljava.util.Random;" },
    { "TRUE__", "TRUE", 0x1a, "Lcom.igormaznitsa.prol.data.Term;" },
  };
  static J2ObjcClassInfo _ComIgormaznitsaProlLibrariesProlCoreLibrary = { "ProlCoreLibrary", "com.igormaznitsa.prol.libraries", NULL, 0x11, 130, methods, 5, fields, 0, NULL};
  return &_ComIgormaznitsaProlLibrariesProlCoreLibrary;
}

@end
@implementation ComIgormaznitsaProlLibrariesProlCoreLibrary_RuleAuxObject

- (id)initWithComIgormaznitsaProlContainersRuleIterator:(id<ComIgormaznitsaProlContainersRuleIterator>)iterator {
  if (self = [super init]) {
    self->iterator_ = iterator;
  }
  return self;
}

- (void)copyAllFieldsTo:(ComIgormaznitsaProlLibrariesProlCoreLibrary_RuleAuxObject *)other {
  [super copyAllFieldsTo:other];
  other->currentActiveGoal_ = currentActiveGoal_;
  other->iterator_ = iterator_;
  other->rule_ = rule_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithComIgormaznitsaProlContainersRuleIterator:", "RuleAuxObject", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "iterator_", NULL, 0x12, "Lcom.igormaznitsa.prol.containers.RuleIterator;" },
    { "currentActiveGoal_", NULL, 0x2, "Lcom.igormaznitsa.prol.logic.Goal;" },
    { "rule_", NULL, 0x2, "Lcom.igormaznitsa.prol.data.TermStruct;" },
  };
  static J2ObjcClassInfo _ComIgormaznitsaProlLibrariesProlCoreLibrary_RuleAuxObject = { "RuleAuxObject", "com.igormaznitsa.prol.libraries", "ProlCoreLibrary", 0xa, 1, methods, 3, fields, 0, NULL};
  return &_ComIgormaznitsaProlLibrariesProlCoreLibrary_RuleAuxObject;
}

@end
@implementation ComIgormaznitsaProlLibrariesProlCoreLibrary_AuxForkTask

- (id)initWithComIgormaznitsaProlLibrariesProlCoreLibrary:(ComIgormaznitsaProlLibrariesProlCoreLibrary *)outer$
                          withComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)termToSolve
                  withComIgormaznitsaProlLogicProlContext:(ComIgormaznitsaProlLogicProlContext *)context {
  if (self = [super init]) {
    self->term_ = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTerm *) nil_chk(termToSolve)) makeClone]];
    if ([termToSolve getTermType] == ComIgormaznitsaProlDataTerm_TYPE_VAR) {
      self->goal_ = nil;
    }
    else {
      self->goal_ = [[ComIgormaznitsaProlLogicGoal alloc] initWithComIgormaznitsaProlDataTerm:self->term_ withComIgormaznitsaProlLogicProlContext:context withComIgormaznitsaProlTraceTraceListener:nil];
    }
  }
  return self;
}

- (ComIgormaznitsaProlLogicGoal *)getGoal {
  return goal_;
}

- (ComIgormaznitsaProlDataTerm *)getTerm {
  return term_;
}

- (ComIgormaznitsaProlDataTerm *)call {
  return self->goal_ == nil ? nil : [self->goal_ solve];
}

- (NSString *)description {
  return [((ComIgormaznitsaProlDataTerm *) nil_chk(term_)) description];
}

- (void)copyAllFieldsTo:(ComIgormaznitsaProlLibrariesProlCoreLibrary_AuxForkTask *)other {
  [super copyAllFieldsTo:other];
  other->goal_ = goal_;
  other->term_ = term_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithComIgormaznitsaProlLibrariesProlCoreLibrary:withComIgormaznitsaProlDataTerm:withComIgormaznitsaProlLogicProlContext:", "AuxForkTask", NULL, 0x1, NULL },
    { "getGoal", NULL, "Lcom.igormaznitsa.prol.logic.Goal;", 0x1, NULL },
    { "getTerm", NULL, "Lcom.igormaznitsa.prol.data.Term;", 0x1, NULL },
    { "call", NULL, "Lcom.igormaznitsa.prol.data.Term;", 0x1, "Ljava.lang.InterruptedException;" },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "term_", NULL, 0x12, "Lcom.igormaznitsa.prol.data.Term;" },
    { "goal_", NULL, 0x12, "Lcom.igormaznitsa.prol.logic.Goal;" },
  };
  static J2ObjcClassInfo _ComIgormaznitsaProlLibrariesProlCoreLibrary_AuxForkTask = { "AuxForkTask", "com.igormaznitsa.prol.libraries", "ProlCoreLibrary", 0x2, 5, methods, 2, fields, 0, NULL};
  return &_ComIgormaznitsaProlLibrariesProlCoreLibrary_AuxForkTask;
}

@end
