//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/igormaznitsa/prol/libraries/ProlStringLibrary.java
//
//  Created by katsura on 14/04/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/igormaznitsa/prol/annotations/Determined.h"
#include "com/igormaznitsa/prol/annotations/Predicate.h"
#include "com/igormaznitsa/prol/data/Term.h"
#include "com/igormaznitsa/prol/data/TermFloat.h"
#include "com/igormaznitsa/prol/data/TermInteger.h"
#include "com/igormaznitsa/prol/data/TermStruct.h"
#include "com/igormaznitsa/prol/libraries/ProlStringLibrary.h"
#include "com/igormaznitsa/prol/logic/Goal.h"
#include "com/igormaznitsa/prol/utils/Utils.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuilder.h"

@implementation ComIgormaznitsaProlLibrariesProlStringLibrary

+ (BOOL)predicateCONCATWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                  withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *argFIRST = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  ComIgormaznitsaProlDataTerm *argSECOND = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
  ComIgormaznitsaProlDataTerm *argTHIRD = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:2]];
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(argFIRST)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_ATOM) {
    if ([((ComIgormaznitsaProlDataTerm *) nil_chk(argSECOND)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_ATOM) {
      JavaLangStringBuilder *bldr = [[JavaLangStringBuilder alloc] initWithNSString:[argFIRST getText]];
      (void) [bldr appendWithNSString:[argSECOND getText]];
      ComIgormaznitsaProlDataTerm *term = [[ComIgormaznitsaProlDataTerm alloc] initWithNSString:[bldr description]];
      return [((ComIgormaznitsaProlDataTerm *) nil_chk(argTHIRD)) EquWithComIgormaznitsaProlDataTerm:term];
    }
    else {
      NSString *startText = [argFIRST getText];
      NSString *fullText = [((ComIgormaznitsaProlDataTerm *) nil_chk(argTHIRD)) getText];
      if ([((NSString *) nil_chk(startText)) length] > [((NSString *) nil_chk(fullText)) length]) {
        return NO;
      }
      NSString *endText = [fullText substring:[startText length]];
      ComIgormaznitsaProlDataTerm *second = [[ComIgormaznitsaProlDataTerm alloc] initWithNSString:endText];
      return [argSECOND EquWithComIgormaznitsaProlDataTerm:second];
    }
  }
  else {
    NSString *endText = [((ComIgormaznitsaProlDataTerm *) nil_chk(argSECOND)) getText];
    NSString *fullText = [((ComIgormaznitsaProlDataTerm *) nil_chk(argTHIRD)) getText];
    if ([((NSString *) nil_chk(endText)) length] > [((NSString *) nil_chk(fullText)) length]) {
      return NO;
    }
    NSString *startText = [fullText substring:0 endIndex:[fullText length] - [endText length]];
    ComIgormaznitsaProlDataTerm *first = [[ComIgormaznitsaProlDataTerm alloc] initWithNSString:startText];
    return [argFIRST EquWithComIgormaznitsaProlDataTerm:first];
  }
}

+ (BOOL)predicateSTRTRIMWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                   withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *argLeft = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  ComIgormaznitsaProlDataTerm *argRight = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
  ComIgormaznitsaProlDataTerm *result = [[ComIgormaznitsaProlDataTerm alloc] initWithNSString:[((NSString *) nil_chk([((ComIgormaznitsaProlDataTerm *) nil_chk(argLeft)) getText])) trim]];
  return [((ComIgormaznitsaProlDataTerm *) nil_chk(argRight)) EquWithComIgormaznitsaProlDataTerm:result];
}

+ (BOOL)predicateUPPERLOWERWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                      withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *argLeft = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  ComIgormaznitsaProlDataTerm *argRight = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(argLeft)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_ATOM) {
    ComIgormaznitsaProlDataTerm *term = [[ComIgormaznitsaProlDataTerm alloc] initWithNSString:[((NSString *) nil_chk([argLeft getText])) lowercaseString]];
    return [((ComIgormaznitsaProlDataTerm *) nil_chk(argRight)) EquWithComIgormaznitsaProlDataTerm:term];
  }
  else {
    ComIgormaznitsaProlDataTerm *term = [[ComIgormaznitsaProlDataTerm alloc] initWithNSString:[((NSString *) nil_chk([((ComIgormaznitsaProlDataTerm *) nil_chk(argRight)) getText])) uppercaseString]];
    return [argLeft EquWithComIgormaznitsaProlDataTerm:term];
  }
}

+ (BOOL)predicateSTRLENWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                  withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *argLeft = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  ComIgormaznitsaProlDataTerm *argRight = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
  ComIgormaznitsaProlDataTermInteger *result = [[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:[((NSString *) nil_chk([((ComIgormaznitsaProlDataTerm *) nil_chk(argLeft)) getText])) length]];
  return [((ComIgormaznitsaProlDataTerm *) nil_chk(argRight)) EquWithComIgormaznitsaProlDataTerm:result];
}

+ (BOOL)predicateSTRINTWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                  withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *argLeft = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  ComIgormaznitsaProlDataTerm *argRight = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(argLeft)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_ATOM) {
    ComIgormaznitsaProlDataTermInteger *result = nil;
    @try {
      result = [[ComIgormaznitsaProlDataTermInteger alloc] initWithNSString:[((NSString *) nil_chk([argLeft getText])) trim]];
    }
    @catch (JavaLangNumberFormatException *ex) {
      return NO;
    }
    return [((ComIgormaznitsaProlDataTerm *) nil_chk(argRight)) EquWithComIgormaznitsaProlDataTerm:result];
  }
  else {
    ComIgormaznitsaProlDataTerm *result = [[ComIgormaznitsaProlDataTerm alloc] initWithNSString:[((ComIgormaznitsaProlDataTerm *) nil_chk(argRight)) getText]];
    return [argLeft EquWithComIgormaznitsaProlDataTerm:result];
  }
}

+ (BOOL)predicateSTRREALWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                   withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlDataTerm *argLeft = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getElementWithInt:0]];
  ComIgormaznitsaProlDataTerm *argRight = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[predicate getElementWithInt:1]];
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(argLeft)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_ATOM) {
    ComIgormaznitsaProlDataTermFloat *result = nil;
    @try {
      result = [[ComIgormaznitsaProlDataTermFloat alloc] initWithNSString:[((NSString *) nil_chk([argLeft getText])) trim]];
    }
    @catch (JavaLangNumberFormatException *ex) {
      return NO;
    }
    return [((ComIgormaznitsaProlDataTerm *) nil_chk(argRight)) EquWithComIgormaznitsaProlDataTerm:result];
  }
  else {
    ComIgormaznitsaProlDataTerm *result = [[ComIgormaznitsaProlDataTerm alloc] initWithNSString:[((ComIgormaznitsaProlDataTerm *) nil_chk(argRight)) getText]];
    return [argLeft EquWithComIgormaznitsaProlDataTerm:result];
  }
}

- (id)init {
  return [super initWithNSString:@"ProlStringLib"];
}

+ (IOSObjectArray *)__annotations_predicateCONCATWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Concat two strings." withSignature:@"concat/3" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+atom,+atom,?atom", @"+atom,?atom,+atom", @"?atom,+atom,+atom" } count:3 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateSTRTRIMWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Trim string." withSignature:@"str_trim/2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+atom,?atom" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateUPPERLOWERWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Allows to make upper or lower case text version of an atom." withSignature:@"upper_lower/2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+atom,?atom", @"?atom,+atom" } count:2 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateSTRLENWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Get string length." withSignature:@"str_len/2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+atom,?integer" } count:1 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateSTRINTWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Convert a text atom to an integer atom (or back)." withSignature:@"str_int/2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+atom,?integer", @"?atom,+integer" } count:2 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_predicateSTRREALWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsPredicate alloc] initWithReference:@"Convert a text atom to a real numeric atom (or back)." withSignature:@"str_real/2" withTemplate:[IOSObjectArray arrayWithObjects:(id[]) { @"+atom,?number", @"?atom,+number" } count:2 type:[[NSObject class] getClass]]], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "predicateCONCATWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateCONCAT", "Z", 0x19, NULL },
    { "predicateSTRTRIMWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateSTRTRIM", "Z", 0x19, NULL },
    { "predicateUPPERLOWERWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateUPPERLOWER", "Z", 0x19, NULL },
    { "predicateSTRLENWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateSTRLEN", "Z", 0x19, NULL },
    { "predicateSTRINTWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateSTRINT", "Z", 0x19, NULL },
    { "predicateSTRREALWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "predicateSTRREAL", "Z", 0x19, NULL },
    { "init", "ProlStringLibrary", NULL, 0x1, NULL },
  };
  static J2ObjcClassInfo _ComIgormaznitsaProlLibrariesProlStringLibrary = { "ProlStringLibrary", "com.igormaznitsa.prol.libraries", NULL, 0x1, 7, methods, 0, NULL, 0, NULL};
  return &_ComIgormaznitsaProlLibrariesProlStringLibrary;
}

@end
