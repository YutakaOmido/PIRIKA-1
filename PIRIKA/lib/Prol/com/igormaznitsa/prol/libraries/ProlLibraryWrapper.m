//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/igormaznitsa/prol/libraries/ProlLibraryWrapper.java
//
//  Created by katsura on 14/04/13.
//

#include "IOSBooleanArray.h"
#include "IOSByteArray.h"
#include "IOSCharArray.h"
#include "IOSClass.h"
#include "IOSDoubleArray.h"
#include "IOSFloatArray.h"
#include "IOSIntArray.h"
#include "IOSLongArray.h"
#include "IOSObjectArray.h"
#include "IOSShortArray.h"
#include "com/igormaznitsa/prol/annotations/Determined.h"
#include "com/igormaznitsa/prol/annotations/Evaluable.h"
#include "com/igormaznitsa/prol/annotations/WrappedPredicate.h"
#include "com/igormaznitsa/prol/data/NumericTerm.h"
#include "com/igormaznitsa/prol/data/Term.h"
#include "com/igormaznitsa/prol/data/TermFloat.h"
#include "com/igormaznitsa/prol/data/TermInteger.h"
#include "com/igormaznitsa/prol/data/TermList.h"
#include "com/igormaznitsa/prol/data/TermStruct.h"
#include "com/igormaznitsa/prol/exceptions/ProlCriticalError.h"
#include "com/igormaznitsa/prol/libraries/PredicateProcessor.h"
#include "com/igormaznitsa/prol/libraries/ProlLibraryWrapper.h"
#include "com/igormaznitsa/prol/logic/Goal.h"
#include "com/igormaznitsa/prol/logic/ProlContext.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/Error.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/InternalError.h"
#include "java/lang/Long.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/SecurityException.h"
#include "java/lang/Short.h"
#include "java/lang/Void.h"
#include "java/lang/reflect/Array.h"
#include "java/lang/reflect/Method.h"
#include "java/lang/reflect/Modifier.h"
#include "java/util/Arrays.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"

@implementation ComIgormaznitsaProlLibrariesProlLibraryWrapper

static JavaUtilLoggingLogger * ComIgormaznitsaProlLibrariesProlLibraryWrapper_LOG_;
static JavaLangReflectMethod * ComIgormaznitsaProlLibrariesProlLibraryWrapper_EVAL_PREDICATE_HANDLER_;
static JavaLangReflectMethod * ComIgormaznitsaProlLibrariesProlLibraryWrapper_PREDICATE_HANDLER_;

+ (JavaUtilLoggingLogger *)LOG {
  return ComIgormaznitsaProlLibrariesProlLibraryWrapper_LOG_;
}

+ (JavaLangReflectMethod *)EVAL_PREDICATE_HANDLER {
  return ComIgormaznitsaProlLibrariesProlLibraryWrapper_EVAL_PREDICATE_HANDLER_;
}

+ (JavaLangReflectMethod *)PREDICATE_HANDLER {
  return ComIgormaznitsaProlLibrariesProlLibraryWrapper_PREDICATE_HANDLER_;
}

- (id)initWithNSString:(NSString *)libId
                withId:(id)wrappedObj {
  if (self = [super initWithNSString:libId]) {
    self->methodMap_ = [[JavaUtilHashMap alloc] init];
    self->wrappedObject_ = wrappedObj;
    [self fillPredicateTable];
  }
  return self;
}

- (id)getWrappedObject {
  return wrappedObject_;
}

+ (ComIgormaznitsaProlLibrariesProlLibraryWrapper *)makeWrapperWithId:(id)wrappedObj {
  if (wrappedObj == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"You can't supply null as the argument"];
  }
  NSString *newwrapperid = [nil_chk(wrappedObj) description];
  [((JavaUtilLoggingLogger *) nil_chk(ComIgormaznitsaProlLibrariesProlLibraryWrapper_LOG_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel INFO] withNSString:@"Making wrapper for {0}" withId:wrappedObj];
  return [[ComIgormaznitsaProlLibrariesProlLibraryWrapper alloc] initWithNSString:newwrapperid withId:wrappedObj];
}

- (void)fillPredicateTable {
  BOOL onlyStatic = [wrappedObject_ isKindOfClass:[IOSClass class]];
  IOSClass *classOfWrapped = onlyStatic ? (IOSClass *) check_class_cast(wrappedObject_, [IOSClass class]) : [nil_chk(wrappedObject_) getClass];
  IOSObjectArray *methods = [classOfWrapped getDeclaredMethods];
  for (int li = 0; li < (int) [((IOSObjectArray *) nil_chk(methods)) count]; li++) {
    JavaLangReflectMethod *meth = IOSObjectArray_Get(methods, li);
    if ([((JavaLangReflectMethod *) nil_chk(meth)) isAnnotationPresentWithIOSClass:[IOSClass classWithProtocol:@protocol(ComIgormaznitsaProlAnnotationsWrappedPredicate)]]) {
      [((JavaUtilLoggingLogger *) nil_chk(ComIgormaznitsaProlLibrariesProlLibraryWrapper_LOG_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel INFO] withNSString:@"Detected wrapped predicate based on the method ''{0}''" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [meth getName] } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
      BOOL processTheMethod = YES;
      if (onlyStatic && ![JavaLangReflectModifier isStaticWithInt:[meth getModifiers]]) {
        processTheMethod = NO;
        [ComIgormaznitsaProlLibrariesProlLibraryWrapper_LOG_ logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel WARNING] withNSString:@"Nonstatic wrapped predicate for the method ''{0}''" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [meth getName] } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
      }
      if (processTheMethod) {
        id<ComIgormaznitsaProlAnnotationsWrappedPredicate> annot = [meth getAnnotationWithIOSClass:[IOSClass classWithProtocol:@protocol(ComIgormaznitsaProlAnnotationsWrappedPredicate)]];
        NSString *name = [((NSString *) nil_chk([((NSString *) nil_chk([((id<ComIgormaznitsaProlAnnotationsWrappedPredicate>) nil_chk(annot)) Name])) trim])) lowercaseString];
        if ([((NSString *) nil_chk(name)) length] == 0) {
          name = [ComIgormaznitsaProlLibrariesProlLibraryWrapper generatePredicateNameFromMethodNameWithJavaLangReflectMethod:meth];
          [ComIgormaznitsaProlLibrariesProlLibraryWrapper_LOG_ logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel WARNING] withNSString:@"There is not any predefined name so autogenerate ''{0}''" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ name } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
        }
        else {
          [ComIgormaznitsaProlLibrariesProlLibraryWrapper_LOG_ logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel INFO] withNSString:@"Detected the predefined name for a predicate ''{0}''" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ name } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
        }
        if (![ComIgormaznitsaProlLibrariesProlLibraryWrapper checkNameForValidityWithNSString:name]) {
          @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Invalid predicate name detected '%@' [%@]", name, [meth getName]]];
        }
        IOSObjectArray *args = [meth getParameterTypes];
        IOSClass *result = [meth getReturnType];
        BOOL evaluable = [result isAssignableFrom:[IOSClass intClass]] || [result isAssignableFrom:[IOSClass floatClass]];
        if (!evaluable) {
          if (![result isAssignableFrom:[IOSClass voidClass]] && ![result isAssignableFrom:[IOSClass booleanClass]]) {
            @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Wrapped method '%@' returns non void unsupported type [%@]", [meth toGenericString], [result description]]];
          }
        }
        NSString *predicateSignature = [NSString stringWithFormat:@"%@/%d", name, (int) [((IOSObjectArray *) nil_chk(args)) count]];
        ComIgormaznitsaProlLibrariesPredicateProcessor *predprocessor = [[ComIgormaznitsaProlLibrariesPredicateProcessor alloc] initWithComIgormaznitsaProlLibrariesProlAbstractLibrary:self withNSString:name withJavaLangReflectMethod:evaluable ? ComIgormaznitsaProlLibrariesProlLibraryWrapper_EVAL_PREDICATE_HANDLER_ : ComIgormaznitsaProlLibrariesProlLibraryWrapper_PREDICATE_HANDLER_ withComIgormaznitsaProlLibrariesPredicateTemplateArray2:nil];
        if ([((id<JavaUtilMap>) nil_chk(predicateMethodsMap_)) putWithId:predicateSignature withId:predprocessor] == nil) {
          (void) [((id<JavaUtilMap>) nil_chk(methodMap_)) putWithId:predicateSignature withId:meth];
        }
        else {
          [ComIgormaznitsaProlLibrariesProlLibraryWrapper_LOG_ logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel WARNING] withNSString:@"Duplicated processor detected for predicate ''{0}''" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ predicateSignature } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
          JavaLangRuntimeException *runtimeexception = [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Duplicated processor for method '%@' signature '%@'", [meth description], predicateSignature]];
          [ComIgormaznitsaProlLibrariesProlLibraryWrapper_LOG_ throwingWithNSString:[[self getClass] getCanonicalName] withNSString:@"Duplicated processor" withJavaLangThrowable:runtimeexception];
          @throw runtimeexception;
        }
        [ComIgormaznitsaProlLibrariesProlLibraryWrapper_LOG_ logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel INFO] withNSString:@"Predicate processor for ''{0}'' has been created" withId:predicateSignature];
      }
    }
  }
}

- (id)handlePredicateWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  ComIgormaznitsaProlLogicProlContext *context = [((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getContext];
  int arity = [((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) getArity];
  NSString *signature = [predicate getSignature];
  JavaLangReflectMethod *mappedmethod = [((id<JavaUtilMap>) nil_chk(methodMap_)) getWithId:signature];
  if (mappedmethod == nil) {
    ComIgormaznitsaProlExceptionsProlCriticalError *error = [[ComIgormaznitsaProlExceptionsProlCriticalError alloc] initWithNSString:[NSString stringWithFormat:@"Can't find mapped method for signature '%@'", signature]];
    [((JavaUtilLoggingLogger *) nil_chk(ComIgormaznitsaProlLibrariesProlLibraryWrapper_LOG_)) throwingWithNSString:[[self getClass] getCanonicalName] withNSString:@"Can't find mapped method" withJavaLangThrowable:error];
    @throw error;
  }
  IOSObjectArray *argClasses = [((JavaLangReflectMethod *) nil_chk(mappedmethod)) getParameterTypes];
  IOSObjectArray *args = [IOSObjectArray arrayWithLength:arity type:[IOSClass classWithClass:[NSObject class]]];
  for (int li = 0; li < arity; li++) {
    (void) IOSObjectArray_Set(args, li, [ComIgormaznitsaProlLibrariesProlLibraryWrapper term2objWithComIgormaznitsaProlLogicProlContext:context withIOSClass:IOSObjectArray_Get(nil_chk(argClasses), li) withComIgormaznitsaProlDataTerm:[predicate getElementWithInt:li]]);
  }
  id result = [JavaLangBoolean getTRUE];
  @try {
    result = [mappedmethod invokeWithId:wrappedObject_ withNSObjectArray:args];
  }
  @catch (JavaLangException *ex) {
    [((JavaUtilLoggingLogger *) nil_chk(ComIgormaznitsaProlLibrariesProlLibraryWrapper_LOG_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel SEVERE] withNSString:[NSString stringWithFormat:@"Exception during method invoke [%@]", [mappedmethod toGenericString]] withJavaLangThrowable:ex];
    if ([[mappedmethod getReturnType] isAssignableFrom:[IOSClass classWithClass:[NSNumber class]]]) {
      @throw [[ComIgormaznitsaProlExceptionsProlCriticalError alloc] initWithNSString:@"Exception during a wrapped method was thrown" withJavaLangThrowable:ex];
    }
    else {
      result = [JavaLangBoolean getFALSE];
    }
  }
  return result;
}

- (ComIgormaznitsaProlDataTerm *)proxyEvaluablePredicateWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                                                   withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  NSNumber *returned = (NSNumber *) check_class_cast([self handlePredicateWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTermStruct:predicate], [NSNumber class]);
  if (returned == nil) {
    JavaLangNullPointerException *ex = [[JavaLangNullPointerException alloc] initWithNSString:[NSString stringWithFormat:@"A predicate, signed as an evaluable one, has returned null [%@]", [((ComIgormaznitsaProlDataTermStruct *) nil_chk(predicate)) description]]];
    [((JavaUtilLoggingLogger *) nil_chk(ComIgormaznitsaProlLibrariesProlLibraryWrapper_LOG_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel SEVERE] withNSString:@"Detected null as result" withJavaLangThrowable:ex];
    @throw ex;
  }
  return [((ComIgormaznitsaProlLogicProlContext *) nil_chk([((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) getContext])) objectAsTermWithId:returned];
}

- (BOOL)proxyPredicateWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                 withComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  id obj = [self handlePredicateWithComIgormaznitsaProlLogicGoal:goal withComIgormaznitsaProlDataTermStruct:predicate];
  BOOL result = YES;
  if ([obj isKindOfClass:[JavaLangBoolean class]]) {
    result = [((JavaLangBoolean *) nil_chk(((JavaLangBoolean *) check_class_cast(obj, [JavaLangBoolean class])))) booleanValue];
  }
  return result;
}

+ (BOOL)checkNameForValidityWithNSString:(NSString *)name {
  if (name == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"Name can't be null"];
  }
  if ([((NSString *) nil_chk(name)) length] == 0) {
    return NO;
  }
  unichar firstChar = [name charAtWithInt:0];
  if ([JavaLangCharacter isWhitespaceWithChar:firstChar]) {
    return NO;
  }
  if ([JavaLangCharacter isDigitWithChar:firstChar]) {
    return NO;
  }
  if (firstChar == '_') {
    return NO;
  }
  return YES;
}

+ (NSString *)generatePredicateNameFromMethodNameWithJavaLangReflectMethod:(JavaLangReflectMethod *)method {
  NSString *name = [((NSString *) nil_chk([((JavaLangReflectMethod *) nil_chk(method)) getName])) lowercaseString];
  while (YES) {
    if ([((NSString *) nil_chk(name)) charAtWithInt:0] == '_') {
      name = [name substring:1];
    }
    else {
      break;
    }
  }
  if ([((NSString *) nil_chk(name)) length] == 0) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Can't make valid predicate name from the method name '%@'", [method getName]]];
  }
  return name;
}

+ (void)setObjectToArrayElementWithId:(id)array
                              withInt:(int)index
                               withId:(id)element {
  IOSClass *componentclass = [[nil_chk(array) getClass] getComponentType];
  if ([((IOSClass *) nil_chk(componentclass)) isPrimitive]) {
    if (componentclass == [IOSClass intClass]) {
      IOSIntArray *arr = (IOSIntArray *) check_class_cast(array, [IOSIntArray class]);
      (*IOSIntArray_GetRef(arr, index)) = [((JavaLangInteger *) nil_chk((JavaLangInteger *) check_class_cast(element, [JavaLangInteger class]))) intValue];
    }
    else if (componentclass == [IOSClass floatClass]) {
      IOSFloatArray *arr = (IOSFloatArray *) check_class_cast(array, [IOSFloatArray class]);
      (*IOSFloatArray_GetRef(arr, index)) = [((JavaLangFloat *) nil_chk((JavaLangFloat *) check_class_cast(element, [JavaLangFloat class]))) floatValue];
    }
    else if (componentclass == [IOSClass byteClass]) {
      IOSByteArray *arr = (IOSByteArray *) check_class_cast(array, [IOSByteArray class]);
      (*IOSByteArray_GetRef(arr, index)) = [((JavaLangByte *) nil_chk((JavaLangByte *) check_class_cast(element, [JavaLangByte class]))) charValue];
    }
    else if (componentclass == [IOSClass charClass]) {
      IOSCharArray *arr = (IOSCharArray *) check_class_cast(array, [IOSCharArray class]);
      (*IOSCharArray_GetRef(arr, index)) = [((JavaLangCharacter *) nil_chk((JavaLangCharacter *) check_class_cast(element, [JavaLangCharacter class]))) charValue];
    }
    else if (componentclass == [IOSClass shortClass]) {
      IOSShortArray *arr = (IOSShortArray *) check_class_cast(array, [IOSShortArray class]);
      (*IOSShortArray_GetRef(arr, index)) = [((JavaLangShort *) nil_chk((JavaLangShort *) check_class_cast(element, [JavaLangShort class]))) shortValue];
    }
    else if (componentclass == [IOSClass doubleClass]) {
      IOSDoubleArray *arr = (IOSDoubleArray *) check_class_cast(array, [IOSDoubleArray class]);
      (*IOSDoubleArray_GetRef(arr, index)) = [((JavaLangDouble *) nil_chk((JavaLangDouble *) check_class_cast(element, [JavaLangDouble class]))) doubleValue];
    }
    else if (componentclass == [IOSClass booleanClass]) {
      IOSBooleanArray *arr = (IOSBooleanArray *) check_class_cast(array, [IOSBooleanArray class]);
      (*IOSBooleanArray_GetRef(arr, index)) = [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) check_class_cast(element, [JavaLangBoolean class]))) booleanValue];
    }
    else {
      @throw [[ComIgormaznitsaProlExceptionsProlCriticalError alloc] initWithNSString:[NSString stringWithFormat:@"Unsupported primitive type [%@]", [componentclass getCanonicalName]]];
    }
  }
  else {
    (void) IOSObjectArray_Set(((IOSObjectArray *) check_class_cast(array, [IOSObjectArray class])), index, element);
  }
}

+ (id)newArrayWithIOSClass:(IOSClass *)type
                   withInt:(int)length {
  id result = nil;
  if ([((IOSClass *) nil_chk(type)) isPrimitive]) {
    if (type == [IOSClass intClass]) {
      result = [IOSIntArray arrayWithLength:length];
    }
    else if (type == [IOSClass floatClass]) {
      result = [IOSFloatArray arrayWithLength:length];
    }
    else if (type == [IOSClass longClass]) {
      result = [IOSLongArray arrayWithLength:length];
    }
    else if (type == [IOSClass doubleClass]) {
      result = [IOSDoubleArray arrayWithLength:length];
    }
    else if (type == [IOSClass byteClass]) {
      result = [IOSByteArray arrayWithLength:length];
    }
    else if (type == [IOSClass shortClass]) {
      result = [IOSShortArray arrayWithLength:length];
    }
    else if (type == [IOSClass charClass]) {
      result = [IOSCharArray arrayWithLength:length];
    }
    else if (type == [IOSClass booleanClass]) {
      result = [IOSBooleanArray arrayWithLength:length];
    }
    else {
      @throw [[ComIgormaznitsaProlExceptionsProlCriticalError alloc] initWithNSString:[NSString stringWithFormat:@"Unsupported primitive type [%@]", [type getCanonicalName]]];
    }
  }
  else {
    result = [JavaLangReflectArray newInstanceWithIOSClass:type withInt:length];
  }
  return result;
}

+ (id)term2objWithComIgormaznitsaProlLogicProlContext:(ComIgormaznitsaProlLogicProlContext *)context
                                         withIOSClass:(IOSClass *)argclass
                      withComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)term {
  id result = nil;
  if ([((IOSClass *) nil_chk(argclass)) isArray]) {
    IOSClass *arrayclass = [argclass getComponentType];
    switch ([((ComIgormaznitsaProlDataTerm *) nil_chk(term)) getTermType]) {
      case ComIgormaznitsaProlDataTerm_TYPE_LIST:
      {
        ComIgormaznitsaProlDataTermList *list = (ComIgormaznitsaProlDataTermList *) check_class_cast(term, [ComIgormaznitsaProlDataTermList class]);
        if ([list isNullList]) {
          result = [ComIgormaznitsaProlLibrariesProlLibraryWrapper newArrayWithIOSClass:arrayclass withInt:0];
        }
        else {
          int len = [list calculateLength];
          id resultarr = [ComIgormaznitsaProlLibrariesProlLibraryWrapper newArrayWithIOSClass:arrayclass withInt:len];
          ComIgormaznitsaProlDataTermList *lst = list;
          int index = 0;
          while (YES) {
            ComIgormaznitsaProlDataTerm *head = [lst getHead];
            [ComIgormaznitsaProlLibrariesProlLibraryWrapper setObjectToArrayElementWithId:resultarr withInt:index withId:[ComIgormaznitsaProlLibrariesProlLibraryWrapper term2objWithComIgormaznitsaProlLogicProlContext:context withIOSClass:arrayclass withComIgormaznitsaProlDataTerm:head]];
            index++;
            ComIgormaznitsaProlDataTerm *tail = [lst getTail];
            if ([((ComIgormaznitsaProlDataTerm *) nil_chk(tail)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_LIST) {
              if ([((ComIgormaznitsaProlDataTermList *) check_class_cast(tail, [ComIgormaznitsaProlDataTermList class])) isNullList]) {
                break;
              }
              else {
                lst = (ComIgormaznitsaProlDataTermList *) check_class_cast(tail, [ComIgormaznitsaProlDataTermList class]);
              }
            }
            else {
              [ComIgormaznitsaProlLibrariesProlLibraryWrapper setObjectToArrayElementWithId:resultarr withInt:index withId:[ComIgormaznitsaProlLibrariesProlLibraryWrapper term2objWithComIgormaznitsaProlLogicProlContext:context withIOSClass:arrayclass withComIgormaznitsaProlDataTerm:tail]];
              index++;
              break;
            }
          }
          if (len != index) {
            @throw [[ComIgormaznitsaProlExceptionsProlCriticalError alloc] initWithNSString:[NSString stringWithFormat:@"Wrong converted array length detected [%d!=%d]", len, index]];
          }
          result = resultarr;
        }
      }
      break;
      case ComIgormaznitsaProlDataTerm_TYPE_STRUCT:
      {
        ComIgormaznitsaProlDataTermStruct *struct_ = (ComIgormaznitsaProlDataTermStruct *) check_class_cast(term, [ComIgormaznitsaProlDataTermStruct class]);
        int arity = [struct_ getArity];
        id resultarr = [ComIgormaznitsaProlLibrariesProlLibraryWrapper newArrayWithIOSClass:arrayclass withInt:arity + 1];
        [ComIgormaznitsaProlLibrariesProlLibraryWrapper setObjectToArrayElementWithId:resultarr withInt:0 withId:[ComIgormaznitsaProlLibrariesProlLibraryWrapper term2objWithComIgormaznitsaProlLogicProlContext:context withIOSClass:arrayclass withComIgormaznitsaProlDataTerm:[struct_ getFunctor]]];
        for (int li = 0; li < arity; li++) {
          [ComIgormaznitsaProlLibrariesProlLibraryWrapper setObjectToArrayElementWithId:resultarr withInt:li + 1 withId:[ComIgormaznitsaProlLibrariesProlLibraryWrapper term2objWithComIgormaznitsaProlLogicProlContext:context withIOSClass:arrayclass withComIgormaznitsaProlDataTerm:[struct_ getElementWithInt:li]]];
        }
        result = resultarr;
      }
      break;
      default:
      {
        id resultarr = [ComIgormaznitsaProlLibrariesProlLibraryWrapper newArrayWithIOSClass:arrayclass withInt:1];
        [ComIgormaznitsaProlLibrariesProlLibraryWrapper setObjectToArrayElementWithId:resultarr withInt:0 withId:[ComIgormaznitsaProlLibrariesProlLibraryWrapper term2objWithComIgormaznitsaProlLogicProlContext:context withIOSClass:arrayclass withComIgormaznitsaProlDataTerm:term]];
        result = resultarr;
      }
      break;
    }
  }
  else {
    if ([argclass isPrimitive]) {
      if (argclass == [IOSClass intClass]) {
        if ([term isKindOfClass:[ComIgormaznitsaProlDataTermInteger class]]) {
          result = [((ComIgormaznitsaProlDataTermInteger *) nil_chk(((ComIgormaznitsaProlDataTermInteger *) check_class_cast(term, [ComIgormaznitsaProlDataTermInteger class])))) getNumericValue];
        }
      }
      else if (argclass == [IOSClass longClass]) {
        if ([term isKindOfClass:[ComIgormaznitsaProlDataTermInteger class]]) {
          result = [JavaLangLong valueOfWithLong:[((NSNumber *) nil_chk([((ComIgormaznitsaProlDataTermInteger *) nil_chk(((ComIgormaznitsaProlDataTermInteger *) check_class_cast(term, [ComIgormaznitsaProlDataTermInteger class])))) getNumericValue])) intValue]];
        }
      }
      else if (argclass == [IOSClass doubleClass]) {
        if ([term isKindOfClass:[ComIgormaznitsaProlDataTermInteger class]]) {
          result = [JavaLangDouble valueOfWithDouble:[((NSNumber *) nil_chk([((ComIgormaznitsaProlDataTermInteger *) nil_chk(((ComIgormaznitsaProlDataTermInteger *) check_class_cast(term, [ComIgormaznitsaProlDataTermInteger class])))) getNumericValue])) doubleValue]];
        }
        else if ([term isKindOfClass:[ComIgormaznitsaProlDataTermFloat class]]) {
          result = [JavaLangDouble valueOfWithDouble:[((NSNumber *) nil_chk([((ComIgormaznitsaProlDataTermFloat *) nil_chk(((ComIgormaznitsaProlDataTermFloat *) check_class_cast(term, [ComIgormaznitsaProlDataTermFloat class])))) getNumericValue])) doubleValue]];
        }
      }
      else if (argclass == [IOSClass floatClass]) {
        if ([term isKindOfClass:[ComIgormaznitsaProlDataTermInteger class]]) {
          result = [JavaLangFloat valueOfWithFloat:[((NSNumber *) nil_chk([((ComIgormaznitsaProlDataTermInteger *) nil_chk(((ComIgormaznitsaProlDataTermInteger *) check_class_cast(term, [ComIgormaznitsaProlDataTermInteger class])))) getNumericValue])) floatValue]];
        }
        else if ([term isKindOfClass:[ComIgormaznitsaProlDataTermFloat class]]) {
          result = [((ComIgormaznitsaProlDataTermFloat *) nil_chk(((ComIgormaznitsaProlDataTermFloat *) check_class_cast(term, [ComIgormaznitsaProlDataTermFloat class])))) getNumericValue];
        }
      }
      else if (argclass == [IOSClass booleanClass]) {
        if ([term conformsToProtocol: @protocol(ComIgormaznitsaProlDataNumericTerm)]) {
          result = [JavaLangBoolean valueOfWithBoolean:[((NSNumber *) nil_chk([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(((id<ComIgormaznitsaProlDataNumericTerm>) check_protocol_cast(term, @protocol(ComIgormaznitsaProlDataNumericTerm))))) getNumericValue])) intValue] == 0 ? NO : YES];
        }
        else {
          if ([@"true" equalsIgnoreCase:[((ComIgormaznitsaProlDataTerm *) nil_chk(term)) getText]]) {
            result = [JavaLangBoolean valueOfWithBoolean:YES];
          }
          else {
            result = [JavaLangBoolean valueOfWithBoolean:NO];
          }
        }
      }
      else if (argclass == [IOSClass byteClass]) {
        if ([term conformsToProtocol: @protocol(ComIgormaznitsaProlDataNumericTerm)]) {
          result = [JavaLangByte valueOfWithByte:[((NSNumber *) nil_chk([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(((id<ComIgormaznitsaProlDataNumericTerm>) check_protocol_cast(term, @protocol(ComIgormaznitsaProlDataNumericTerm))))) getNumericValue])) charValue]];
        }
      }
      else if (argclass == [IOSClass charClass]) {
        if ([term conformsToProtocol: @protocol(ComIgormaznitsaProlDataNumericTerm)]) {
          result = [[JavaLangCharacter alloc] initWithChar:(unichar) [((NSNumber *) nil_chk([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(((id<ComIgormaznitsaProlDataNumericTerm>) check_protocol_cast(term, @protocol(ComIgormaznitsaProlDataNumericTerm))))) getNumericValue])) shortValue]];
        }
        else if ([((ComIgormaznitsaProlDataTerm *) nil_chk(term)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_ATOM) {
          NSString *text = [term getText];
          if ([((NSString *) nil_chk(text)) length] == 1) {
            result = [JavaLangCharacter valueOfWithChar:[text charAtWithInt:0]];
          }
        }
      }
      else if (argclass == [IOSClass shortClass]) {
        if ([term conformsToProtocol: @protocol(ComIgormaznitsaProlDataNumericTerm)]) {
          result = [JavaLangShort valueOfWithShort:[((NSNumber *) nil_chk([((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(((id<ComIgormaznitsaProlDataNumericTerm>) check_protocol_cast(term, @protocol(ComIgormaznitsaProlDataNumericTerm))))) getNumericValue])) shortValue]];
        }
      }
      else {
        @throw [[ComIgormaznitsaProlExceptionsProlCriticalError alloc] initWithNSString:[NSString stringWithFormat:@"Unsupported primitive type [%@]", [argclass getCanonicalName]]];
      }
    }
    else {
      if (argclass == [IOSClass classWithClass:[NSObject class]]) {
        result = [((ComIgormaznitsaProlLogicProlContext *) nil_chk(context)) termAsObjectWithComIgormaznitsaProlDataTerm:term];
      }
      else if (argclass == [IOSClass classWithClass:[NSString class]]) {
        result = [((ComIgormaznitsaProlDataTerm *) nil_chk(term)) getText];
      }
      else if (argclass == [IOSClass classWithProtocol:@protocol(JavaUtilList)]) {
        result = [JavaUtilArrays asListWithNSObjectArray:(IOSObjectArray *) check_class_cast([ComIgormaznitsaProlLibrariesProlLibraryWrapper term2objWithComIgormaznitsaProlLogicProlContext:context withIOSClass:[([IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]) getClass] withComIgormaznitsaProlDataTerm:term], [IOSObjectArray class])];
      }
      else if (argclass == [IOSClass classWithProtocol:@protocol(JavaUtilSet)]) {
        IOSObjectArray *asarray = (IOSObjectArray *) check_class_cast([ComIgormaznitsaProlLibrariesProlLibraryWrapper term2objWithComIgormaznitsaProlLogicProlContext:context withIOSClass:[([IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]) getClass] withComIgormaznitsaProlDataTerm:term], [IOSObjectArray class]);
        id<JavaUtilSet> resultset = [[JavaUtilHashSet alloc] init];
        [resultset addAllWithJavaUtilCollection:[JavaUtilArrays asListWithNSObjectArray:asarray]];
        result = resultset;
      }
      else {
        @throw [[ComIgormaznitsaProlExceptionsProlCriticalError alloc] initWithNSString:[NSString stringWithFormat:@"Unsupported type [%@]", [argclass getCanonicalName]]];
      }
    }
  }
  if (result == nil) {
    @throw [[ComIgormaznitsaProlExceptionsProlCriticalError alloc] initWithNSString:[NSString stringWithFormat:@"Can't convert '%@' to '%@' compatible representation", [((ComIgormaznitsaProlDataTerm *) nil_chk(term)) description], [argclass getCanonicalName]]];
  }
  return result;
}

+ (void)initialize {
  if (self == [ComIgormaznitsaProlLibrariesProlLibraryWrapper class]) {
    ComIgormaznitsaProlLibrariesProlLibraryWrapper_LOG_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[ComIgormaznitsaProlLibrariesProlLibraryWrapper class]] getCanonicalName]];
    {
      @try {
        ComIgormaznitsaProlLibrariesProlLibraryWrapper_EVAL_PREDICATE_HANDLER_ = [[IOSClass classWithClass:[ComIgormaznitsaProlLibrariesProlLibraryWrapper class]] getDeclaredMethod:@"proxyEvaluablePredicate" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ [IOSClass classWithClass:[ComIgormaznitsaProlLogicGoal class]], [IOSClass classWithClass:[ComIgormaznitsaProlDataTermStruct class]] } count:2 type:[IOSClass classWithClass:[IOSClass class]]]];
        ComIgormaznitsaProlLibrariesProlLibraryWrapper_PREDICATE_HANDLER_ = [[IOSClass classWithClass:[ComIgormaznitsaProlLibrariesProlLibraryWrapper class]] getDeclaredMethod:@"proxyPredicate" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ [IOSClass classWithClass:[ComIgormaznitsaProlLogicGoal class]], [IOSClass classWithClass:[ComIgormaznitsaProlDataTermStruct class]] } count:2 type:[IOSClass classWithClass:[IOSClass class]]]];
      }
      @catch (JavaLangSecurityException *ex) {
        [((JavaUtilLoggingLogger *) nil_chk(ComIgormaznitsaProlLibrariesProlLibraryWrapper_LOG_)) throwingWithNSString:[[IOSClass classWithClass:[ComIgormaznitsaProlLibrariesProlLibraryWrapper class]] getCanonicalName] withNSString:@"static()" withJavaLangThrowable:ex];
        JavaLangError *error = [[JavaLangInternalError alloc] initWithNSString:@"Can't get needed method object for security restrictions"];
        [ComIgormaznitsaProlLibrariesProlLibraryWrapper_LOG_ throwingWithNSString:[[IOSClass classWithClass:[ComIgormaznitsaProlLibrariesProlLibraryWrapper class]] getCanonicalName] withNSString:@"static()" withJavaLangThrowable:error];
        @throw error;
      }
      @catch (JavaLangNoSuchMethodException *ex) {
        [((JavaUtilLoggingLogger *) nil_chk(ComIgormaznitsaProlLibrariesProlLibraryWrapper_LOG_)) throwingWithNSString:[[IOSClass classWithClass:[ComIgormaznitsaProlLibrariesProlLibraryWrapper class]] getCanonicalName] withNSString:@"static()" withJavaLangThrowable:ex];
        JavaLangError *error = [[JavaLangInternalError alloc] initWithNSString:@"Can't get find needed inside method object"];
        [ComIgormaznitsaProlLibrariesProlLibraryWrapper_LOG_ throwingWithNSString:[[IOSClass classWithClass:[ComIgormaznitsaProlLibrariesProlLibraryWrapper class]] getCanonicalName] withNSString:@"static()" withJavaLangThrowable:error];
        @throw error;
      }
    }
  }
}

- (void)copyAllFieldsTo:(ComIgormaznitsaProlLibrariesProlLibraryWrapper *)other {
  [super copyAllFieldsTo:other];
  other->methodMap_ = methodMap_;
  other->wrappedObject_ = wrappedObject_;
}

+ (IOSObjectArray *)__annotations_proxyEvaluablePredicateWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsEvaluable alloc] init], [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:2 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_proxyPredicateWithComIgormaznitsaProlLogicGoal_withComIgormaznitsaProlDataTermStruct_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComIgormaznitsaProlAnnotationsDetermined alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withId:", "ProlLibraryWrapper", NULL, 0x2, NULL },
    { "getWrappedObject", NULL, "Ljava.lang.Object;", 0x1, NULL },
    { "makeWrapperWithId:", "makeWrapper", "Lcom.igormaznitsa.prol.libraries.ProlLibraryWrapper;", 0x9, NULL },
    { "fillPredicateTable", NULL, "V", 0x2, NULL },
    { "handlePredicateWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "handlePredicate", "Ljava.lang.Object;", 0x2, NULL },
    { "proxyEvaluablePredicateWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "proxyEvaluablePredicate", "Lcom.igormaznitsa.prol.data.Term;", 0x4, NULL },
    { "proxyPredicateWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTermStruct:", "proxyPredicate", "Z", 0x4, NULL },
    { "checkNameForValidityWithNSString:", "checkNameForValidity", "Z", 0xa, NULL },
    { "generatePredicateNameFromMethodNameWithJavaLangReflectMethod:", "generatePredicateNameFromMethodName", "Ljava.lang.String;", 0xa, NULL },
    { "setObjectToArrayElementWithId:withInt:withId:", "setObjectToArrayElement", "V", 0xa, NULL },
    { "newArrayWithIOSClass:withInt:", "newArray", "Ljava.lang.Object;", 0xa, NULL },
    { "term2objWithComIgormaznitsaProlLogicProlContext:withIOSClass:withComIgormaznitsaProlDataTerm:", "term2obj", "Ljava.lang.Object;", 0xa, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "LOG_", NULL, 0x1c, "Ljava.util.logging.Logger;" },
    { "wrappedObject_", NULL, 0x12, "Ljava.lang.Object;" },
    { "EVAL_PREDICATE_HANDLER_", NULL, 0x1a, "Ljava.lang.reflect.Method;" },
    { "PREDICATE_HANDLER_", NULL, 0x1a, "Ljava.lang.reflect.Method;" },
    { "methodMap_", NULL, 0x12, "Ljava.util.Map;" },
  };
  static J2ObjcClassInfo _ComIgormaznitsaProlLibrariesProlLibraryWrapper = { "ProlLibraryWrapper", "com.igormaznitsa.prol.libraries", NULL, 0x11, 12, methods, 5, fields, 0, NULL};
  return &_ComIgormaznitsaProlLibrariesProlLibraryWrapper;
}

@end
