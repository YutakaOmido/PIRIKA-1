//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/igormaznitsa/prol/libraries/PredicateTemplate.java
//
//  Created by katsura on 14/04/13.
//

#include "IOSClass.h"
#include "com/igormaznitsa/prol/data/NumericTerm.h"
#include "com/igormaznitsa/prol/data/Operator.h"
#include "com/igormaznitsa/prol/data/Term.h"
#include "com/igormaznitsa/prol/data/TermInteger.h"
#include "com/igormaznitsa/prol/data/TermList.h"
#include "com/igormaznitsa/prol/data/TermStruct.h"
#include "com/igormaznitsa/prol/data/Var.h"
#include "com/igormaznitsa/prol/exceptions/ProlCriticalError.h"
#include "com/igormaznitsa/prol/exceptions/ProlDomainErrorException.h"
#include "com/igormaznitsa/prol/exceptions/ProlInstantiationErrorException.h"
#include "com/igormaznitsa/prol/libraries/PredicateProcessor.h"
#include "com/igormaznitsa/prol/libraries/PredicateTemplate.h"
#include "com/igormaznitsa/prol/utils/Utils.h"
#include "java/lang/Error.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/NoSuchFieldException.h"
#include "java/lang/reflect/Field.h"

@implementation ComIgormaznitsaProlLibrariesPredicateTemplate

+ (int)TYPE_ATOM {
  return ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_ATOM;
}

+ (int)TYPE_ATOM_OR_ATOM_LIST {
  return ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_ATOM_OR_ATOM_LIST;
}

+ (int)TYPE_ATOMIC {
  return ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_ATOMIC;
}

+ (int)TYPE_BYTE {
  return ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_BYTE;
}

+ (int)TYPE_CALLABLE_TERM {
  return ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_CALLABLE_TERM;
}

+ (int)TYPE_CHARACTER {
  return ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_CHARACTER;
}

+ (int)TYPE_CHARACTER_CODE {
  return ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_CHARACTER_CODE;
}

+ (int)TYPE_CHARACTER_CODE_LIST {
  return ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_CHARACTER_CODE_LIST;
}

+ (int)TYPE_CHARACTER_LIST {
  return ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_CHARACTER_LIST;
}

+ (int)TYPE_CLAUSE {
  return ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_CLAUSE;
}

+ (int)TYPE_CLOSE_OPTIONS {
  return ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_CLOSE_OPTIONS;
}

+ (int)TYPE_COMPOUND_TERM {
  return ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_COMPOUND_TERM;
}

+ (int)TYPE_EVALUABLE {
  return ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_EVALUABLE;
}

+ (int)TYPE_FLAG {
  return ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_FLAG;
}

+ (int)TYPE_HEAD {
  return ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_HEAD;
}

+ (int)TYPE_IN_BYTE {
  return ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_IN_BYTE;
}

+ (int)TYPE_IN_CHARACTER {
  return ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_IN_CHARACTER;
}

+ (int)TYPE_IN_CHARACTER_CODE {
  return ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_IN_CHARACTER_CODE;
}

+ (int)TYPE_INTEGER {
  return ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_INTEGER;
}

+ (int)TYPE_IO_MODE {
  return ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_IO_MODE;
}

+ (int)TYPE_LIST {
  return ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_LIST;
}

+ (int)TYPE_NONVAR {
  return ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_NONVAR;
}

+ (int)TYPE_NUMBER {
  return ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_NUMBER;
}

+ (int)TYPE_OPERATOR_SPECIFIER {
  return ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_OPERATOR_SPECIFIER;
}

+ (int)TYPE_PREDICATE_INDICATOR {
  return ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_PREDICATE_INDICATOR;
}

+ (int)TYPE_READ_OPTIONS {
  return ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_READ_OPTIONS;
}

+ (int)TYPE_SOURCE_SINK {
  return ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_SOURCE_SINK;
}

+ (int)TYPE_STREAM {
  return ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_STREAM;
}

+ (int)TYPE_STREAM_OPTIONS {
  return ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_STREAM_OPTIONS;
}

+ (int)TYPE_STREAM_OR_ALIAS {
  return ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_STREAM_OR_ALIAS;
}

+ (int)TYPE_STREAM_POSITION {
  return ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_STREAM_POSITION;
}

+ (int)TYPE_STREAM_PROPERTY {
  return ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_STREAM_PROPERTY;
}

+ (int)TYPE_TERM {
  return ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_TERM;
}

+ (int)TYPE_WRITE_OPTIONS_LIST {
  return ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_WRITE_OPTIONS_LIST;
}

+ (int)TYPE_NON_EMPTY_LIST {
  return ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_NON_EMPTY_LIST;
}

+ (int)TYPE_TRIGGEREVENT {
  return ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_TRIGGEREVENT;
}

+ (int)MODIFIER_SHALL_BE_INSTANTIATED {
  return ComIgormaznitsaProlLibrariesPredicateTemplate_MODIFIER_SHALL_BE_INSTANTIATED;
}

+ (int)MODIFIER_SHALL_REMAIN_UNALTERED {
  return ComIgormaznitsaProlLibrariesPredicateTemplate_MODIFIER_SHALL_REMAIN_UNALTERED;
}

+ (int)MODIFIER_SHALL_BE_VARIABLE {
  return ComIgormaznitsaProlLibrariesPredicateTemplate_MODIFIER_SHALL_BE_VARIABLE;
}

+ (int)MODIFIER_SHALL_BE_INSTANTIATED_OR_VARIABLE {
  return ComIgormaznitsaProlLibrariesPredicateTemplate_MODIFIER_SHALL_BE_INSTANTIATED_OR_VARIABLE;
}

- (id)initWithInt:(int)modifier
          withInt:(int)type {
  if (self = [super init]) {
    self->Modifier_ = modifier;
    self->Type_ = type;
  }
  return self;
}

- (id)initWithNSString:(NSString *)string {
  if (self = [super init]) {
    if (string == nil || [string length] <= 3) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Can't parse template parameter '%@'", string]];
    }
    switch ([((NSString *) nil_chk(string)) charAtWithInt:0]) {
      case '+':
      self->Modifier_ = ComIgormaznitsaProlLibrariesPredicateTemplate_MODIFIER_SHALL_BE_INSTANTIATED;
      break;
      case '@':
      self->Modifier_ = ComIgormaznitsaProlLibrariesPredicateTemplate_MODIFIER_SHALL_REMAIN_UNALTERED;
      break;
      case '-':
      self->Modifier_ = ComIgormaznitsaProlLibrariesPredicateTemplate_MODIFIER_SHALL_BE_VARIABLE;
      break;
      case '?':
      self->Modifier_ = ComIgormaznitsaProlLibrariesPredicateTemplate_MODIFIER_SHALL_BE_INSTANTIATED_OR_VARIABLE;
      break;
      default:
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Unsupported template modifier at '%@'", string]];
    }
    NSString *template_ = [NSString stringWithFormat:@"TYPE_%@", [((NSString *) nil_chk([string substring:1])) uppercaseString]];
    @try {
      JavaLangReflectField *field = [[self getClass] getDeclaredField:template_];
      self->Type_ = [((JavaLangReflectField *) nil_chk(field)) getIntWithId:nil];
    }
    @catch (JavaLangIllegalAccessException *ex) {
      @throw [[JavaLangError alloc] initWithNSString:@"Illegal access error" withJavaLangThrowable:ex];
    }
    @catch (JavaLangNoSuchFieldException *ex) {
      @throw [[ComIgormaznitsaProlExceptionsProlCriticalError alloc] initWithNSString:[NSString stringWithFormat:@"Unsupported template '%@'", string]];
    }
  }
  return self;
}

- (BOOL)checkWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)term {
  int type = [((ComIgormaznitsaProlDataTerm *) nil_chk(term)) getTermType];
  switch (Modifier_) {
    case ComIgormaznitsaProlLibrariesPredicateTemplate_MODIFIER_SHALL_REMAIN_UNALTERED:
    {
      if (type == ComIgormaznitsaProlDataTerm_TYPE_LIST || type == ComIgormaznitsaProlDataTerm_TYPE_STRUCT) {
        [self checkTermForTemplateWithComIgormaznitsaProlDataTerm:term];
        return NO;
      }
    }
    case ComIgormaznitsaProlLibrariesPredicateTemplate_MODIFIER_SHALL_BE_INSTANTIATED:
    {
      if (type == ComIgormaznitsaProlDataTerm_TYPE_VAR && [((ComIgormaznitsaProlDataVar *) check_class_cast(term, [ComIgormaznitsaProlDataVar class])) isUndefined]) {
        @throw [[ComIgormaznitsaProlExceptionsProlInstantiationErrorException alloc] initWithNSString:[NSString stringWithFormat:@"Should be instantiated '%@'", [term getSourceLikeRepresentation]] withComIgormaznitsaProlDataTerm:term];
      }
      [self checkTermForTemplateWithComIgormaznitsaProlDataTerm:term];
    }
    break;
    case ComIgormaznitsaProlLibrariesPredicateTemplate_MODIFIER_SHALL_BE_INSTANTIATED_OR_VARIABLE:
    {
      if (type == ComIgormaznitsaProlDataTerm_TYPE_VAR && [((ComIgormaznitsaProlDataVar *) check_class_cast(term, [ComIgormaznitsaProlDataVar class])) isUndefined]) {
        return NO;
      }
      [self checkTermForTemplateWithComIgormaznitsaProlDataTerm:term];
    }
    break;
    case ComIgormaznitsaProlLibrariesPredicateTemplate_MODIFIER_SHALL_BE_VARIABLE:
    {
      if (type == ComIgormaznitsaProlDataTerm_TYPE_VAR) {
        if (![((ComIgormaznitsaProlDataVar *) check_class_cast(term, [ComIgormaznitsaProlDataVar class])) isUndefined]) {
          @throw [[ComIgormaznitsaProlExceptionsProlInstantiationErrorException alloc] initWithNSString:[NSString stringWithFormat:@"Should not be instantiated '%@'", [term getSourceLikeRepresentation]] withComIgormaznitsaProlDataTerm:term];
        }
      }
      else {
        @throw [[ComIgormaznitsaProlExceptionsProlInstantiationErrorException alloc] initWithNSString:[NSString stringWithFormat:@"Should be noninstantiated variable '%@'", [term getSourceLikeRepresentation]] withComIgormaznitsaProlDataTerm:term];
      }
      return YES;
    }
    default:
    @throw [[ComIgormaznitsaProlExceptionsProlCriticalError alloc] initWithNSString:@"Unknown template modifier"];
  }
  return NO;
}

- (void)checkTermForTemplateWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)term {
  ComIgormaznitsaProlDataTerm *checkAtom = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:term];
  switch (Type_) {
    case ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_ATOM:
    {
      BOOL error = YES;
      if (checkAtom != nil) {
        switch ([checkAtom getTermType]) {
          case ComIgormaznitsaProlDataTerm_TYPE_LIST:
          {
            error = ![((ComIgormaznitsaProlDataTermList *) check_class_cast(checkAtom, [ComIgormaznitsaProlDataTermList class])) isNullList];
          }
          break;
          case ComIgormaznitsaProlDataTerm_TYPE_ATOM:
          {
            error = [checkAtom conformsToProtocol: @protocol(ComIgormaznitsaProlDataNumericTerm)];
          }
          break;
        }
      }
      if (error) {
        @throw [[ComIgormaznitsaProlExceptionsProlInstantiationErrorException alloc] initWithNSString:[NSString stringWithFormat:@"Should be atom '%@'", term] withComIgormaznitsaProlDataTerm:term];
      }
    }
    break;
    case ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_ATOM_OR_ATOM_LIST:
    {
      if (checkAtom != nil) {
        BOOL error = YES;
        switch ([checkAtom getTermType]) {
          case ComIgormaznitsaProlDataTerm_TYPE_ATOM:
          {
            if (!([checkAtom conformsToProtocol: @protocol(ComIgormaznitsaProlDataNumericTerm)])) {
              error = NO;
            }
          }
          break;
          case ComIgormaznitsaProlDataTerm_TYPE_LIST:
          {
            ComIgormaznitsaProlDataTermList *lst = (ComIgormaznitsaProlDataTermList *) check_class_cast(checkAtom, [ComIgormaznitsaProlDataTermList class]);
            error = NO;
            if (lst == [ComIgormaznitsaProlDataTermList NULLLIST]) {
              break;
            }
            while (YES) {
              ComIgormaznitsaProlDataTerm *head = [lst getHead];
              if ([((ComIgormaznitsaProlDataTerm *) nil_chk(head)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_VAR) {
                head = [((ComIgormaznitsaProlDataVar *) check_class_cast(head, [ComIgormaznitsaProlDataVar class])) getValue];
                if (head == nil) {
                  error = YES;
                  break;
                }
              }
              if ([((ComIgormaznitsaProlDataTerm *) nil_chk(head)) getTermType] != ComIgormaznitsaProlDataTerm_TYPE_ATOM) {
                error = YES;
                break;
              }
              ComIgormaznitsaProlDataTerm *tail = [lst getTail];
              if (tail == [ComIgormaznitsaProlDataTermList NULLLIST]) {
                break;
              }
              if ([((ComIgormaznitsaProlDataTerm *) nil_chk(tail)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_LIST) {
                lst = (ComIgormaznitsaProlDataTermList *) check_class_cast(tail, [ComIgormaznitsaProlDataTermList class]);
              }
              else {
                error = YES;
                break;
              }
            }
          }
          break;
        }
        if (error) {
          @throw [[ComIgormaznitsaProlExceptionsProlInstantiationErrorException alloc] initWithNSString:[NSString stringWithFormat:@"Should be atom or atom list '%@'", term] withComIgormaznitsaProlDataTerm:term];
        }
      }
    }
    break;
    case ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_ATOMIC:
    {
      if (checkAtom != nil) {
        BOOL errorresult = NO;
        switch ([checkAtom getTermType]) {
          case ComIgormaznitsaProlDataTerm_TYPE_LIST:
          {
            errorresult = ![((ComIgormaznitsaProlDataTermList *) check_class_cast(checkAtom, [ComIgormaznitsaProlDataTermList class])) isNullList];
          }
          break;
          case ComIgormaznitsaProlDataTerm_TYPE_ATOM:
          {
          }
          break;
          default:
          {
            errorresult = YES;
          }
          break;
        }
        if (errorresult) {
          @throw [[ComIgormaznitsaProlExceptionsProlInstantiationErrorException alloc] initWithNSString:[NSString stringWithFormat:@"Should be atomic '%@'", term] withComIgormaznitsaProlDataTerm:term];
        }
      }
    }
    break;
    case ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_BYTE:
    {
      if (checkAtom != nil) {
        BOOL error = YES;
        if ([checkAtom isKindOfClass:[ComIgormaznitsaProlDataTermInteger class]]) {
          int value = [((NSNumber *) nil_chk([((ComIgormaznitsaProlDataTermInteger *) check_class_cast(checkAtom, [ComIgormaznitsaProlDataTermInteger class])) getNumericValue])) intValue];
          if ((value & (int) 0xFF) == 0) {
            error = NO;
          }
        }
        if (error) {
          @throw [[ComIgormaznitsaProlExceptionsProlInstantiationErrorException alloc] initWithNSString:[NSString stringWithFormat:@"Should be byte '%@'", term] withComIgormaznitsaProlDataTerm:term];
        }
      }
    }
    break;
    case ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_CALLABLE_TERM:
    {
      if (checkAtom != nil) {
        BOOL error = YES;
        int typeAtom = [checkAtom getTermType];
        if (typeAtom == ComIgormaznitsaProlDataTerm_TYPE_ATOM) {
          if (!([checkAtom conformsToProtocol: @protocol(ComIgormaznitsaProlDataNumericTerm)])) {
            error = NO;
          }
        }
        else if (typeAtom == ComIgormaznitsaProlDataTerm_TYPE_STRUCT) {
          error = NO;
        }
        if (error) {
          @throw [[ComIgormaznitsaProlExceptionsProlInstantiationErrorException alloc] initWithNSString:[NSString stringWithFormat:@"Should be callable term '%@'", term] withComIgormaznitsaProlDataTerm:term];
        }
      }
    }
    break;
    case ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_CHARACTER:
    {
      if (checkAtom != nil) {
        BOOL error = YES;
        if ([checkAtom getTermType] == ComIgormaznitsaProlDataTerm_TYPE_ATOM && [((NSString *) nil_chk([checkAtom getText])) length] == 1) {
          error = NO;
        }
        if (error) {
          @throw [[ComIgormaznitsaProlExceptionsProlInstantiationErrorException alloc] initWithNSString:[NSString stringWithFormat:@"Should be character '%@'", term] withComIgormaznitsaProlDataTerm:term];
        }
      }
    }
    break;
    case ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_CHARACTER_CODE:
    {
      if (checkAtom != nil) {
        BOOL error = YES;
        if ([checkAtom isKindOfClass:[ComIgormaznitsaProlDataTermInteger class]]) {
          int value = [((NSNumber *) nil_chk([((ComIgormaznitsaProlDataTermInteger *) check_class_cast(checkAtom, [ComIgormaznitsaProlDataTermInteger class])) getNumericValue])) intValue];
          if ((value & (int) 0xFFFF0000) == 0) {
            error = NO;
          }
        }
        if (error) {
          @throw [[ComIgormaznitsaProlExceptionsProlInstantiationErrorException alloc] initWithNSString:[NSString stringWithFormat:@"Should be character code '%@'", term] withComIgormaznitsaProlDataTerm:term];
        }
      }
    }
    break;
    case ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_CHARACTER_CODE_LIST:
    {
      BOOL error = NO;
      if (checkAtom != nil) {
        if ([checkAtom getTermType] == ComIgormaznitsaProlDataTerm_TYPE_LIST) {
          ComIgormaznitsaProlDataTermList *lst = (ComIgormaznitsaProlDataTermList *) check_class_cast(checkAtom, [ComIgormaznitsaProlDataTermList class]);
          error = NO;
          if (lst == [ComIgormaznitsaProlDataTermList NULLLIST]) {
            break;
          }
          while (YES) {
            ComIgormaznitsaProlDataTerm *head = [lst getHead];
            if ([((ComIgormaznitsaProlDataTerm *) nil_chk(head)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_VAR) {
              head = [((ComIgormaznitsaProlDataVar *) check_class_cast(head, [ComIgormaznitsaProlDataVar class])) getValue];
              if (head == nil) {
                error = YES;
                break;
              }
            }
            if ([((ComIgormaznitsaProlDataTerm *) nil_chk(head)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_ATOM) {
              if ([head isKindOfClass:[ComIgormaznitsaProlDataTermInteger class]]) {
                if (([((NSNumber *) nil_chk([((ComIgormaznitsaProlDataTermInteger *) check_class_cast(head, [ComIgormaznitsaProlDataTermInteger class])) getNumericValue])) intValue] & (int) 0xFFFF0000) != 0) {
                  error = YES;
                  break;
                }
              }
              else {
                error = YES;
                break;
              }
            }
            else {
              error = YES;
              break;
            }
            ComIgormaznitsaProlDataTerm *tail = [lst getTail];
            if (tail == [ComIgormaznitsaProlDataTermList NULLLIST]) {
              break;
            }
            if ([((ComIgormaznitsaProlDataTerm *) nil_chk(tail)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_LIST) {
              lst = (ComIgormaznitsaProlDataTermList *) check_class_cast(tail, [ComIgormaznitsaProlDataTermList class]);
            }
            else {
              error = YES;
              break;
            }
          }
        }
        else {
          error = YES;
        }
      }
      if (error) {
        @throw [[ComIgormaznitsaProlExceptionsProlInstantiationErrorException alloc] initWithNSString:[NSString stringWithFormat:@"Should be character code list '%@'", term] withComIgormaznitsaProlDataTerm:term];
      }
    }
    break;
    case ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_CHARACTER_LIST:
    {
      BOOL error = NO;
      if (checkAtom != nil) {
        if ([checkAtom getTermType] == ComIgormaznitsaProlDataTerm_TYPE_LIST) {
          ComIgormaznitsaProlDataTermList *lst = (ComIgormaznitsaProlDataTermList *) check_class_cast(checkAtom, [ComIgormaznitsaProlDataTermList class]);
          error = NO;
          if (lst == [ComIgormaznitsaProlDataTermList NULLLIST]) {
            break;
          }
          while (YES) {
            ComIgormaznitsaProlDataTerm *head = [lst getHead];
            if ([((ComIgormaznitsaProlDataTerm *) nil_chk(head)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_VAR) {
              head = [((ComIgormaznitsaProlDataVar *) check_class_cast(head, [ComIgormaznitsaProlDataVar class])) getValue];
              if (head == nil) {
                error = YES;
                break;
              }
            }
            if ([((ComIgormaznitsaProlDataTerm *) nil_chk(head)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_ATOM) {
              if ([((NSString *) nil_chk([head getText])) length] != 1) {
                error = YES;
                break;
              }
            }
            else {
              error = YES;
              break;
            }
            ComIgormaznitsaProlDataTerm *tail = [lst getTail];
            if (tail == [ComIgormaznitsaProlDataTermList NULLLIST]) {
              break;
            }
            if ([((ComIgormaznitsaProlDataTerm *) nil_chk(tail)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_LIST) {
              lst = (ComIgormaznitsaProlDataTermList *) check_class_cast(tail, [ComIgormaznitsaProlDataTermList class]);
            }
            else {
              error = YES;
              break;
            }
          }
        }
        else {
          error = YES;
        }
      }
      if (error) {
        @throw [[ComIgormaznitsaProlExceptionsProlInstantiationErrorException alloc] initWithNSString:[NSString stringWithFormat:@"Should be character code list '%@'", term] withComIgormaznitsaProlDataTerm:term];
      }
    }
    break;
    case ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_CLAUSE:
    {
      if (checkAtom != nil) {
        BOOL error = NO;
        switch ([checkAtom getTermType]) {
          case ComIgormaznitsaProlDataTerm_TYPE_ATOM:
          {
            if ([checkAtom conformsToProtocol: @protocol(ComIgormaznitsaProlDataNumericTerm)]) {
              error = YES;
            }
          }
          break;
          case ComIgormaznitsaProlDataTerm_TYPE_STRUCT:
          {
            ComIgormaznitsaProlDataTermStruct *struct_ = (ComIgormaznitsaProlDataTermStruct *) check_class_cast(checkAtom, [ComIgormaznitsaProlDataTermStruct class]);
            ComIgormaznitsaProlDataTerm *functor = [struct_ getFunctor];
            BOOL rule = [struct_ isFunctorLikeRuleDefinition];
            int functorType = [((ComIgormaznitsaProlDataTerm *) nil_chk(functor)) getTermType];
            if (rule) {
              ComIgormaznitsaProlDataTerm *left = [struct_ getElementWithInt:0];
              switch ([((ComIgormaznitsaProlDataTerm *) nil_chk(left)) getTermType]) {
                case ComIgormaznitsaProlDataTerm_TYPE_ATOM:
                {
                  if ([left conformsToProtocol: @protocol(ComIgormaznitsaProlDataNumericTerm)]) {
                    error = YES;
                  }
                }
                break;
                case ComIgormaznitsaProlDataTerm_TYPE_LIST:
                {
                  error = YES;
                }
                break;
                case ComIgormaznitsaProlDataTerm_TYPE_VAR:
                {
                  error = YES;
                }
                break;
              }
            }
            else {
              switch (functorType) {
                case ComIgormaznitsaProlDataTerm_TYPE_ATOM:
                {
                  if ([functor conformsToProtocol: @protocol(ComIgormaznitsaProlDataNumericTerm)]) {
                    error = YES;
                  }
                }
                break;
                case ComIgormaznitsaProlDataTerm_TYPE_LIST:
                {
                  error = YES;
                }
                break;
                case ComIgormaznitsaProlDataTerm_TYPE_VAR:
                {
                  error = YES;
                }
                break;
              }
            }
          }
          break;
          default:
          {
            error = YES;
          }
          break;
        }
        if (error) {
          @throw [[ComIgormaznitsaProlExceptionsProlInstantiationErrorException alloc] initWithNSString:[NSString stringWithFormat:@"Should be clause or atom '%@'", term] withComIgormaznitsaProlDataTerm:term];
        }
      }
    }
    break;
    case ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_COMPOUND_TERM:
    {
      if (checkAtom != nil) {
        switch ([checkAtom getTermType]) {
          case ComIgormaznitsaProlDataTerm_TYPE_LIST:
          case ComIgormaznitsaProlDataTerm_TYPE_STRUCT:
          {
          }
          break;
          default:
          @throw [[ComIgormaznitsaProlExceptionsProlInstantiationErrorException alloc] initWithNSString:[NSString stringWithFormat:@"Should be compound term '%@'", term] withComIgormaznitsaProlDataTerm:term];
        }
      }
    }
    break;
    case ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_EVALUABLE:
    {
      if (checkAtom != nil) {
        BOOL error = YES;
        if ([checkAtom conformsToProtocol: @protocol(ComIgormaznitsaProlDataNumericTerm)]) {
          error = NO;
        }
        else {
          if ([checkAtom getTermType] == ComIgormaznitsaProlDataTerm_TYPE_STRUCT) {
            ComIgormaznitsaProlDataTermStruct *struct_ = (ComIgormaznitsaProlDataTermStruct *) check_class_cast(checkAtom, [ComIgormaznitsaProlDataTermStruct class]);
            ComIgormaznitsaProlLibrariesPredicateProcessor *processor = [struct_ getPredicateProcessor];
            if ([((ComIgormaznitsaProlLibrariesPredicateProcessor *) nil_chk(processor)) isEvaluable]) {
              error = NO;
            }
          }
        }
        if (error) {
          @throw [[ComIgormaznitsaProlExceptionsProlInstantiationErrorException alloc] initWithNSString:[NSString stringWithFormat:@"Should be evaluable '%@'", term] withComIgormaznitsaProlDataTerm:term];
        }
      }
    }
    break;
    case ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_HEAD:
    {
      if (checkAtom != nil) {
        BOOL error = YES;
        switch ([checkAtom getTermType]) {
          case ComIgormaznitsaProlDataTerm_TYPE_ATOM:
          {
            if (!([checkAtom conformsToProtocol: @protocol(ComIgormaznitsaProlDataNumericTerm)])) {
              error = NO;
            }
          }
          break;
          case ComIgormaznitsaProlDataTerm_TYPE_STRUCT:
          {
            ComIgormaznitsaProlDataTerm *functor = [((ComIgormaznitsaProlDataTermStruct *) check_class_cast(checkAtom, [ComIgormaznitsaProlDataTermStruct class])) getFunctor];
            if ([((ComIgormaznitsaProlDataTerm *) nil_chk(functor)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_ATOM) {
              error = NO;
            }
          }
          break;
        }
        if (error) {
          @throw [[ComIgormaznitsaProlExceptionsProlInstantiationErrorException alloc] initWithNSString:@"Imcompatible clause head" withComIgormaznitsaProlDataTerm:term];
        }
      }
    }
    break;
    case ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_IN_BYTE:
    {
      BOOL error = NO;
      if (checkAtom != nil) {
        if ([checkAtom isKindOfClass:[ComIgormaznitsaProlDataTermInteger class]]) {
          int val = [((NSNumber *) nil_chk([((ComIgormaznitsaProlDataTermInteger *) check_class_cast(checkAtom, [ComIgormaznitsaProlDataTermInteger class])) getNumericValue])) intValue];
          if ((val & (int) 0xFF) != 0 && val == -1) {
            error = YES;
          }
        }
        else {
          error = YES;
        }
      }
      if (error) {
        @throw [[ComIgormaznitsaProlExceptionsProlInstantiationErrorException alloc] initWithNSString:[NSString stringWithFormat:@"Should be byte or -1 '%@'", term] withComIgormaznitsaProlDataTerm:term];
      }
    }
    break;
    case ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_IN_CHARACTER:
    {
      BOOL error = NO;
      if (checkAtom != nil) {
        if ([checkAtom getTermType] == ComIgormaznitsaProlDataTerm_TYPE_ATOM) {
          NSString *text = [checkAtom getText];
          if ([((NSString *) nil_chk(text)) length] != 1 && ![@"end_of_file" isEqual:text]) {
            error = YES;
          }
        }
        else {
          error = YES;
        }
      }
      if (error) {
        @throw [[ComIgormaznitsaProlExceptionsProlInstantiationErrorException alloc] initWithNSString:[NSString stringWithFormat:@"Should be character code or -1 '%@'", term] withComIgormaznitsaProlDataTerm:term];
      }
    }
    break;
    case ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_IN_CHARACTER_CODE:
    {
      BOOL error = NO;
      if (checkAtom != nil) {
        if ([checkAtom isKindOfClass:[ComIgormaznitsaProlDataTermInteger class]]) {
          int val = [((NSNumber *) nil_chk([((ComIgormaznitsaProlDataTermInteger *) check_class_cast(checkAtom, [ComIgormaznitsaProlDataTermInteger class])) getNumericValue])) intValue];
          if ((val & (int) 0xFFFF0000) != 0 && val != -1) {
            error = YES;
          }
        }
        else {
          error = YES;
        }
      }
      if (error) {
        @throw [[ComIgormaznitsaProlExceptionsProlInstantiationErrorException alloc] initWithNSString:[NSString stringWithFormat:@"Should be character code or -1 '%@'", term] withComIgormaznitsaProlDataTerm:term];
      }
    }
    break;
    case ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_INTEGER:
    {
      if (checkAtom != nil && !([checkAtom isKindOfClass:[ComIgormaznitsaProlDataTermInteger class]])) {
        @throw [[ComIgormaznitsaProlExceptionsProlInstantiationErrorException alloc] initWithNSString:[NSString stringWithFormat:@"Should be integer '%@'", term] withComIgormaznitsaProlDataTerm:term];
      }
    }
    break;
    case ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_IO_MODE:
    {
      if (checkAtom != nil) {
        BOOL error = YES;
        if ([checkAtom getTermType] == ComIgormaznitsaProlDataTerm_TYPE_ATOM) {
          NSString *text = [checkAtom getText];
          if ([((NSString *) nil_chk(text)) isEqual:@"read"] || [text isEqual:@"write"] || [text isEqual:@"append"]) {
            error = NO;
          }
        }
        if (error) {
          @throw [[ComIgormaznitsaProlExceptionsProlInstantiationErrorException alloc] initWithNSString:[NSString stringWithFormat:@"Should be 'read', 'write' or 'append' [%@]", term] withComIgormaznitsaProlDataTerm:term];
        }
      }
    }
    break;
    case ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_LIST:
    {
      if (checkAtom != nil) {
        if ([checkAtom getTermType] != ComIgormaznitsaProlDataTerm_TYPE_LIST) {
          @throw [[ComIgormaznitsaProlExceptionsProlInstantiationErrorException alloc] initWithNSString:[NSString stringWithFormat:@"Should be list '%@'", term] withComIgormaznitsaProlDataTerm:term];
        }
      }
    }
    break;
    case ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_NON_EMPTY_LIST:
    {
      if (checkAtom != nil) {
        if ([checkAtom getTermType] != ComIgormaznitsaProlDataTerm_TYPE_LIST) {
          @throw [[ComIgormaznitsaProlExceptionsProlInstantiationErrorException alloc] initWithNSString:[NSString stringWithFormat:@"Should be list '%@'", term] withComIgormaznitsaProlDataTerm:term];
        }
        else {
          if (checkAtom == [ComIgormaznitsaProlDataTermList NULLLIST]) {
            @throw [[ComIgormaznitsaProlExceptionsProlInstantiationErrorException alloc] initWithNSString:[NSString stringWithFormat:@"Should not be empty list '%@'", term] withComIgormaznitsaProlDataTerm:term];
          }
        }
      }
    }
    break;
    case ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_TRIGGEREVENT:
    {
      if (checkAtom != nil) {
        if ([checkAtom getTermType] != ComIgormaznitsaProlDataTerm_TYPE_ATOM) {
          @throw [[ComIgormaznitsaProlExceptionsProlInstantiationErrorException alloc] initWithNSString:[NSString stringWithFormat:@"Should be an atom '%@'", term] withComIgormaznitsaProlDataTerm:term];
        }
        else {
          NSString *value = [checkAtom getText];
          if (![@"onassert" isEqual:value] && ![@"onretract" isEqual:value] && ![@"onassertretract" isEqual:value]) {
            @throw [[ComIgormaznitsaProlExceptionsProlDomainErrorException alloc] initWithNSString:[NSString stringWithFormat:@"Should be a value from the list [onassert, onretract, onassertretract] '%@'", term] withComIgormaznitsaProlDataTerm:term];
          }
        }
      }
    }
    break;
    case ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_NONVAR:
    {
      if (checkAtom == nil) {
        @throw [[ComIgormaznitsaProlExceptionsProlInstantiationErrorException alloc] initWithNSString:[NSString stringWithFormat:@"Should be nonvar '%@'", term] withComIgormaznitsaProlDataTerm:term];
      }
    }
    break;
    case ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_NUMBER:
    {
      if (checkAtom != nil) {
        if (!([checkAtom conformsToProtocol: @protocol(ComIgormaznitsaProlDataNumericTerm)])) {
          @throw [[ComIgormaznitsaProlExceptionsProlInstantiationErrorException alloc] initWithNSString:[NSString stringWithFormat:@"Should be number '%@'", term] withComIgormaznitsaProlDataTerm:term];
        }
      }
    }
    break;
    case ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_OPERATOR_SPECIFIER:
    {
      BOOL error = NO;
      if (checkAtom != nil) {
        if ([checkAtom getTermType] == ComIgormaznitsaProlDataTerm_TYPE_ATOM && !([checkAtom conformsToProtocol: @protocol(ComIgormaznitsaProlDataNumericTerm)])) {
          NSString *text = [checkAtom getText];
          error = YES;
          if ([ComIgormaznitsaProlDataOperator getTypeFromStringWithNSString:text] >= 0) {
            error = NO;
          }
        }
        else {
          error = YES;
        }
      }
      else {
        error = YES;
      }
      if (error) {
        @throw [[ComIgormaznitsaProlExceptionsProlDomainErrorException alloc] initWithNSString:[NSString stringWithFormat:@"Should be only [xfx,yfx,xfy,xf,fx,yf,fy] but '%@'", term] withComIgormaznitsaProlDataTerm:term];
      }
    }
    break;
    case ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_PREDICATE_INDICATOR:
    {
      if (checkAtom != nil) {
        BOOL error = YES;
        switch ([checkAtom getTermType]) {
          case ComIgormaznitsaProlDataTerm_TYPE_STRUCT:
          {
            error = [ComIgormaznitsaProlUtilsUtils extractPredicateSignatureFromStructureWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTermStruct *) check_class_cast(checkAtom, [ComIgormaznitsaProlDataTermStruct class])] == nil;
          }
          break;
        }
        if (error) {
          @throw [[ComIgormaznitsaProlExceptionsProlInstantiationErrorException alloc] initWithNSString:[NSString stringWithFormat:@"Should be predicate indicator '%@'", term] withComIgormaznitsaProlDataTerm:term];
        }
      }
    }
    break;
    case ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_TERM:
    {
    }
    break;
    case ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_FLAG:
    case ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_CLOSE_OPTIONS:
    case ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_READ_OPTIONS:
    case ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_SOURCE_SINK:
    case ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_STREAM:
    case ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_STREAM_OPTIONS:
    case ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_STREAM_OR_ALIAS:
    case ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_STREAM_POSITION:
    case ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_STREAM_PROPERTY:
    case ComIgormaznitsaProlLibrariesPredicateTemplate_TYPE_WRITE_OPTIONS_LIST:
    default:
    @throw [[ComIgormaznitsaProlExceptionsProlCriticalError alloc] initWithNSString:@"Unknown or nonimplemented template type"];
  }
}

- (void)copyAllFieldsTo:(ComIgormaznitsaProlLibrariesPredicateTemplate *)other {
  [super copyAllFieldsTo:other];
  other->Modifier_ = Modifier_;
  other->Type_ = Type_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:", "PredicateTemplate", NULL, 0x1, NULL },
    { "initWithNSString:", "PredicateTemplate", NULL, 0x1, NULL },
    { "checkWithComIgormaznitsaProlDataTerm:", "check", "Z", 0x11, NULL },
    { "checkTermForTemplateWithComIgormaznitsaProlDataTerm:", "checkTermForTemplate", "V", 0x12, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "TYPE_ATOM_", NULL, 0x19, "I" },
    { "TYPE_ATOM_OR_ATOM_LIST_", NULL, 0x19, "I" },
    { "TYPE_ATOMIC_", NULL, 0x19, "I" },
    { "TYPE_BYTE_", NULL, 0x19, "I" },
    { "TYPE_CALLABLE_TERM_", NULL, 0x19, "I" },
    { "TYPE_CHARACTER_", NULL, 0x19, "I" },
    { "TYPE_CHARACTER_CODE_", NULL, 0x19, "I" },
    { "TYPE_CHARACTER_CODE_LIST_", NULL, 0x19, "I" },
    { "TYPE_CHARACTER_LIST_", NULL, 0x19, "I" },
    { "TYPE_CLAUSE_", NULL, 0x19, "I" },
    { "TYPE_CLOSE_OPTIONS_", NULL, 0x19, "I" },
    { "TYPE_COMPOUND_TERM_", NULL, 0x19, "I" },
    { "TYPE_EVALUABLE_", NULL, 0x19, "I" },
    { "TYPE_FLAG_", NULL, 0x19, "I" },
    { "TYPE_HEAD_", NULL, 0x19, "I" },
    { "TYPE_IN_BYTE_", NULL, 0x19, "I" },
    { "TYPE_IN_CHARACTER_", NULL, 0x19, "I" },
    { "TYPE_IN_CHARACTER_CODE_", NULL, 0x19, "I" },
    { "TYPE_INTEGER_", NULL, 0x19, "I" },
    { "TYPE_IO_MODE_", NULL, 0x19, "I" },
    { "TYPE_LIST_", NULL, 0x19, "I" },
    { "TYPE_NONVAR_", NULL, 0x19, "I" },
    { "TYPE_NUMBER_", NULL, 0x19, "I" },
    { "TYPE_OPERATOR_SPECIFIER_", NULL, 0x19, "I" },
    { "TYPE_PREDICATE_INDICATOR_", NULL, 0x19, "I" },
    { "TYPE_READ_OPTIONS_", NULL, 0x19, "I" },
    { "TYPE_SOURCE_SINK_", NULL, 0x19, "I" },
    { "TYPE_STREAM_", NULL, 0x19, "I" },
    { "TYPE_STREAM_OPTIONS_", NULL, 0x19, "I" },
    { "TYPE_STREAM_OR_ALIAS_", NULL, 0x19, "I" },
    { "TYPE_STREAM_POSITION_", NULL, 0x19, "I" },
    { "TYPE_STREAM_PROPERTY_", NULL, 0x19, "I" },
    { "TYPE_TERM_", NULL, 0x19, "I" },
    { "TYPE_WRITE_OPTIONS_LIST_", NULL, 0x19, "I" },
    { "TYPE_NON_EMPTY_LIST_", NULL, 0x19, "I" },
    { "TYPE_TRIGGEREVENT_", NULL, 0x19, "I" },
    { "MODIFIER_SHALL_BE_INSTANTIATED_", NULL, 0x19, "I" },
    { "MODIFIER_SHALL_REMAIN_UNALTERED_", NULL, 0x19, "I" },
    { "MODIFIER_SHALL_BE_VARIABLE_", NULL, 0x19, "I" },
    { "MODIFIER_SHALL_BE_INSTANTIATED_OR_VARIABLE_", NULL, 0x19, "I" },
    { "Type_", NULL, 0x11, "I" },
    { "Modifier_", NULL, 0x11, "I" },
  };
  static J2ObjcClassInfo _ComIgormaznitsaProlLibrariesPredicateTemplate = { "PredicateTemplate", "com.igormaznitsa.prol.libraries", NULL, 0x1, 4, methods, 42, fields, 0, NULL};
  return &_ComIgormaznitsaProlLibrariesPredicateTemplate;
}

@end
