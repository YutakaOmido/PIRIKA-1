//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/igormaznitsa/prol/exceptions/ProlPermissionErrorException.java
//
//  Created by katsura on 14/04/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/igormaznitsa/prol/data/Term.h"
#include "com/igormaznitsa/prol/data/TermStruct.h"
#include "com/igormaznitsa/prol/exceptions/ProlAbstractCatcheableException.h"
#include "com/igormaznitsa/prol/exceptions/ProlPermissionErrorException.h"
#include "java/lang/Throwable.h"

@implementation ComIgormaznitsaProlExceptionsProlPermissionErrorException

static ComIgormaznitsaProlDataTerm * ComIgormaznitsaProlExceptionsProlPermissionErrorException_TERM_ERROR_;

+ (long long int)serialVersionUID {
  return ComIgormaznitsaProlExceptionsProlPermissionErrorException_serialVersionUID;
}

+ (ComIgormaznitsaProlDataTerm *)TERM_ERROR {
  return ComIgormaznitsaProlExceptionsProlPermissionErrorException_TERM_ERROR_;
}

- (id)initWithNSString:(NSString *)operation
          withNSString:(NSString *)permissionType
withComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)culprit
 withJavaLangThrowable:(JavaLangThrowable *)cause {
  if (self = [super initWithComIgormaznitsaProlDataTerm:culprit withJavaLangThrowable:cause]) {
    self->operation_ = operation;
    self->permissionType_ = permissionType;
  }
  return self;
}

- (id)initWithNSString:(NSString *)operation
          withNSString:(NSString *)permissionType
          withNSString:(NSString *)message
withComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)culprit
 withJavaLangThrowable:(JavaLangThrowable *)cause {
  if (self = [super initWithNSString:message withComIgormaznitsaProlDataTerm:culprit withJavaLangThrowable:cause]) {
    self->operation_ = operation;
    self->permissionType_ = permissionType;
  }
  return self;
}

- (id)initWithNSString:(NSString *)operation
          withNSString:(NSString *)permissionType
          withNSString:(NSString *)message
withComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)culprit {
  if (self = [super initWithNSString:message withComIgormaznitsaProlDataTerm:culprit]) {
    self->operation_ = operation;
    self->permissionType_ = permissionType;
  }
  return self;
}

- (id)initWithNSString:(NSString *)operation
          withNSString:(NSString *)permissionType
withComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)culprit {
  if (self = [super initWithComIgormaznitsaProlDataTerm:culprit]) {
    self->operation_ = operation;
    self->permissionType_ = permissionType;
  }
  return self;
}

- (NSString *)getOperation {
  return operation_;
}

- (NSString *)getPermissionType {
  return permissionType_;
}

- (ComIgormaznitsaProlDataTerm *)getFunctorForErrorStruct {
  return ComIgormaznitsaProlExceptionsProlPermissionErrorException_TERM_ERROR_;
}

- (ComIgormaznitsaProlDataTermStruct *)getAsStruct {
  ComIgormaznitsaProlDataTermStruct *struct_ = [[ComIgormaznitsaProlDataTermStruct alloc] initWithComIgormaznitsaProlDataTerm:ComIgormaznitsaProlExceptionsProlPermissionErrorException_TERM_ERROR_ withComIgormaznitsaProlDataTermArray:[IOSObjectArray arrayWithObjects:(id[]){ (operation_ == nil ? [ComIgormaznitsaProlExceptionsProlAbstractCatcheableException UNDEFINED] : [[ComIgormaznitsaProlDataTerm alloc] initWithNSString:operation_]), (permissionType_ == nil ? [ComIgormaznitsaProlExceptionsProlAbstractCatcheableException UNDEFINED] : [[ComIgormaznitsaProlDataTerm alloc] initWithNSString:permissionType_]), [self getCulprit] == nil ? [ComIgormaznitsaProlExceptionsProlAbstractCatcheableException UNDEFINED] : [self getCulprit] } count:3 type:[IOSClass classWithClass:[ComIgormaznitsaProlDataTerm class]]]];
  [struct_ setCarriedObjectWithJavaIoSerializable:self];
  return struct_;
}

+ (void)initialize {
  if (self == [ComIgormaznitsaProlExceptionsProlPermissionErrorException class]) {
    ComIgormaznitsaProlExceptionsProlPermissionErrorException_TERM_ERROR_ = [[ComIgormaznitsaProlDataTerm alloc] initWithNSString:@"permission_error"];
  }
}

- (void)copyAllFieldsTo:(ComIgormaznitsaProlExceptionsProlPermissionErrorException *)other {
  [super copyAllFieldsTo:other];
  other->operation_ = operation_;
  other->permissionType_ = permissionType_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withNSString:withComIgormaznitsaProlDataTerm:withJavaLangThrowable:", "ProlPermissionErrorException", NULL, 0x1, NULL },
    { "initWithNSString:withNSString:withNSString:withComIgormaznitsaProlDataTerm:withJavaLangThrowable:", "ProlPermissionErrorException", NULL, 0x1, NULL },
    { "initWithNSString:withNSString:withNSString:withComIgormaznitsaProlDataTerm:", "ProlPermissionErrorException", NULL, 0x1, NULL },
    { "initWithNSString:withNSString:withComIgormaznitsaProlDataTerm:", "ProlPermissionErrorException", NULL, 0x1, NULL },
    { "getOperation", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getPermissionType", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getFunctorForErrorStruct", NULL, "Lcom.igormaznitsa.prol.data.Term;", 0x1, NULL },
    { "getAsStruct", NULL, "Lcom.igormaznitsa.prol.data.TermStruct;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J" },
    { "TERM_ERROR_", NULL, 0x1a, "Lcom.igormaznitsa.prol.data.Term;" },
    { "operation_", NULL, 0x12, "Ljava.lang.String;" },
    { "permissionType_", NULL, 0x12, "Ljava.lang.String;" },
  };
  static J2ObjcClassInfo _ComIgormaznitsaProlExceptionsProlPermissionErrorException = { "ProlPermissionErrorException", "com.igormaznitsa.prol.exceptions", NULL, 0x1, 8, methods, 4, fields, 0, NULL};
  return &_ComIgormaznitsaProlExceptionsProlPermissionErrorException;
}

@end
