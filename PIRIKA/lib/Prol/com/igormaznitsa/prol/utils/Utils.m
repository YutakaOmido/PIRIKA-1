//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/igormaznitsa/prol/utils/Utils.java
//
//  Created by katsura on 14/04/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/igormaznitsa/prol/annotations/Determined.h"
#include "com/igormaznitsa/prol/annotations/Predicate.h"
#include "com/igormaznitsa/prol/annotations/PredicateSynonyms.h"
#include "com/igormaznitsa/prol/annotations/ProlOperator.h"
#include "com/igormaznitsa/prol/annotations/ProlOperators.h"
#include "com/igormaznitsa/prol/data/NumericTerm.h"
#include "com/igormaznitsa/prol/data/Operator.h"
#include "com/igormaznitsa/prol/data/Term.h"
#include "com/igormaznitsa/prol/data/TermInteger.h"
#include "com/igormaznitsa/prol/data/TermList.h"
#include "com/igormaznitsa/prol/data/TermStruct.h"
#include "com/igormaznitsa/prol/data/Var.h"
#include "com/igormaznitsa/prol/exceptions/ProlInstantiationErrorException.h"
#include "com/igormaznitsa/prol/exceptions/ProlTypeErrorException.h"
#include "com/igormaznitsa/prol/libraries/PredicateProcessor.h"
#include "com/igormaznitsa/prol/libraries/ProlAbstractLibrary.h"
#include "com/igormaznitsa/prol/logic/ProlContext.h"
#include "com/igormaznitsa/prol/parser/ProlConsult.h"
#include "com/igormaznitsa/prol/utils/Utils.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/Character.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/Throwable.h"
#include "java/lang/reflect/Method.h"
#include "java/net/URL.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Comparator.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"

@implementation ComIgormaznitsaProlUtilsUtils

static JavaUtilLoggingLogger * ComIgormaznitsaProlUtilsUtils_LOG_;
static id<JavaUtilComparator> ComIgormaznitsaProlUtilsUtils_TERM_COMPARATOR_;

+ (JavaUtilLoggingLogger *)LOG {
  return ComIgormaznitsaProlUtilsUtils_LOG_;
}

+ (id<JavaUtilComparator>)TERM_COMPARATOR {
  return ComIgormaznitsaProlUtilsUtils_TERM_COMPARATOR_;
}

- (id)init {
  return [super init];
}

+ (id<JavaUtilMap>)fillTableWithVarsWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)term {
  id<JavaUtilMap> vars = [[JavaUtilHashMap alloc] init];
  [((ComIgormaznitsaProlDataTerm *) nil_chk(term)) fillVarablesWithJavaUtilMap:vars];
  return vars;
}

+ (NSNumber *)getNumberFromElementWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)term {
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(term)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_VAR) {
    ComIgormaznitsaProlDataTerm *origTerm = term;
    term = [((ComIgormaznitsaProlDataVar *) check_class_cast(term, [ComIgormaznitsaProlDataVar class])) getValue];
    if (term == nil) {
      @throw [[ComIgormaznitsaProlExceptionsProlInstantiationErrorException alloc] initWithNSString:@"NonInstantiated variable" withComIgormaznitsaProlDataTerm:origTerm];
    }
  }
  if ([term conformsToProtocol: @protocol(ComIgormaznitsaProlDataNumericTerm)]) {
    return [((id<ComIgormaznitsaProlDataNumericTerm>) nil_chk(((id<ComIgormaznitsaProlDataNumericTerm>) check_protocol_cast(term, @protocol(ComIgormaznitsaProlDataNumericTerm))))) getNumericValue];
  }
  else {
    @throw [[ComIgormaznitsaProlExceptionsProlTypeErrorException alloc] initWithNSString:@"numeric" withNSString:@"NonNumeric term" withComIgormaznitsaProlDataTerm:term];
  }
}

+ (NSString *)getStringFromElementWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)term {
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(term)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_VAR) {
    ComIgormaznitsaProlDataTerm *origTerm = term;
    term = [((ComIgormaznitsaProlDataVar *) check_class_cast(term, [ComIgormaznitsaProlDataVar class])) getValue];
    if (term == nil) {
      @throw [[ComIgormaznitsaProlExceptionsProlInstantiationErrorException alloc] initWithNSString:@"NonInstantiated variable" withComIgormaznitsaProlDataTerm:origTerm];
    }
  }
  return [((ComIgormaznitsaProlDataTerm *) nil_chk(term)) forWrite];
}

+ (JavaLangThrowable *)getRootThrowableWithJavaLangThrowable:(JavaLangThrowable *)ex {
  while (YES) {
    if ([((JavaLangThrowable *) nil_chk(ex)) getCause] == nil) {
      break;
    }
    ex = [ex getCause];
  }
  return ex;
}

+ (ComIgormaznitsaProlDataTerm *)getTermFromElementWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)element {
  if ([((ComIgormaznitsaProlDataTerm *) nil_chk(element)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_VAR) {
    ComIgormaznitsaProlDataTerm *val = [((ComIgormaznitsaProlDataVar *) check_class_cast(element, [ComIgormaznitsaProlDataVar class])) getValue];
    if (val == nil) {
      return element;
    }
    else {
      return val;
    }
  }
  else {
    return element;
  }
}

+ (ComIgormaznitsaProlDataTerm *)getListAsAtomWithComIgormaznitsaProlLogicProlContext:(ComIgormaznitsaProlLogicProlContext *)context
                                                  withComIgormaznitsaProlDataTermList:(ComIgormaznitsaProlDataTermList *)list {
  if (list == [ComIgormaznitsaProlDataTermList NULLLIST]) {
    return [[ComIgormaznitsaProlDataTerm alloc] initWithNSString:@"<empty>"];
  }
  if ([((ComIgormaznitsaProlDataTermList *) nil_chk(list)) getTail] == [ComIgormaznitsaProlDataTermList NULLLIST]) {
    return [list getHead];
  }
  else {
    int length = [list calculateLength];
    if (length == 3) {
      if ([((NSString *) nil_chk([((ComIgormaznitsaProlDataTerm *) nil_chk([list getHead])) getText])) isEqual:@"."]) {
        ComIgormaznitsaProlDataTermList *secondElement = (ComIgormaznitsaProlDataTermList *) check_class_cast([list getTail], [ComIgormaznitsaProlDataTermList class]);
        ComIgormaznitsaProlDataTermList *thirdElement = (ComIgormaznitsaProlDataTermList *) check_class_cast([((ComIgormaznitsaProlDataTermList *) nil_chk(secondElement)) getTail], [ComIgormaznitsaProlDataTermList class]);
        if ([((ComIgormaznitsaProlDataTerm *) nil_chk([((ComIgormaznitsaProlDataTermList *) nil_chk(thirdElement)) getHead])) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_LIST) {
          return [[ComIgormaznitsaProlDataTermList alloc] initWithComIgormaznitsaProlDataTerm:[secondElement getHead] withComIgormaznitsaProlDataTerm:[thirdElement getHead]];
        }
      }
    }
    ComIgormaznitsaProlDataTermStruct *result = nil;
    if (length == 1) {
      result = [[ComIgormaznitsaProlDataTermStruct alloc] initWithComIgormaznitsaProlDataTerm:[list getHead]];
    }
    else {
      IOSObjectArray *elements = [IOSObjectArray arrayWithLength:length - 1 type:[IOSClass classWithClass:[ComIgormaznitsaProlDataTerm class]]];
      ComIgormaznitsaProlDataTermList *lst = (ComIgormaznitsaProlDataTermList *) check_class_cast([list getTail], [ComIgormaznitsaProlDataTermList class]);
      int index = 0;
      while (lst != [ComIgormaznitsaProlDataTermList NULLLIST]) {
        (void) IOSObjectArray_Set(elements, index++, [((ComIgormaznitsaProlDataTermList *) nil_chk(lst)) getHead]);
        lst = (ComIgormaznitsaProlDataTermList *) check_class_cast([lst getTail], [ComIgormaznitsaProlDataTermList class]);
      }
      result = [[ComIgormaznitsaProlDataTermStruct alloc] initWithComIgormaznitsaProlDataTerm:[list getHead] withComIgormaznitsaProlDataTermArray:elements];
    }
    [((ComIgormaznitsaProlDataTermStruct *) nil_chk(result)) setPredicateProcessorWithComIgormaznitsaProlLibrariesPredicateProcessor:[((ComIgormaznitsaProlLogicProlContext *) nil_chk(context)) findProcessorWithComIgormaznitsaProlDataTermStruct:result]];
    return result;
  }
}

+ (ComIgormaznitsaProlDataTermList *)arrayToListWithComIgormaznitsaProlDataTermArray:(IOSObjectArray *)array {
  if (array == nil || (int) [array count] == 0) {
    return [ComIgormaznitsaProlDataTermList NULLLIST];
  }
  ComIgormaznitsaProlDataTermList *result = [[ComIgormaznitsaProlDataTermList alloc] initWithComIgormaznitsaProlDataTerm:IOSObjectArray_Get(nil_chk(array), 0)];
  ComIgormaznitsaProlDataTermList *next = result;
  int length = (int) [array count];
  for (int li = 1; li < length; li++) {
    next = [ComIgormaznitsaProlDataTermList appendItemWithComIgormaznitsaProlDataTermList:next withComIgormaznitsaProlDataTerm:IOSObjectArray_Get(array, li)];
  }
  return result;
}

+ (IOSObjectArray *)listToArrayWithComIgormaznitsaProlDataTermList:(ComIgormaznitsaProlDataTermList *)list {
  if ([((ComIgormaznitsaProlDataTermList *) nil_chk(list)) isNullList]) {
    return [IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[ComIgormaznitsaProlDataTerm class]]];
  }
  JavaUtilArrayList *arraylist = [[JavaUtilArrayList alloc] init];
  ComIgormaznitsaProlDataTermList *curlist = list;
  while (YES) {
    if ([curlist isNullList]) {
      break;
    }
    [arraylist addWithId:[curlist getHead]];
    ComIgormaznitsaProlDataTerm *nextList = [curlist getTail];
    if ([((ComIgormaznitsaProlDataTerm *) nil_chk(nextList)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_LIST) {
      curlist = (ComIgormaznitsaProlDataTermList *) check_class_cast(nextList, [ComIgormaznitsaProlDataTermList class]);
    }
    else {
      [arraylist addWithId:nextList];
      break;
    }
  }
  return [arraylist toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[arraylist size] type:[IOSClass classWithClass:[ComIgormaznitsaProlDataTerm class]]]];
}

+ (ComIgormaznitsaProlDataTermList *)unrollTermIntoListWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)element {
  switch ([((ComIgormaznitsaProlDataTerm *) nil_chk(element)) getTermType]) {
    case ComIgormaznitsaProlDataTerm_TYPE_LIST:
    return (ComIgormaznitsaProlDataTermList *) check_class_cast(element, [ComIgormaznitsaProlDataTermList class]);
    case ComIgormaznitsaProlDataTerm_TYPE_STRUCT:
    {
      ComIgormaznitsaProlDataTermStruct *struct_ = (ComIgormaznitsaProlDataTermStruct *) check_class_cast(element, [ComIgormaznitsaProlDataTermStruct class]);
      ComIgormaznitsaProlDataTermList *result = [[ComIgormaznitsaProlDataTermList alloc] initWithComIgormaznitsaProlDataTerm:[struct_ getFunctor]];
      ComIgormaznitsaProlDataTermList *curResult = result;
      int arity = [struct_ getArity];
      for (int li = 0; li < arity; li++) {
        curResult = [ComIgormaznitsaProlDataTermList appendItemWithComIgormaznitsaProlDataTermList:curResult withComIgormaznitsaProlDataTerm:[struct_ getElementWithInt:li]];
      }
      return result;
    }
    default:
    return [[ComIgormaznitsaProlDataTermList alloc] initWithComIgormaznitsaProlDataTerm:element];
  }
}

+ (void)processTermForArrangeVariablesWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)term
                                                      withJavaUtilMap:(id<JavaUtilMap>)variables {
  switch ([((ComIgormaznitsaProlDataTerm *) nil_chk(term)) getTermType]) {
    case ComIgormaznitsaProlDataTerm_TYPE_LIST:
    {
      ComIgormaznitsaProlDataTermList *list = (ComIgormaznitsaProlDataTermList *) check_class_cast(term, [ComIgormaznitsaProlDataTermList class]);
      while (![list isNullList]) {
        [ComIgormaznitsaProlUtilsUtils processTermForArrangeVariablesWithComIgormaznitsaProlDataTerm:[list getHead] withJavaUtilMap:variables];
        ComIgormaznitsaProlDataTerm *tail = [list getTail];
        if ([((ComIgormaznitsaProlDataTerm *) nil_chk(tail)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_LIST) {
          list = (ComIgormaznitsaProlDataTermList *) check_class_cast(tail, [ComIgormaznitsaProlDataTermList class]);
        }
        else {
          [ComIgormaznitsaProlUtilsUtils processTermForArrangeVariablesWithComIgormaznitsaProlDataTerm:tail withJavaUtilMap:variables];
          break;
        }
      }
    }
    break;
    case ComIgormaznitsaProlDataTerm_TYPE_STRUCT:
    {
      ComIgormaznitsaProlDataTermStruct *struct_ = (ComIgormaznitsaProlDataTermStruct *) check_class_cast(term, [ComIgormaznitsaProlDataTermStruct class]);
      int arity = [struct_ getArity];
      for (int li = 0; li < arity; li++) {
        ComIgormaznitsaProlDataTerm *element = [struct_ getElementWithInt:li];
        if ([((ComIgormaznitsaProlDataTerm *) nil_chk(element)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_VAR) {
          NSString *varname = [element getText];
          if ([((ComIgormaznitsaProlDataVar *) check_class_cast(element, [ComIgormaznitsaProlDataVar class])) isUndefined]) {
            ComIgormaznitsaProlDataVar *var = [((id<JavaUtilMap>) nil_chk(variables)) getWithId:varname];
            if (var == nil) {
              (void) [variables putWithId:varname withId:(ComIgormaznitsaProlDataVar *) check_class_cast(element, [ComIgormaznitsaProlDataVar class])];
            }
            else {
              [struct_ setElementWithInt:li withComIgormaznitsaProlDataTerm:var];
            }
          }
        }
        else {
          [ComIgormaznitsaProlUtilsUtils processTermForArrangeVariablesWithComIgormaznitsaProlDataTerm:element withJavaUtilMap:variables];
        }
      }
    }
    break;
    case ComIgormaznitsaProlDataTerm_TYPE_VAR:
    {
      NSString *name = [((ComIgormaznitsaProlDataVar *) check_class_cast(term, [ComIgormaznitsaProlDataVar class])) getText];
      if ([((id<JavaUtilMap>) nil_chk(variables)) containsKeyWithId:name]) {
        ComIgormaznitsaProlDataVar *var = [variables getWithId:name];
        [term EquWithComIgormaznitsaProlDataTerm:var];
      }
      else {
        (void) [variables putWithId:name withId:(ComIgormaznitsaProlDataVar *) check_class_cast(term, [ComIgormaznitsaProlDataVar class])];
      }
    }
    break;
  }
}

+ (void)arrangeVariablesInsideTermsWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)termOne
                                   withComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)termTwo {
  id<JavaUtilMap> varMap = [[JavaUtilHashMap alloc] init];
  [ComIgormaznitsaProlUtilsUtils processTermForArrangeVariablesWithComIgormaznitsaProlDataTerm:termOne withJavaUtilMap:varMap];
  [ComIgormaznitsaProlUtilsUtils processTermForArrangeVariablesWithComIgormaznitsaProlDataTerm:termTwo withJavaUtilMap:varMap];
}

+ (void)printPredicatesForLibraryWithJavaIoPrintStream:(JavaIoPrintStream *)outArg
                                          withIOSClass:(IOSClass *)libraryClass {
  if (![[IOSClass classWithClass:[ComIgormaznitsaProlLibrariesProlAbstractLibrary class]] isAssignableFrom:libraryClass]) {
    [((JavaIoPrintStream *) nil_chk(outArg)) printlnWithNSString:[NSString stringWithFormat:@"%@ is not an AbstractLibrary class", [((IOSClass *) nil_chk(libraryClass)) getCanonicalName]]];
    return;
  }
  IOSObjectArray *methods = [((IOSClass *) nil_chk(libraryClass)) getMethods];
  [((JavaIoPrintStream *) nil_chk(outArg)) printlnWithNSString:[libraryClass getCanonicalName]];
  [outArg printlnWithNSString:@"==============================================="];
  IOSObjectArray *ops = [ComIgormaznitsaProlAnnotationsProlOperators Operators];
  if ((int) [((IOSObjectArray *) nil_chk(ops)) count] > 0) {
    [outArg printlnWithNSString:@"Operators\n-----------------------"];
    for (int li = 0; li < (int) [ops count]; li++) {
      ComIgormaznitsaProlAnnotationsProlOperator *oper = IOSObjectArray_Get(ops, li);
      if ([((ComIgormaznitsaProlAnnotationsProlOperator *) nil_chk(oper)) Priority] > 0) {
        [outArg printlnWithNSString:[NSString stringWithFormat:@":-op(%d,%@,'%@').", [oper Priority], [ComIgormaznitsaProlDataOperator getTypeFromIndexWithInt:[oper Type]], [oper Name]]];
      }
    }
    [outArg printlnWithNSString:@"-----------------------"];
  }
  for (int li = 0; li < (int) [((IOSObjectArray *) nil_chk(methods)) count]; li++) {
    JavaLangReflectMethod *method = IOSObjectArray_Get(methods, li);
    id<ComIgormaznitsaProlAnnotationsPredicate> predicate = [((JavaLangReflectMethod *) nil_chk(method)) getAnnotationWithIOSClass:[IOSClass classWithProtocol:@protocol(ComIgormaznitsaProlAnnotationsPredicate)]];
    if (predicate != nil) {
      BOOL determined = [method getAnnotationWithIOSClass:[IOSClass classWithProtocol:@protocol(ComIgormaznitsaProlAnnotationsDetermined)]] != nil;
      id<ComIgormaznitsaProlAnnotationsPredicateSynonyms> predicateSynonims = [method getAnnotationWithIOSClass:[IOSClass classWithProtocol:@protocol(ComIgormaznitsaProlAnnotationsPredicateSynonyms)]];
      [outArg printWithNSString:[predicate Signature]];
      if (predicateSynonims != nil) {
        [outArg printWithNSString:@" {"];
        IOSObjectArray *signatures = [predicateSynonims Signatures];
        for (int ls = 0; ls < (int) [((IOSObjectArray *) nil_chk(signatures)) count]; ls++) {
          if (ls > 0) {
            [outArg printWithNSString:@", "];
          }
          [outArg printWithNSString:IOSObjectArray_Get(signatures, ls)];
        }
        [outArg printWithNSString:@"}"];
      }
      if (determined) {
        [outArg printWithNSString:@" [DETERMINED]"];
      }
      [outArg println];
      IOSObjectArray *templates = [predicate Template];
      for (int lt = 0; lt < (int) [((IOSObjectArray *) nil_chk(templates)) count]; lt++) {
        [outArg printlnWithNSString:[NSString stringWithFormat:@"[%@]", IOSObjectArray_Get(templates, lt)]];
      }
      NSString *reference = [predicate Reference];
      if (reference != nil && [reference length] > 0) {
        [outArg println];
        [outArg printlnWithNSString:reference];
      }
      [outArg printlnWithNSString:@"---------------------\x0d\n"];
    }
  }
}

+ (void)spacesWithJavaIoPrintStream:(JavaIoPrintStream *)outArg
                            withInt:(int)number {
  for (int li = 0; li < number; li++) {
    [((JavaIoPrintStream *) nil_chk(outArg)) printWithChar:' '];
  }
}

+ (void)printTreeWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)term {
  [ComIgormaznitsaProlUtilsUtils printTreeWithJavaIoPrintStream:[JavaLangSystem out] withInt:0 withComIgormaznitsaProlDataTerm:term];
}

+ (void)printTreeWithJavaIoPrintStream:(JavaIoPrintStream *)outArg
                               withInt:(int)spaces
       withComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)term {
  switch ([((ComIgormaznitsaProlDataTerm *) nil_chk(term)) getTermType]) {
    case ComIgormaznitsaProlDataTerm_TYPE_STRUCT:
    {
      ComIgormaznitsaProlDataTermStruct *struct_ = (ComIgormaznitsaProlDataTermStruct *) check_class_cast(term, [ComIgormaznitsaProlDataTermStruct class]);
      if ([((ComIgormaznitsaProlDataTerm *) nil_chk([struct_ getFunctor])) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_OPERATOR) {
        [((JavaIoPrintStream *) nil_chk(outArg)) printlnWithNSString:[NSString stringWithFormat:@"(%@)", [((ComIgormaznitsaProlDataTerm *) nil_chk([struct_ getFunctor])) description]]];
        int spaces2 = spaces + 1;
        [ComIgormaznitsaProlUtilsUtils spacesWithJavaIoPrintStream:outArg withInt:spaces2];
        [outArg printlnWithChar:'|'];
        for (int li = 0; li < [struct_ getArity]; li++) {
          [ComIgormaznitsaProlUtilsUtils spacesWithJavaIoPrintStream:outArg withInt:spaces2];
          [outArg printWithNSString:@"\\-"];
          [ComIgormaznitsaProlUtilsUtils printTreeWithJavaIoPrintStream:outArg withInt:spaces2 + 2 withComIgormaznitsaProlDataTerm:[struct_ getElementWithInt:li]];
        }
      }
      else {
        [((JavaIoPrintStream *) nil_chk(outArg)) printlnWithNSString:[term description]];
      }
    }
    break;
    default:
    {
      [((JavaIoPrintStream *) nil_chk(outArg)) printlnWithId:term];
    }
  }
}

+ (void)printTermStateWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)term {
  [ComIgormaznitsaProlUtilsUtils printTermStateWithJavaIoPrintStream:[JavaLangSystem out] withComIgormaznitsaProlDataTerm:term];
}

+ (void)printTermStateWithJavaIoPrintStream:(JavaIoPrintStream *)outArg
            withComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)term {
  [((JavaIoPrintStream *) nil_chk(outArg)) printlnWithNSString:[((ComIgormaznitsaProlDataTerm *) nil_chk(term)) getSourceLikeRepresentation]];
  id<JavaUtilMap> vars = [ComIgormaznitsaProlUtilsUtils fillTableWithVarsWithComIgormaznitsaProlDataTerm:term];
  id<JavaUtilIterator> iter = [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk(vars)) values])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
    ComIgormaznitsaProlDataVar *variable = [iter next];
    if ([((ComIgormaznitsaProlDataVar *) nil_chk(variable)) isAnonymous]) {
      continue;
    }
    [outArg printWithNSString:[variable getText]];
    [outArg printWithNSString:[NSString stringWithFormat:@"{uid=%d}", [variable getVarUID]]];
    [outArg printWithChar:'='];
    if ([variable isUndefined]) {
      [outArg printlnWithNSString:@"???"];
    }
    else {
      [outArg printlnWithNSString:[variable description]];
    }
  }
}

+ (NSString *)encodeTextSourceLikeWithNSString:(NSString *)string {
  NSString *text = string;
  if ([((NSString *) nil_chk(text)) length] == 0) {
    return text;
  }
  JavaLangStringBuilder *builder = [[JavaLangStringBuilder alloc] initWithInt:[((NSString *) nil_chk(string)) length]];
  for (int li = 0; li < [text length]; li++) {
    unichar curChar = [text charAtWithInt:li];
    switch (curChar) {
      case '\\':
      (void) [builder appendWithNSString:@"\\\\"];
      break;
      case '\'':
      (void) [builder appendWithNSString:@"\\'"];
      break;
      case '"':
      (void) [builder appendWithNSString:@"\\\""];
      break;
      case 0x000a:
      (void) [builder appendWithNSString:@"\\n"];
      break;
      case 0x000c:
      (void) [builder appendWithNSString:@"\\f"];
      break;
      case 0x000d:
      (void) [builder appendWithNSString:@"\\r"];
      break;
      case 0x0009:
      (void) [builder appendWithNSString:@"\\t"];
      break;
      case '_':
      {
        (void) [builder appendWithChar:'_'];
      }
      break;
      case '%':
      case '.':
      {
        (void) [builder appendWithChar:curChar];
      }
      break;
      default:
      {
        (void) [builder appendWithChar:curChar];
      }
    }
  }
  return [builder description];
}

+ (void)consultFromURLConnectionWithNSString:(NSString *)url
     withComIgormaznitsaProlLogicProlContext:(ComIgormaznitsaProlLogicProlContext *)context {
  if (url == nil || context == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"There is a null as an argument"];
  }
  JavaIoInputStream *inStream = nil;
  if ([((NSString *) nil_chk(url)) hasPrefix:@"this://"]) {
    NSString *purePath = [url substring:7];
    inStream = [((JavaLangClassLoader *) nil_chk([((JavaLangThread *) nil_chk([JavaLangThread currentThread])) getContextClassLoader])) getResourceAsStreamWithNSString:purePath];
    if (inStream == nil) {
      @throw [[JavaIoIOException alloc] initWithNSString:[NSString stringWithFormat:@"Can't find the resource addressed as \"%@\" through the class loader", purePath]];
    }
  }
  else {
    JavaNetURL *parsed = [[JavaNetURL alloc] initWithNSString:url];
  }
  @try {
    [((ComIgormaznitsaProlParserProlConsult *) [[ComIgormaznitsaProlParserProlConsult alloc] initWithJavaIoInputStream:inStream withComIgormaznitsaProlLogicProlContext:context]) consult];
  }
  @finally {
    if (inStream != nil) {
      @try {
        [inStream close];
      }
      @catch (JavaLangException *thr) {
        [((JavaUtilLoggingLogger *) nil_chk(ComIgormaznitsaProlUtilsUtils_LOG_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel WARNING] withNSString:@"consultFromURLConnection().close" withJavaLangThrowable:thr];
      }
    }
  }
}

+ (NSString *)extractPredicateSignatureFromStructureWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)term {
  ComIgormaznitsaProlDataTermStruct *struct_ = (ComIgormaznitsaProlDataTermStruct *) check_class_cast([ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:term], [ComIgormaznitsaProlDataTermStruct class]);
  if ([((ComIgormaznitsaProlDataTermStruct *) nil_chk(struct_)) getArity] != 2) {
    return nil;
  }
  ComIgormaznitsaProlDataTerm *left = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[struct_ getElementWithInt:0]];
  ComIgormaznitsaProlDataTerm *right = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:[struct_ getElementWithInt:1]];
  if ([right isKindOfClass:[ComIgormaznitsaProlDataTermInteger class]] && [((ComIgormaznitsaProlDataTerm *) nil_chk(left)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_ATOM) {
    return [NSString stringWithFormat:@"%@/%@", [left getText], [((ComIgormaznitsaProlDataTerm *) nil_chk(right)) getText]];
  }
  return nil;
}

+ (NSString *)normalizeSignatureWithNSString:(NSString *)signature {
  if (signature == nil) {
    return nil;
  }
  NSString *sig = [((NSString *) nil_chk(signature)) trim];
  if ([((NSString *) nil_chk(sig)) length] > 0 && [sig charAtWithInt:0] == '\'') {
    sig = [sig substring:1];
    int lastIndex = [((NSString *) nil_chk(sig)) lastIndexOf:'/'];
    if (lastIndex < 0) {
      sig = nil;
    }
    else {
      NSString *arity = [((NSString *) nil_chk([sig substring:lastIndex + 1])) trim];
      NSString *name = [((NSString *) nil_chk([sig substring:0 endIndex:lastIndex - 1])) trim];
      if ([((NSString *) nil_chk(name)) length] > 0 && [name charAtWithInt:[name length] - 1] == '\'') {
        name = [name substring:0 endIndex:[name length] - 1];
        sig = [NSString stringWithFormat:@"%@/%@", name, arity];
      }
      else {
        sig = nil;
      }
    }
  }
  return sig;
}

+ (ComIgormaznitsaProlDataVar *)findVarInsideTermWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)term
                                                                    withNSString:(NSString *)name {
  if (term == nil || name == nil) {
    @throw [[JavaLangNullPointerException alloc] init];
  }
  ComIgormaznitsaProlDataVar *result = nil;
  switch ([((ComIgormaznitsaProlDataTerm *) nil_chk(term)) getTermType]) {
    case ComIgormaznitsaProlDataTerm_TYPE_STRUCT:
    {
      ComIgormaznitsaProlDataTermStruct *struct_ = (ComIgormaznitsaProlDataTermStruct *) check_class_cast(term, [ComIgormaznitsaProlDataTermStruct class]);
      IOSObjectArray *elements = [struct_ getElementsAsArray];
      for (int li = 0; li < (int) [((IOSObjectArray *) nil_chk(elements)) count]; li++) {
        result = [ComIgormaznitsaProlUtilsUtils findVarInsideTermWithComIgormaznitsaProlDataTerm:IOSObjectArray_Get(elements, li) withNSString:name];
        if (result != nil) {
          break;
        }
      }
    }
    break;
    case ComIgormaznitsaProlDataTerm_TYPE_LIST:
    {
      ComIgormaznitsaProlDataTermList *list = (ComIgormaznitsaProlDataTermList *) check_class_cast(term, [ComIgormaznitsaProlDataTermList class]);
      if (![list isNullList]) {
        ComIgormaznitsaProlDataTerm *headterm = [list getHead];
        if (headterm != nil) {
          result = [ComIgormaznitsaProlUtilsUtils findVarInsideTermWithComIgormaznitsaProlDataTerm:headterm withNSString:name];
        }
        if (result == nil) {
          ComIgormaznitsaProlDataTerm *tailterm = [list getTail];
          if (tailterm != nil) {
            result = [ComIgormaznitsaProlUtilsUtils findVarInsideTermWithComIgormaznitsaProlDataTerm:tailterm withNSString:name];
          }
        }
      }
    }
    break;
    case ComIgormaznitsaProlDataTerm_TYPE_VAR:
    {
      ComIgormaznitsaProlDataVar *varTerm = (ComIgormaznitsaProlDataVar *) check_class_cast(term, [ComIgormaznitsaProlDataVar class]);
      if ([((NSString *) nil_chk([varTerm getText])) isEqual:name]) {
        result = varTerm;
      }
      else {
        ComIgormaznitsaProlDataTerm *value = [varTerm getThisValue];
        if (value != nil) {
          result = [ComIgormaznitsaProlUtilsUtils findVarInsideTermWithComIgormaznitsaProlDataTerm:value withNSString:name];
        }
      }
    }
    break;
    default:
    {
    }
    break;
  }
  return result;
}

+ (NSString *)validateSignatureWithNSString:(NSString *)signature {
  if (signature == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"Null signature detected"];
  }
  IOSObjectArray *parsed = [((NSString *) nil_chk(signature)) split:@"/"];
  if ((int) [((IOSObjectArray *) nil_chk(parsed)) count] == 2) {
    NSString *str = [((NSString *) IOSObjectArray_Get(parsed, 0)) trim];
    BOOL quoted = NO;
    if ([((NSString *) nil_chk(str)) length] != 0) {
      if ([str charAtWithInt:0] == '\'') {
        if ([str length] > 1 && [str charAtWithInt:[str length] - 1] == '\'') {
          str = [str substring:1 endIndex:[str length] - 1];
          if ([((NSString *) nil_chk(str)) length] == 0) {
            return nil;
          }
          quoted = YES;
        }
        else {
          return nil;
        }
      }
      unichar firstChar = [((NSString *) nil_chk(str)) charAtWithInt:0];
      if (!quoted && ([JavaLangCharacter isDigitWithChar:firstChar] || [JavaLangCharacter isUpperCaseWithChar:firstChar] || [JavaLangCharacter isWhitespaceWithChar:firstChar] || firstChar == '.')) {
        return nil;
      }
      int arity = 0;
      @try {
        arity = [JavaLangInteger parseIntWithNSString:[((NSString *) IOSObjectArray_Get(parsed, 1)) trim]];
        if (arity < 0) {
          @throw [[JavaLangNumberFormatException alloc] initWithNSString:@"Negate number is not supported as arity"];
        }
      }
      @catch (JavaLangNumberFormatException *ex) {
        return nil;
      }
      JavaLangStringBuilder *builder = [[JavaLangStringBuilder alloc] initWithInt:[signature length]];
      if (quoted) {
        (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([builder appendWithChar:'\''])) appendWithNSString:str])) appendWithChar:'\''])) appendWithChar:'/'])) appendWithInt:arity];
      }
      else {
        (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([builder appendWithNSString:str])) appendWithChar:'/'])) appendWithInt:arity];
      }
      return [builder description];
    }
  }
  return nil;
}

+ (void)initialize {
  if (self == [ComIgormaznitsaProlUtilsUtils class]) {
    ComIgormaznitsaProlUtilsUtils_LOG_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[ComIgormaznitsaProlUtilsUtils class]] getCanonicalName]];
    ComIgormaznitsaProlUtilsUtils_TERM_COMPARATOR_ = [[ComIgormaznitsaProlUtilsUtils_$1 alloc] init];
  }
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", "Utils", NULL, 0x2, NULL },
    { "fillTableWithVarsWithComIgormaznitsaProlDataTerm:", "fillTableWithVars", "Ljava.util.Map;", 0x9, NULL },
    { "getNumberFromElementWithComIgormaznitsaProlDataTerm:", "getNumberFromElement", "Ljava.lang.Number;", 0x9, NULL },
    { "getStringFromElementWithComIgormaznitsaProlDataTerm:", "getStringFromElement", "Ljava.lang.String;", 0x9, NULL },
    { "getRootThrowableWithJavaLangThrowable:", "getRootThrowable", "Ljava.lang.Throwable;", 0x9, NULL },
    { "getTermFromElementWithComIgormaznitsaProlDataTerm:", "getTermFromElement", "Lcom.igormaznitsa.prol.data.Term;", 0x9, NULL },
    { "getListAsAtomWithComIgormaznitsaProlLogicProlContext:withComIgormaznitsaProlDataTermList:", "getListAsAtom", "Lcom.igormaznitsa.prol.data.Term;", 0x9, NULL },
    { "arrayToListWithComIgormaznitsaProlDataTermArray:", "arrayToList", "Lcom.igormaznitsa.prol.data.TermList;", 0x9, NULL },
    { "listToArrayWithComIgormaznitsaProlDataTermList:", "listToArray", "[Lcom.igormaznitsa.prol.data.Term;", 0x9, NULL },
    { "unrollTermIntoListWithComIgormaznitsaProlDataTerm:", "unrollTermIntoList", "Lcom.igormaznitsa.prol.data.TermList;", 0x9, NULL },
    { "processTermForArrangeVariablesWithComIgormaznitsaProlDataTerm:withJavaUtilMap:", "processTermForArrangeVariables", "V", 0xa, NULL },
    { "arrangeVariablesInsideTermsWithComIgormaznitsaProlDataTerm:withComIgormaznitsaProlDataTerm:", "arrangeVariablesInsideTerms", "V", 0x9, NULL },
    { "printPredicatesForLibraryWithJavaIoPrintStream:withIOSClass:", "printPredicatesForLibrary", "V", 0x9, NULL },
    { "spacesWithJavaIoPrintStream:withInt:", "spaces", "V", 0x9, NULL },
    { "printTreeWithComIgormaznitsaProlDataTerm:", "printTree", "V", 0x9, NULL },
    { "printTreeWithJavaIoPrintStream:withInt:withComIgormaznitsaProlDataTerm:", "printTree", "V", 0x9, NULL },
    { "printTermStateWithComIgormaznitsaProlDataTerm:", "printTermState", "V", 0x9, NULL },
    { "printTermStateWithJavaIoPrintStream:withComIgormaznitsaProlDataTerm:", "printTermState", "V", 0x9, NULL },
    { "encodeTextSourceLikeWithNSString:", "encodeTextSourceLike", "Ljava.lang.String;", 0x9, NULL },
    { "consultFromURLConnectionWithNSString:withComIgormaznitsaProlLogicProlContext:", "consultFromURLConnection", "V", 0x9, "Ljava.io.IOException;Ljava.lang.InterruptedException;" },
    { "extractPredicateSignatureFromStructureWithComIgormaznitsaProlDataTerm:", "extractPredicateSignatureFromStructure", "Ljava.lang.String;", 0x9, NULL },
    { "normalizeSignatureWithNSString:", "normalizeSignature", "Ljava.lang.String;", 0x9, NULL },
    { "findVarInsideTermWithComIgormaznitsaProlDataTerm:withNSString:", "findVarInsideTerm", "Lcom.igormaznitsa.prol.data.Var;", 0x9, NULL },
    { "validateSignatureWithNSString:", "validateSignature", "Ljava.lang.String;", 0x9, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "LOG_", NULL, 0x1c, "Ljava.util.logging.Logger;" },
    { "TERM_COMPARATOR_", NULL, 0x19, "Ljava.util.Comparator;" },
  };
  static J2ObjcClassInfo _ComIgormaznitsaProlUtilsUtils = { "Utils", "com.igormaznitsa.prol.utils", NULL, 0x11, 24, methods, 2, fields, 0, NULL};
  return &_ComIgormaznitsaProlUtilsUtils;
}

@end
@implementation ComIgormaznitsaProlUtilsUtils_$1

- (int)compareWithId:(ComIgormaznitsaProlDataTerm *)term1
              withId:(ComIgormaznitsaProlDataTerm *)term2 {
  return [((ComIgormaznitsaProlDataTerm *) nil_chk(term1)) termComparsionWithComIgormaznitsaProlDataTerm:term2];
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "compareWithComIgormaznitsaProlDataTerm:withComIgormaznitsaProlDataTerm:", "compare", "I", 0x1, NULL },
    { "init", NULL, NULL, 0x0, NULL },
  };
  static J2ObjcClassInfo _ComIgormaznitsaProlUtilsUtils_$1 = { "$1", "com.igormaznitsa.prol.utils", "Utils", 0x8000, 2, methods, 0, NULL, 0, NULL};
  return &_ComIgormaznitsaProlUtilsUtils_$1;
}

@end
