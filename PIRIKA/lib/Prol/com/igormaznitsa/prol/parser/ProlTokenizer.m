//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/igormaznitsa/prol/parser/ProlTokenizer.java
//
//  Created by katsura on 14/04/13.
//

#include "IOSClass.h"
#include "com/igormaznitsa/prol/containers/KnowledgeBase.h"
#include "com/igormaznitsa/prol/containers/OperatorContainer.h"
#include "com/igormaznitsa/prol/data/Term.h"
#include "com/igormaznitsa/prol/data/TermFloat.h"
#include "com/igormaznitsa/prol/data/TermInteger.h"
#include "com/igormaznitsa/prol/data/Var.h"
#include "com/igormaznitsa/prol/exceptions/ParserException.h"
#include "com/igormaznitsa/prol/exceptions/ProlCriticalError.h"
#include "com/igormaznitsa/prol/parser/ProlReader.h"
#include "com/igormaznitsa/prol/parser/ProlTokenizer.h"
#include "java/io/IOException.h"
#include "java/lang/Character.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuilder.h"

@implementation ComIgormaznitsaProlParserProlTokenizer

+ (int)INSIDE_STATE_LOOKFOR {
  return ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_LOOKFOR;
}

+ (int)INSIDE_STATE_ATOM {
  return ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_ATOM;
}

+ (int)INSIDE_STATE_STRING {
  return ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_STRING;
}

+ (int)INSIDE_STATE_OPERATOR {
  return ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_OPERATOR;
}

+ (int)INSIDE_STATE_VARIABLE {
  return ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_VARIABLE;
}

+ (int)INSIDE_STATE_INTEGER {
  return ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_INTEGER;
}

+ (int)INSIDE_STATE_FLOAT {
  return ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_FLOAT;
}

- (id)init {
  return [super init];
}

- (void)pushTermBackWithComIgormaznitsaProlParserProlTokenizer_ProlTokenizerResult:(ComIgormaznitsaProlParserProlTokenizer_ProlTokenizerResult *)object {
  if (lastPushedTerm_ != nil) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:@"An object has been pushed already"];
  }
  lastPushedTerm_ = object;
}

- (ComIgormaznitsaProlParserProlTokenizer_ProlTokenizerResult *)peekTokenWithComIgormaznitsaProlParserProlReader:(ComIgormaznitsaProlParserProlReader *)reader
                                                                  withComIgormaznitsaProlContainersKnowledgeBase:(id<ComIgormaznitsaProlContainersKnowledgeBase>)voc {
  ComIgormaznitsaProlParserProlTokenizer_ProlTokenizerResult *result = nil;
  if (lastPushedTerm_ == nil) {
    result = [self nextTokenWithComIgormaznitsaProlParserProlReader:reader withComIgormaznitsaProlContainersKnowledgeBase:voc];
    [self pushTermBackWithComIgormaznitsaProlParserProlTokenizer_ProlTokenizerResult:result];
  }
  else {
    result = lastPushedTerm_;
  }
  return result;
}

- (int)getLastTokenStrPos {
  return lastPushedTerm_ == nil ? lastReadTokenStrPos_ : prevReadTokenStrPos_;
}

- (int)getLastTokenLineNum {
  return lastPushedTerm_ == nil ? lastReadTokenLineNum_ : prevReadTokenLineNum_;
}

- (void)fixPositionWithComIgormaznitsaProlParserProlReader:(ComIgormaznitsaProlParserProlReader *)reader {
  prevReadTokenLineNum_ = lastReadTokenLineNum_;
  prevReadTokenStrPos_ = lastReadTokenStrPos_;
  lastReadTokenLineNum_ = [((ComIgormaznitsaProlParserProlReader *) nil_chk(reader)) getLineNumber];
  lastReadTokenStrPos_ = [reader getStrPos];
}

- (void)skipCommentsWithComIgormaznitsaProlParserProlReader:(ComIgormaznitsaProlParserProlReader *)reader {
  while (YES) {
    int readchar = [((ComIgormaznitsaProlParserProlReader *) nil_chk(reader)) read];
    if (readchar < 0 || readchar == 0x000a) {
      break;
    }
  }
}

- (ComIgormaznitsaProlParserProlTokenizer_ProlTokenizerResult *)nextTokenWithComIgormaznitsaProlParserProlReader:(ComIgormaznitsaProlParserProlReader *)reader
                                                                  withComIgormaznitsaProlContainersKnowledgeBase:(id<ComIgormaznitsaProlContainersKnowledgeBase>)voc {
  if (lastPushedTerm_ != nil) {
    @try {
      return lastPushedTerm_;
    }
    @finally {
      lastPushedTerm_ = nil;
    }
  }
  int state = ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_LOOKFOR;
  BOOL specialchar = NO;
  JavaLangStringBuilder *strbuffer = [[JavaLangStringBuilder alloc] init];
  ComIgormaznitsaProlContainersOperatorContainer *lastFoundFullOperator = nil;
  BOOL letterOrDigitOnly = NO;
  while (YES) {
    int readchar = [((ComIgormaznitsaProlParserProlReader *) nil_chk(reader)) read];
    if (readchar < 0) {
      NSString *str = [strbuffer description];
      switch (state) {
        case ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_LOOKFOR:
        return nil;
        case ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_FLOAT:
        {
          if ([str charAtWithInt:[((NSString *) nil_chk(str)) length] - 1] == '.') {
            [reader pushCharBackWithChar:'.'];
            return [[ComIgormaznitsaProlParserProlTokenizer_ProlTokenizerResult alloc] initWithComIgormaznitsaProlDataTerm:[self makeTermFromStringWithNSString:[str substring:0 endIndex:[str length] - 1] withInt:ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_INTEGER] withInt:ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_ATOM];
          }
        }
        case ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_INTEGER:
        return [[ComIgormaznitsaProlParserProlTokenizer_ProlTokenizerResult alloc] initWithComIgormaznitsaProlDataTerm:[self makeTermFromStringWithNSString:str withInt:state] withInt:ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_ATOM];
        case ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_ATOM:
        return [[ComIgormaznitsaProlParserProlTokenizer_ProlTokenizerResult alloc] initWithComIgormaznitsaProlDataTerm:[self makeTermFromStringWithNSString:str withInt:state] withInt:ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_ATOM];
        case ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_VARIABLE:
        if ([((NSString *) nil_chk(str)) isEqual:@"_"]) {
          return [[ComIgormaznitsaProlParserProlTokenizer_ProlTokenizerResult alloc] initWithComIgormaznitsaProlDataTerm:[[ComIgormaznitsaProlDataVar alloc] init] withInt:state];
        }
        else {
          return [[ComIgormaznitsaProlParserProlTokenizer_ProlTokenizerResult alloc] initWithComIgormaznitsaProlDataTerm:[[ComIgormaznitsaProlDataVar alloc] initWithNSString:str] withInt:state];
        }
        case ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_STRING:
        @throw [[ComIgormaznitsaProlExceptionsParserException alloc] initWithNSString:@"Unclosed string found" withInt:lastReadTokenLineNum_ withInt:lastReadTokenStrPos_];
        case ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_OPERATOR:
        {
          if (lastFoundFullOperator == nil) {
            return [[ComIgormaznitsaProlParserProlTokenizer_ProlTokenizerResult alloc] initWithComIgormaznitsaProlDataTerm:[self makeTermFromStringWithNSString:str withInt:state] withInt:state];
          }
          else {
            [reader pushBufferDifferenceWithNSString:[lastFoundFullOperator getText] withJavaLangStringBuilder:strbuffer];
            return [[ComIgormaznitsaProlParserProlTokenizer_ProlTokenizerResult alloc] initWithComIgormaznitsaProlDataTerm:lastFoundFullOperator withInt:state];
          }
        }
        default:
        @throw [[ComIgormaznitsaProlExceptionsProlCriticalError alloc] initWithNSString:@"Unknown reader state"];
      }
    }
    unichar chr = (unichar) readchar;
    switch (state) {
      case ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_LOOKFOR:
      {
        if ([JavaLangCharacter isISOControlWithChar:chr] || [JavaLangCharacter isWhitespaceWithChar:chr]) {
          continue;
        }
        switch (chr) {
          case '%':
          {
            [self skipCommentsWithComIgormaznitsaProlParserProlReader:reader];
          }
          break;
          case '_':
          {
            [self fixPositionWithComIgormaznitsaProlParserProlReader:reader];
            (void) [strbuffer appendWithChar:chr];
            state = ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_VARIABLE;
          }
          break;
          case '\'':
          {
            [self fixPositionWithComIgormaznitsaProlParserProlReader:reader];
            state = ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_STRING;
          }
          break;
          default:
          {
            [self fixPositionWithComIgormaznitsaProlParserProlReader:reader];
            (void) [strbuffer appendWithChar:chr];
            if ([JavaLangCharacter isLetterWithChar:chr] && [JavaLangCharacter isUpperCaseWithChar:chr]) {
              state = ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_VARIABLE;
            }
            else {
              letterOrDigitOnly = [JavaLangCharacter isLetterOrDigitWithChar:chr];
              NSString *operator_ = [JavaLangCharacter toStringWithChar:chr];
              if ([((id<ComIgormaznitsaProlContainersKnowledgeBase>) nil_chk(voc)) hasOperatorStartsWithWithNSString:operator_]) {
                lastFoundFullOperator = [voc findOperatorForNameWithNSString:operator_];
                state = ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_OPERATOR;
              }
              else {
                if ([JavaLangCharacter isDigitWithChar:chr]) {
                  state = ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_INTEGER;
                }
                else {
                  state = ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_ATOM;
                }
              }
            }
          }
        }
      }
      break;
      case ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_ATOM:
      {
        if (chr == '_') {
          (void) [strbuffer appendWithChar:chr];
        }
        else if ([JavaLangCharacter isWhitespaceWithChar:chr] || [JavaLangCharacter isISOControlWithChar:chr]) {
          return [[ComIgormaznitsaProlParserProlTokenizer_ProlTokenizerResult alloc] initWithComIgormaznitsaProlDataTerm:[self makeTermFromStringWithNSString:[strbuffer description] withInt:state] withInt:state];
        }
        else if (chr == '\'' || (letterOrDigitOnly != [JavaLangCharacter isLetterOrDigitWithChar:chr]) || [((id<ComIgormaznitsaProlContainersKnowledgeBase>) nil_chk(voc)) findOperatorForNameWithNSString:[JavaLangCharacter toStringWithChar:chr]] != nil) {
          [reader pushCharBackWithChar:chr];
          return [[ComIgormaznitsaProlParserProlTokenizer_ProlTokenizerResult alloc] initWithComIgormaznitsaProlDataTerm:[self makeTermFromStringWithNSString:[strbuffer description] withInt:state] withInt:state];
        }
        else {
          (void) [strbuffer appendWithChar:chr];
        }
      }
      break;
      case ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_INTEGER:
      {
        if ([JavaLangCharacter isDigitWithChar:chr]) {
          (void) [strbuffer appendWithChar:chr];
        }
        else {
          if (chr == '.' || chr == 'e' || chr == 'E') {
            (void) [strbuffer appendWithChar:chr];
            state = ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_FLOAT;
          }
          else {
            [reader pushCharBackWithChar:chr];
            return [[ComIgormaznitsaProlParserProlTokenizer_ProlTokenizerResult alloc] initWithComIgormaznitsaProlDataTerm:[self makeTermFromStringWithNSString:[strbuffer description] withInt:state] withInt:ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_ATOM];
          }
        }
      }
      break;
      case ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_FLOAT:
      {
        if ([JavaLangCharacter isDigitWithChar:chr]) {
          (void) [strbuffer appendWithChar:chr];
        }
        else {
          if (chr == '-' || chr == '+') {
            if ([strbuffer charAtWithInt:[strbuffer sequenceLength] - 1] == 'e') {
              (void) [strbuffer appendWithChar:chr];
            }
            else {
              [reader pushCharBackWithChar:chr];
              return [[ComIgormaznitsaProlParserProlTokenizer_ProlTokenizerResult alloc] initWithComIgormaznitsaProlDataTerm:[self makeTermFromStringWithNSString:[strbuffer description] withInt:ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_FLOAT] withInt:ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_ATOM];
            }
          }
          else if (chr == 'e' || chr == 'E') {
            if ([strbuffer indexOfWithNSString:@"e"] < 0) {
              (void) [strbuffer appendWithChar:'e'];
            }
            else {
              [reader pushCharBackWithChar:chr];
              return [[ComIgormaznitsaProlParserProlTokenizer_ProlTokenizerResult alloc] initWithComIgormaznitsaProlDataTerm:[self makeTermFromStringWithNSString:[strbuffer substringWithInt:0 withInt:[strbuffer sequenceLength] - 1] withInt:ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_FLOAT] withInt:ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_ATOM];
            }
          }
          else {
            [reader pushCharBackWithChar:chr];
            if ([strbuffer charAtWithInt:[strbuffer sequenceLength] - 1] == '.') {
              [reader pushCharBackWithChar:'.'];
              return [[ComIgormaznitsaProlParserProlTokenizer_ProlTokenizerResult alloc] initWithComIgormaznitsaProlDataTerm:[self makeTermFromStringWithNSString:[strbuffer substringWithInt:0 withInt:[strbuffer sequenceLength] - 1] withInt:ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_INTEGER] withInt:ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_ATOM];
            }
            else {
              return [[ComIgormaznitsaProlParserProlTokenizer_ProlTokenizerResult alloc] initWithComIgormaznitsaProlDataTerm:[self makeTermFromStringWithNSString:[strbuffer description] withInt:state] withInt:ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_ATOM];
            }
          }
        }
      }
      break;
      case ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_OPERATOR:
      {
        if (chr != '_' && letterOrDigitOnly != [JavaLangCharacter isLetterOrDigitWithChar:chr]) {
          [reader pushCharBackWithChar:chr];
          if (lastFoundFullOperator != nil) {
            return [[ComIgormaznitsaProlParserProlTokenizer_ProlTokenizerResult alloc] initWithComIgormaznitsaProlDataTerm:lastFoundFullOperator withInt:state];
          }
          else {
            return [[ComIgormaznitsaProlParserProlTokenizer_ProlTokenizerResult alloc] initWithComIgormaznitsaProlDataTerm:[self makeTermFromStringWithNSString:[strbuffer description] withInt:state] withInt:state];
          }
        }
        else {
          ComIgormaznitsaProlContainersOperatorContainer *prevoperators = lastFoundFullOperator;
          (void) [strbuffer appendWithChar:chr];
          NSString *operator_ = [strbuffer description];
          lastFoundFullOperator = [((id<ComIgormaznitsaProlContainersKnowledgeBase>) nil_chk(voc)) findOperatorForNameWithNSString:operator_];
          if (prevoperators != nil) {
            if (lastFoundFullOperator == nil) {
              if (![voc hasOperatorStartsWithWithNSString:operator_]) {
                if (letterOrDigitOnly) {
                  state = ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_ATOM;
                }
                else {
                  [reader pushBufferDifferenceWithNSString:[prevoperators getText] withJavaLangStringBuilder:strbuffer];
                  return [[ComIgormaznitsaProlParserProlTokenizer_ProlTokenizerResult alloc] initWithComIgormaznitsaProlDataTerm:prevoperators withInt:state];
                }
              }
              else {
                lastFoundFullOperator = prevoperators;
              }
            }
            else {
              if (![voc hasOperatorStartsWithWithNSString:operator_]) {
                [reader pushBufferDifferenceWithNSString:[prevoperators getText] withJavaLangStringBuilder:strbuffer];
                return [[ComIgormaznitsaProlParserProlTokenizer_ProlTokenizerResult alloc] initWithComIgormaznitsaProlDataTerm:prevoperators withInt:state];
              }
            }
          }
          else {
            if (![voc hasOperatorStartsWithWithNSString:operator_]) {
              if ([voc hasOperatorStartsWithWithNSString:[JavaLangCharacter toStringWithChar:chr]]) {
                [strbuffer setLengthWithInt:[strbuffer sequenceLength] - 1];
                [reader pushCharBackWithChar:chr];
              }
              state = ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_ATOM;
            }
          }
        }
      }
      break;
      case ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_STRING:
      {
        if (specialchar) {
          switch (chr) {
            case '\'':
            (void) [strbuffer appendWithChar:'\''];
            break;
            case '"':
            (void) [strbuffer appendWithChar:'"'];
            break;
            case 'n':
            (void) [strbuffer appendWithChar:0x000a];
            break;
            case 'f':
            (void) [strbuffer appendWithChar:0x000c];
            break;
            case 'r':
            (void) [strbuffer appendWithChar:0x000d];
            break;
            case 't':
            (void) [strbuffer appendWithChar:0x0009];
            break;
            case '\\':
            (void) [strbuffer appendWithChar:'\\'];
            break;
            default:
            @throw [[ComIgormaznitsaProlExceptionsParserException alloc] initWithNSString:@"Unsupported special char" withInt:[reader getPrevLineNumber] withInt:[reader getPrevStrPos]];
          }
          specialchar = NO;
        }
        else {
          switch (chr) {
            case '\'':
            return [[ComIgormaznitsaProlParserProlTokenizer_ProlTokenizerResult alloc] initWithComIgormaznitsaProlDataTerm:[self makeTermFromStringWithNSString:[strbuffer description] withInt:state] withInt:state];
            case '\\':
            {
              specialchar = YES;
            }
            break;
            default:
            {
              (void) [strbuffer appendWithChar:chr];
            }
          }
        }
      }
      break;
      case ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_VARIABLE:
      {
        if ([JavaLangCharacter isISOControlWithChar:chr] || [JavaLangCharacter isWhitespaceWithChar:chr]) {
          NSString *name = [strbuffer description];
          if ([((NSString *) nil_chk(name)) isEqual:@"_"]) {
            return [[ComIgormaznitsaProlParserProlTokenizer_ProlTokenizerResult alloc] initWithComIgormaznitsaProlDataTerm:[[ComIgormaznitsaProlDataVar alloc] init] withInt:state];
          }
          return [[ComIgormaznitsaProlParserProlTokenizer_ProlTokenizerResult alloc] initWithComIgormaznitsaProlDataTerm:[[ComIgormaznitsaProlDataVar alloc] initWithNSString:name] withInt:state];
        }
        else if (chr != '_' && ![JavaLangCharacter isLetterOrDigitWithChar:chr]) {
          [reader pushCharBackWithChar:chr];
          NSString *name = [strbuffer description];
          if ([((NSString *) nil_chk(name)) isEqual:@"_"]) {
            return [[ComIgormaznitsaProlParserProlTokenizer_ProlTokenizerResult alloc] initWithComIgormaznitsaProlDataTerm:[[ComIgormaznitsaProlDataVar alloc] init] withInt:state];
          }
          return [[ComIgormaznitsaProlParserProlTokenizer_ProlTokenizerResult alloc] initWithComIgormaznitsaProlDataTerm:[[ComIgormaznitsaProlDataVar alloc] initWithNSString:name] withInt:state];
        }
        else {
          (void) [strbuffer appendWithChar:chr];
        }
      }
      break;
    }
  }
}

- (ComIgormaznitsaProlDataTerm *)makeTermFromStringWithNSString:(NSString *)string
                                                        withInt:(int)state {
  ComIgormaznitsaProlDataTerm *result = nil;
  switch (state) {
    case ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_INTEGER:
    {
      @try {
        result = [[ComIgormaznitsaProlDataTermInteger alloc] initWithNSString:string];
      }
      @catch (JavaLangNumberFormatException *ex) {
      }
    }
    break;
    case ComIgormaznitsaProlParserProlTokenizer_INSIDE_STATE_FLOAT:
    {
      @try {
        result = [[ComIgormaznitsaProlDataTermFloat alloc] initWithNSString:string];
      }
      @catch (JavaLangNumberFormatException *ex) {
      }
    }
    break;
  }
  if (result == nil) {
    result = [[ComIgormaznitsaProlDataTerm alloc] initWithNSString:string];
  }
  return result;
}

- (void)copyAllFieldsTo:(ComIgormaznitsaProlParserProlTokenizer *)other {
  [super copyAllFieldsTo:other];
  other->lastPushedTerm_ = lastPushedTerm_;
  other->lastReadTokenLineNum_ = lastReadTokenLineNum_;
  other->lastReadTokenStrPos_ = lastReadTokenStrPos_;
  other->prevReadTokenLineNum_ = prevReadTokenLineNum_;
  other->prevReadTokenStrPos_ = prevReadTokenStrPos_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", "ProlTokenizer", NULL, 0x1, NULL },
    { "pushTermBackWithComIgormaznitsaProlParserProlTokenizer_ProlTokenizerResult:", "pushTermBack", "V", 0x1, NULL },
    { "peekTokenWithComIgormaznitsaProlParserProlReader:withComIgormaznitsaProlContainersKnowledgeBase:", "peekToken", "Lcom.igormaznitsa.prol.parser.ProlTokenizer$ProlTokenizerResult;", 0x1, "Ljava.io.IOException;" },
    { "getLastTokenStrPos", NULL, "I", 0x1, NULL },
    { "getLastTokenLineNum", NULL, "I", 0x1, NULL },
    { "fixPositionWithComIgormaznitsaProlParserProlReader:", "fixPosition", "V", 0x2, NULL },
    { "skipCommentsWithComIgormaznitsaProlParserProlReader:", "skipComments", "V", 0x2, "Ljava.io.IOException;" },
    { "nextTokenWithComIgormaznitsaProlParserProlReader:withComIgormaznitsaProlContainersKnowledgeBase:", "nextToken", "Lcom.igormaznitsa.prol.parser.ProlTokenizer$ProlTokenizerResult;", 0x1, "Ljava.io.IOException;" },
    { "makeTermFromStringWithNSString:withInt:", "makeTermFromString", "Lcom.igormaznitsa.prol.data.Term;", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "lastPushedTerm_", NULL, 0x2, "Lcom.igormaznitsa.prol.parser.ProlTokenizer$ProlTokenizerResult;" },
    { "prevReadTokenLineNum_", NULL, 0x2, "I" },
    { "prevReadTokenStrPos_", NULL, 0x2, "I" },
    { "lastReadTokenLineNum_", NULL, 0x2, "I" },
    { "lastReadTokenStrPos_", NULL, 0x2, "I" },
    { "INSIDE_STATE_LOOKFOR_", NULL, 0x1a, "I" },
    { "INSIDE_STATE_ATOM_", NULL, 0x1a, "I" },
    { "INSIDE_STATE_STRING_", NULL, 0x1a, "I" },
    { "INSIDE_STATE_OPERATOR_", NULL, 0x1a, "I" },
    { "INSIDE_STATE_VARIABLE_", NULL, 0x1a, "I" },
    { "INSIDE_STATE_INTEGER_", NULL, 0x1a, "I" },
    { "INSIDE_STATE_FLOAT_", NULL, 0x1a, "I" },
  };
  static J2ObjcClassInfo _ComIgormaznitsaProlParserProlTokenizer = { "ProlTokenizer", "com.igormaznitsa.prol.parser", NULL, 0x11, 9, methods, 12, fields, 0, NULL};
  return &_ComIgormaznitsaProlParserProlTokenizer;
}

@end
@implementation ComIgormaznitsaProlParserProlTokenizer_ProlTokenizerResult

+ (int)STATE_LOOKFOR {
  return ComIgormaznitsaProlParserProlTokenizer_ProlTokenizerResult_STATE_LOOKFOR;
}

+ (int)STATE_ATOM {
  return ComIgormaznitsaProlParserProlTokenizer_ProlTokenizerResult_STATE_ATOM;
}

+ (int)STATE_STRING {
  return ComIgormaznitsaProlParserProlTokenizer_ProlTokenizerResult_STATE_STRING;
}

+ (int)STATE_OPERATOR {
  return ComIgormaznitsaProlParserProlTokenizer_ProlTokenizerResult_STATE_OPERATOR;
}

+ (int)STATE_VARIABLE {
  return ComIgormaznitsaProlParserProlTokenizer_ProlTokenizerResult_STATE_VARIABLE;
}

- (id)initWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)term
                                  withInt:(int)state {
  if (self = [super init]) {
    self->term_ = term;
    self->state_ = state;
  }
  return self;
}

- (int)getTermType {
  return [((ComIgormaznitsaProlDataTerm *) nil_chk(term_)) getTermType];
}

- (NSString *)getText {
  return [((ComIgormaznitsaProlDataTerm *) nil_chk(term_)) getText];
}

- (int)getState {
  return state_;
}

- (ComIgormaznitsaProlDataTerm *)getTerm {
  return term_;
}

- (void)copyAllFieldsTo:(ComIgormaznitsaProlParserProlTokenizer_ProlTokenizerResult *)other {
  [super copyAllFieldsTo:other];
  other->state_ = state_;
  other->term_ = term_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithComIgormaznitsaProlDataTerm:withInt:", "ProlTokenizerResult", NULL, 0x1, NULL },
    { "getTermType", NULL, "I", 0x11, NULL },
    { "getText", NULL, "Ljava.lang.String;", 0x11, NULL },
    { "getState", NULL, "I", 0x11, NULL },
    { "getTerm", NULL, "Lcom.igormaznitsa.prol.data.Term;", 0x11, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "STATE_LOOKFOR_", NULL, 0x19, "I" },
    { "STATE_ATOM_", NULL, 0x19, "I" },
    { "STATE_STRING_", NULL, 0x19, "I" },
    { "STATE_OPERATOR_", NULL, 0x19, "I" },
    { "STATE_VARIABLE_", NULL, 0x19, "I" },
    { "term_", NULL, 0x12, "Lcom.igormaznitsa.prol.data.Term;" },
    { "state_", NULL, 0x12, "I" },
  };
  static J2ObjcClassInfo _ComIgormaznitsaProlParserProlTokenizer_ProlTokenizerResult = { "ProlTokenizerResult", "com.igormaznitsa.prol.parser", "ProlTokenizer", 0x19, 5, methods, 7, fields, 0, NULL};
  return &_ComIgormaznitsaProlParserProlTokenizer_ProlTokenizerResult;
}

@end
