//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/igormaznitsa/prol/parser/ProlConsult.java
//
//  Created by katsura on 14/04/13.
//

#include "IOSClass.h"
#include "com/igormaznitsa/prol/containers/KnowledgeBase.h"
#include "com/igormaznitsa/prol/data/Operator.h"
#include "com/igormaznitsa/prol/data/Term.h"
#include "com/igormaznitsa/prol/data/TermStruct.h"
#include "com/igormaznitsa/prol/data/Var.h"
#include "com/igormaznitsa/prol/exceptions/ParserException.h"
#include "com/igormaznitsa/prol/exceptions/ProlHaltExecutionException.h"
#include "com/igormaznitsa/prol/exceptions/ProlKnowledgeBaseException.h"
#include "com/igormaznitsa/prol/io/ProlStreamManager.h"
#include "com/igormaznitsa/prol/logic/Goal.h"
#include "com/igormaznitsa/prol/logic/ProlContext.h"
#include "com/igormaznitsa/prol/parser/ProlConsult.h"
#include "com/igormaznitsa/prol/parser/ProlReader.h"
#include "com/igormaznitsa/prol/parser/ProlTokenizer.h"
#include "com/igormaznitsa/prol/parser/ProlTreeBuilder.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/Reader.h"
#include "java/io/Writer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Thread.h"
#include "java/lang/ThreadDeath.h"
#include "java/lang/Throwable.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"

@implementation ComIgormaznitsaProlParserProlConsult

static JavaUtilLoggingLogger * ComIgormaznitsaProlParserProlConsult_LOG_;

+ (JavaUtilLoggingLogger *)LOG {
  return ComIgormaznitsaProlParserProlConsult_LOG_;
}

- (id)initWithComIgormaznitsaProlLogicProlContext:(ComIgormaznitsaProlLogicProlContext *)context {
  return [self initComIgormaznitsaProlParserProlConsultWithComIgormaznitsaProlParserProlReader:(ComIgormaznitsaProlParserProlReader *) check_class_cast(nil, [ComIgormaznitsaProlParserProlReader class]) withComIgormaznitsaProlLogicProlContext:context];
}

- (id)initWithNSString:(NSString *)string
withComIgormaznitsaProlLogicProlContext:(ComIgormaznitsaProlLogicProlContext *)context {
  return [self initComIgormaznitsaProlParserProlConsultWithComIgormaznitsaProlParserProlReader:[[ComIgormaznitsaProlParserProlReader alloc] initWithNSString:string] withComIgormaznitsaProlLogicProlContext:context];
}

- (id)initWithJavaIoInputStream:(JavaIoInputStream *)inArg
withComIgormaznitsaProlLogicProlContext:(ComIgormaznitsaProlLogicProlContext *)context {
  return [self initComIgormaznitsaProlParserProlConsultWithComIgormaznitsaProlParserProlReader:[[ComIgormaznitsaProlParserProlReader alloc] initWithJavaIoInputStream:inArg] withComIgormaznitsaProlLogicProlContext:context];
}

- (id)initWithJavaIoReader:(JavaIoReader *)reader
withComIgormaznitsaProlLogicProlContext:(ComIgormaznitsaProlLogicProlContext *)context {
  return [self initComIgormaznitsaProlParserProlConsultWithComIgormaznitsaProlParserProlReader:[[ComIgormaznitsaProlParserProlReader alloc] initWithJavaIoReader:reader] withComIgormaznitsaProlLogicProlContext:context];
}

- (id)initComIgormaznitsaProlParserProlConsultWithComIgormaznitsaProlParserProlReader:(ComIgormaznitsaProlParserProlReader *)reader
                                              withComIgormaznitsaProlLogicProlContext:(ComIgormaznitsaProlLogicProlContext *)context {
  if (self = [super init]) {
    self->reader_ = reader;
    self->context_ = context;
    self->base_ = [((ComIgormaznitsaProlLogicProlContext *) nil_chk(context)) getKnowledgeBase];
  }
  return self;
}

- (id)initWithComIgormaznitsaProlParserProlReader:(ComIgormaznitsaProlParserProlReader *)reader
          withComIgormaznitsaProlLogicProlContext:(ComIgormaznitsaProlLogicProlContext *)context {
  return [self initComIgormaznitsaProlParserProlConsultWithComIgormaznitsaProlParserProlReader:reader withComIgormaznitsaProlLogicProlContext:context];
}

- (void)consult {
  if (self->reader_ == nil) {
    return;
  }
  ComIgormaznitsaProlParserProlTreeBuilder *treeBuilder = [[ComIgormaznitsaProlParserProlTreeBuilder alloc] initWithComIgormaznitsaProlLogicProlContext:context_];
  ComIgormaznitsaProlParserProlTokenizer *tokenizer = [[ComIgormaznitsaProlParserProlTokenizer alloc] init];
  JavaLangThread *thisthread = [JavaLangThread currentThread];
  while (![((JavaLangThread *) nil_chk(thisthread)) isInterrupted]) {
    ComIgormaznitsaProlDataTerm *nextItem = [treeBuilder readPhraseAndMakeTreeWithComIgormaznitsaProlParserProlTokenizer:tokenizer withComIgormaznitsaProlParserProlReader:reader_];
    if (nextItem == nil) {
      break;
    }
    int line = [tokenizer getLastTokenLineNum];
    int strpos = [tokenizer getLastTokenStrPos];
    @try {
      switch ([((ComIgormaznitsaProlDataTerm *) nil_chk(nextItem)) getTermType]) {
        case ComIgormaznitsaProlDataTerm_TYPE_ATOM:
        {
          [((id<ComIgormaznitsaProlContainersKnowledgeBase>) nil_chk(base_)) assertZWithComIgormaznitsaProlDataTermStruct:[[ComIgormaznitsaProlDataTermStruct alloc] initWithComIgormaznitsaProlDataTerm:nextItem]];
        }
        break;
        case ComIgormaznitsaProlDataTerm_TYPE_STRUCT:
        {
          ComIgormaznitsaProlDataTermStruct *struct_ = (ComIgormaznitsaProlDataTermStruct *) check_class_cast(nextItem, [ComIgormaznitsaProlDataTermStruct class]);
          ComIgormaznitsaProlDataTerm *functor = [struct_ getFunctor];
          switch ([((ComIgormaznitsaProlDataTerm *) nil_chk(functor)) getTermType]) {
            case ComIgormaznitsaProlDataTerm_TYPE_OPERATOR:
            {
              ComIgormaznitsaProlDataOperator *op = (ComIgormaznitsaProlDataOperator *) check_class_cast(functor, [ComIgormaznitsaProlDataOperator class]);
              NSString *text = [op getText];
              int type = [op getOperatorType];
              if ([struct_ isFunctorLikeRuleDefinition]) {
                switch (type) {
                  case ComIgormaznitsaProlDataOperator_OPTYPE_XFX:
                  {
                    [((id<ComIgormaznitsaProlContainersKnowledgeBase>) nil_chk(base_)) assertZWithComIgormaznitsaProlDataTermStruct:struct_];
                  }
                  break;
                  case ComIgormaznitsaProlDataOperator_OPTYPE_FX:
                  {
                    if (![self processDirectiveWithComIgormaznitsaProlDataTerm:[struct_ getElementWithInt:0]]) {
                      @throw [[ComIgormaznitsaProlExceptionsProlHaltExecutionException alloc] initWithInt:2];
                    }
                  }
                  break;
                }
              }
              else if ([@"?-" isEqual:text]) {
                JavaIoReader *userreader = [((id<ComIgormaznitsaProlIoProlStreamManager>) nil_chk([((ComIgormaznitsaProlLogicProlContext *) nil_chk(context_)) getStreamManager])) getReaderForResourceWithNSString:@"user"];
                JavaIoWriter *userwriter = [((id<ComIgormaznitsaProlIoProlStreamManager>) nil_chk([context_ getStreamManager])) getWriterForResourceWithNSString:@"user" withBoolean:YES];
                ComIgormaznitsaProlDataTerm *termGoal = [struct_ getElementWithInt:0];
                if (userwriter != nil) {
                  [userwriter writeWithNSString:@"Goal: "];
                  [userwriter writeWithNSString:[((ComIgormaznitsaProlDataTerm *) nil_chk(termGoal)) forWrite]];
                  [userwriter writeWithNSString:@"\x0d\n"];
                }
                id<JavaUtilMap> varmap = [[JavaUtilHashMap alloc] init];
                int solutioncounter = 0;
                ComIgormaznitsaProlLogicGoal *thisGoal = [[ComIgormaznitsaProlLogicGoal alloc] initWithComIgormaznitsaProlDataTerm:termGoal withComIgormaznitsaProlLogicProlContext:context_ withComIgormaznitsaProlTraceTraceListener:nil];
                while (YES) {
                  [varmap clear];
                  if ([self solveGoalWithComIgormaznitsaProlLogicGoal:thisGoal withJavaUtilMap:varmap]) {
                    solutioncounter++;
                    if (userwriter != nil) {
                      [userwriter writeWithNSString:@"\x0d\nYES\x0d\n"];
                      if (![varmap isEmpty]) {
                        for (id<JavaUtilMap_Entry> __strong avar in nil_chk([varmap entrySet])) {
                          NSString *name = [((id<JavaUtilMap_Entry>) nil_chk(avar)) getKey];
                          ComIgormaznitsaProlDataVar *value = [avar getValue];
                          [userwriter writeWithNSString:name];
                          [userwriter writeWithInt:'='];
                          if ([((ComIgormaznitsaProlDataVar *) nil_chk(value)) isUndefined]) {
                            [userwriter writeWithNSString:@"???\x0d\n"];
                          }
                          else {
                            [userwriter writeWithNSString:[value forWrite]];
                            [userwriter writeWithNSString:@"\x0d\n"];
                          }
                          [userwriter flush];
                        }
                      }
                    }
                  }
                  else {
                    if (userwriter != nil) {
                      [userwriter writeWithNSString:[NSString stringWithFormat:@"%d%@", solutioncounter, (solutioncounter > 1 ? @" Solutions\x0d\n" : @" Solution\x0d\n")]];
                      [userwriter writeWithNSString:@"\x0d\nNO\x0d\n"];
                    }
                    break;
                  }
                  if (userwriter != nil && userreader != nil) {
                    (void) [userwriter appendWithJavaLangCharSequence:@"Next solution? "];
                    int chr = [userreader read];
                    if (chr < 0) {
                      if (userwriter != nil) {
                        (void) [userwriter appendWithJavaLangCharSequence:@"    Can't get the key value, it is possible the execution has been canceled."];
                      }
                      break;
                    }
                    else {
                      if (chr == ';') {
                        if (userwriter != nil) {
                          (void) [userwriter appendWithJavaLangCharSequence:@"\x0d\n"];
                        }
                        continue;
                      }
                      else {
                        if (userwriter != nil) {
                          [userwriter writeWithNSString:[NSString stringWithFormat:@"\x0d\n%d%@", solutioncounter, (solutioncounter > 1 ? @" Solutions\x0d\n" : @" Solution\x0d\n")]];
                          (void) [userwriter appendWithJavaLangCharSequence:@"Stopped by user"];
                        }
                        break;
                      }
                    }
                  }
                }
                if (userwriter != nil) {
                  [userwriter flush];
                }
                @throw [[ComIgormaznitsaProlExceptionsProlHaltExecutionException alloc] initWithNSString:@"Halted because a goal failed." withInt:1];
              }
              else {
                [((id<ComIgormaznitsaProlContainersKnowledgeBase>) nil_chk(base_)) assertZWithComIgormaznitsaProlDataTermStruct:struct_];
              }
            }
            break;
            default:
            {
              [((id<ComIgormaznitsaProlContainersKnowledgeBase>) nil_chk(base_)) assertZWithComIgormaznitsaProlDataTermStruct:struct_];
            }
            break;
          }
        }
        break;
        default:
        {
          @throw [[ComIgormaznitsaProlExceptionsProlKnowledgeBaseException alloc] initWithNSString:[NSString stringWithFormat:@"Such element can't be saved at the knowledge base [%@]", nextItem]];
        }
      }
    }
    @catch (JavaLangThrowable *ex) {
      [((JavaUtilLoggingLogger *) nil_chk(ComIgormaznitsaProlParserProlConsult_LOG_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel SEVERE] withNSString:@"consult()" withJavaLangThrowable:ex];
      if ([ex isKindOfClass:[JavaLangThreadDeath class]]) {
        @throw (JavaLangThreadDeath *) check_class_cast(ex, [JavaLangThreadDeath class]);
      }
      @throw [[ComIgormaznitsaProlExceptionsParserException alloc] initWithNSString:[((JavaLangThrowable *) nil_chk(ex)) getMessage] withInt:line withInt:strpos withJavaLangThrowable:ex];
    }
  }
}

- (BOOL)processGoalWithNSString:(NSString *)goal
                withJavaUtilMap:(id<JavaUtilMap>)varTable {
  ComIgormaznitsaProlParserProlTreeBuilder *treebuilder = [[ComIgormaznitsaProlParserProlTreeBuilder alloc] initWithComIgormaznitsaProlLogicProlContext:context_];
  ComIgormaznitsaProlDataTerm *term = [treebuilder readPhraseAndMakeTreeWithNSString:goal];
  return [self processGoalWithComIgormaznitsaProlDataTerm:term withJavaUtilMap:varTable];
}

- (BOOL)processGoalWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)goalterm
                                   withJavaUtilMap:(id<JavaUtilMap>)varTable {
  ComIgormaznitsaProlLogicGoal *goal = [[ComIgormaznitsaProlLogicGoal alloc] initWithComIgormaznitsaProlDataTerm:goalterm withComIgormaznitsaProlLogicProlContext:context_ withComIgormaznitsaProlTraceTraceListener:nil];
  ComIgormaznitsaProlDataTerm *result = nil;
  result = [goal solve];
  if (result != nil && varTable != nil) {
    [result fillVarablesWithJavaUtilMap:varTable];
  }
  return result != nil;
}

- (BOOL)solveGoalWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)goal
                                  withJavaUtilMap:(id<JavaUtilMap>)varTable {
  ComIgormaznitsaProlDataTerm *result = [((ComIgormaznitsaProlLogicGoal *) nil_chk(goal)) solve];
  if (result != nil && varTable != nil) {
    [result fillVarablesWithJavaUtilMap:varTable];
  }
  return result != nil;
}

- (BOOL)processDirectiveWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)directive {
  ComIgormaznitsaProlLogicGoal *goal = [[ComIgormaznitsaProlLogicGoal alloc] initWithComIgormaznitsaProlDataTerm:directive withComIgormaznitsaProlLogicProlContext:context_ withComIgormaznitsaProlTraceTraceListener:nil];
  return [goal solve] != nil;
}

+ (void)initialize {
  if (self == [ComIgormaznitsaProlParserProlConsult class]) {
    ComIgormaznitsaProlParserProlConsult_LOG_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[ComIgormaznitsaProlParserProlConsult class]] getCanonicalName]];
  }
}

- (void)copyAllFieldsTo:(ComIgormaznitsaProlParserProlConsult *)other {
  [super copyAllFieldsTo:other];
  other->base_ = base_;
  other->context_ = context_;
  other->reader_ = reader_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithComIgormaznitsaProlLogicProlContext:", "ProlConsult", NULL, 0x1, NULL },
    { "initWithNSString:withComIgormaznitsaProlLogicProlContext:", "ProlConsult", NULL, 0x1, NULL },
    { "initWithJavaIoInputStream:withComIgormaznitsaProlLogicProlContext:", "ProlConsult", NULL, 0x1, NULL },
    { "initWithJavaIoReader:withComIgormaznitsaProlLogicProlContext:", "ProlConsult", NULL, 0x1, NULL },
    { "initWithComIgormaznitsaProlParserProlReader:withComIgormaznitsaProlLogicProlContext:", "ProlConsult", NULL, 0x1, NULL },
    { "consult", NULL, "V", 0x1, "Ljava.io.IOException;" },
    { "processGoalWithNSString:withJavaUtilMap:", "processGoal", "Z", 0x1, "Ljava.io.IOException;Ljava.lang.InterruptedException;" },
    { "processGoalWithComIgormaznitsaProlDataTerm:withJavaUtilMap:", "processGoal", "Z", 0x1, "Ljava.lang.InterruptedException;" },
    { "solveGoalWithComIgormaznitsaProlLogicGoal:withJavaUtilMap:", "solveGoal", "Z", 0x12, "Ljava.lang.InterruptedException;" },
    { "processDirectiveWithComIgormaznitsaProlDataTerm:", "processDirective", "Z", 0x12, "Ljava.io.IOException;Ljava.lang.InterruptedException;" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "LOG_", NULL, 0x1a, "Ljava.util.logging.Logger;" },
    { "reader_", NULL, 0x12, "Lcom.igormaznitsa.prol.parser.ProlReader;" },
    { "context_", NULL, 0x12, "Lcom.igormaznitsa.prol.logic.ProlContext;" },
    { "base_", NULL, 0x12, "Lcom.igormaznitsa.prol.containers.KnowledgeBase;" },
  };
  static J2ObjcClassInfo _ComIgormaznitsaProlParserProlConsult = { "ProlConsult", "com.igormaznitsa.prol.parser", NULL, 0x1, 10, methods, 4, fields, 0, NULL};
  return &_ComIgormaznitsaProlParserProlConsult;
}

@end
