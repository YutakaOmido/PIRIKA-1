
//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/igormaznitsa/prol/logic/Goal.java
//
//  Created by katsura on 14/04/13.
//

#include "IOSClass.h"
#include "com/igormaznitsa/prol/containers/ClauseIterator.h"
#include "com/igormaznitsa/prol/containers/KnowledgeBase.h"
#include "com/igormaznitsa/prol/data/NumericTerm.h"
#include "com/igormaznitsa/prol/data/Term.h"
#include "com/igormaznitsa/prol/data/TermStruct.h"
#include "com/igormaznitsa/prol/data/Var.h"
#include "com/igormaznitsa/prol/exceptions/ProlCriticalError.h"
#include "com/igormaznitsa/prol/exceptions/ProlHaltExecutionException.h"
#include "com/igormaznitsa/prol/exceptions/ProlInstantiationErrorException.h"
#include "com/igormaznitsa/prol/exceptions/ProlTypeErrorException.h"
#include "com/igormaznitsa/prol/libraries/PredicateProcessor.h"
#include "com/igormaznitsa/prol/logic/Goal.h"
#include "com/igormaznitsa/prol/logic/ProlContext.h"
#include "com/igormaznitsa/prol/logic/VariableStateSnapshot.h"
#include "com/igormaznitsa/prol/parser/ProlTreeBuilder.h"
#include "com/igormaznitsa/prol/trace/TraceListener.h"
#include "com/igormaznitsa/prol/utils/Utils.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Thread.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Map.h"

@implementation ComIgormaznitsaProlLogicGoal

+ (int)GOALRESULT_SOLVED {
  return ComIgormaznitsaProlLogicGoal_GOALRESULT_SOLVED;
}

+ (int)GOALRESULT_FAIL {
  return ComIgormaznitsaProlLogicGoal_GOALRESULT_FAIL;
}

+ (int)GOALRESULT_STACK_CHANGED {
  return ComIgormaznitsaProlLogicGoal_GOALRESULT_STACK_CHANGED;
}

- (NSString *)description {
  return [NSString stringWithFormat:@"%@Goal(%@)", ([self isCompleted] ? @"Completed " : @"Active "), [((ComIgormaznitsaProlDataTerm *) nil_chk(goalTerm_)) description]];
}

- (id<JavaUtilList>)getChainAsList {
  id<JavaUtilList> result = [[JavaUtilLinkedList alloc] init];
  ComIgormaznitsaProlLogicGoal *curgoal = ((ComIgormaznitsaProlLogicGoal *) nil_chk(rootGoal_))->rootLastGoalAtChain_;
  while (curgoal != nil) {
    [result addWithInt:0 withId:curgoal];
    curgoal = ((ComIgormaznitsaProlLogicGoal *) nil_chk(curgoal))->prevGoalAtChain_;
  }
  return result;
}

- (NSNumber *)getVarAsNumberWithNSString:(NSString *)varName {
  ComIgormaznitsaProlDataVar *var = [self getVarForNameWithNSString:varName];
  if (var == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Unknown variable for name '%@'", varName]];
  }
  ComIgormaznitsaProlDataTerm *value = [((ComIgormaznitsaProlDataVar *) nil_chk(var)) getValue];
  if (value == nil) {
    return nil;
  }
  else {
    if ([value conformsToProtocol: @protocol(ComIgormaznitsaProlDataNumericTerm)]) {
      return [((id<ComIgormaznitsaProlDataNumericTerm>) check_protocol_cast(value, @protocol(ComIgormaznitsaProlDataNumericTerm))) getNumericValue];
    }
    else {
      @throw [[JavaLangNumberFormatException alloc] initWithNSString:@"The variable contains a non-numeric value"];
    }
  }
}

- (NSString *)getVarAsTextWithNSString:(NSString *)varName {
  ComIgormaznitsaProlDataVar *var = [self getVarForNameWithNSString:varName];
  if (var == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Unknown variable for name '%@'", varName]];
  }
  ComIgormaznitsaProlDataTerm *value = [((ComIgormaznitsaProlDataVar *) nil_chk(var)) getValue];
  if (value == nil) {
    return nil;
  }
  else {
    return [value description];
  }
}

- (ComIgormaznitsaProlDataVar *)getVarForNameWithNSString:(NSString *)name {
  if (name == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"Variable name is null"];
  }
  return variables_ == nil ? nil : [variables_ getWithId:name];
}

- (ComIgormaznitsaProlLogicGoal *)replaceLastGoalAtChainWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)goal {
  if (tracer_ != nil) {
    [tracer_ onProlGoalExitWithComIgormaznitsaProlLogicGoal:((ComIgormaznitsaProlLogicGoal *) nil_chk(self->rootGoal_))->rootLastGoalAtChain_];
  }
  ComIgormaznitsaProlLogicGoal *newGoal = [[ComIgormaznitsaProlLogicGoal alloc] initWithComIgormaznitsaProlLogicGoal:self->rootGoal_ withComIgormaznitsaProlDataTerm:goal withComIgormaznitsaProlLogicProlContext:context_ withComIgormaznitsaProlTraceTraceListener:((ComIgormaznitsaProlLogicGoal *) nil_chk(rootGoal_))->tracer_];
  ComIgormaznitsaProlLogicGoal *prevGoal = newGoal->prevGoalAtChain_;
  if (prevGoal != nil) {
    newGoal->prevGoalAtChain_ = prevGoal->prevGoalAtChain_;
    newGoal->nextAndTerm_ = prevGoal->nextAndTerm_;
    newGoal->nextAndTermForNextGoal_ = prevGoal->nextAndTermForNextGoal_;
  }
  return newGoal;
}

- (id)initComIgormaznitsaProlLogicGoalWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)rootGoal
                                       withComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)goal
                               withComIgormaznitsaProlLogicProlContext:(ComIgormaznitsaProlLogicProlContext *)context
                             withComIgormaznitsaProlTraceTraceListener:(id<ComIgormaznitsaProlTraceTraceListener>)tracer {
  if (self = [super init]) {
    self->rootGoal_ = rootGoal == nil ? self : rootGoal;
    self->goalTerm_ = [((ComIgormaznitsaProlDataTerm *) nil_chk(goal)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_ATOM ? [[ComIgormaznitsaProlDataTermStruct alloc] initWithComIgormaznitsaProlDataTerm:goal] : goal;
    self->context_ = context;
    self->tracer_ = tracer == nil ? [((ComIgormaznitsaProlLogicProlContext *) nil_chk(context)) getDefaultTraceListener] : tracer;
    if ([goal getTermType] == ComIgormaznitsaProlDataTerm_TYPE_VAR) {
      goal = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:goal];
      if ([((ComIgormaznitsaProlDataTerm *) nil_chk(goal)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_VAR) {
        @throw [[ComIgormaznitsaProlExceptionsProlInstantiationErrorException alloc] initWithNSString:@"callable" withComIgormaznitsaProlDataTerm:goal];
      }
    }
    switch ([((ComIgormaznitsaProlDataTerm *) nil_chk(goal)) getTermType]) {
      case ComIgormaznitsaProlDataTerm_TYPE_ATOM:
      {
        if ([goal conformsToProtocol: @protocol(ComIgormaznitsaProlDataNumericTerm)]) {
          @throw [[ComIgormaznitsaProlExceptionsProlTypeErrorException alloc] initWithNSString:@"callable" withComIgormaznitsaProlDataTerm:goal];
        }
      }
      break;
      case ComIgormaznitsaProlDataTerm_TYPE_VAR:
      {
        if ([((ComIgormaznitsaProlDataVar *) check_class_cast(goal, [ComIgormaznitsaProlDataVar class])) isUndefined]) {
          @throw [[ComIgormaznitsaProlExceptionsProlInstantiationErrorException alloc] initWithComIgormaznitsaProlDataTerm:goal];
        }
      }
      break;
      case ComIgormaznitsaProlDataTerm_TYPE_LIST:
      {
        @throw [[ComIgormaznitsaProlExceptionsProlTypeErrorException alloc] initWithNSString:@"callable" withComIgormaznitsaProlDataTerm:goal];
      }
    }
    if (rootGoal == nil) {
      if ([goal getTermType] == ComIgormaznitsaProlDataTerm_TYPE_ATOM) {
        varSnapshot_ = nil;
        variables_ = nil;
      }
      else {
        variables_ = [ComIgormaznitsaProlUtilsUtils fillTableWithVarsWithComIgormaznitsaProlDataTerm:goal];
        varSnapshot_ = [[ComIgormaznitsaProlLogicVariableStateSnapshot alloc] initWithComIgormaznitsaProlDataTerm:goal];
      }
      rootLastGoalAtChain_ = self;
      prevGoalAtChain_ = nil;
    }
    else {
      variables_ = nil;
      if ([goal getTermType] == ComIgormaznitsaProlDataTerm_TYPE_ATOM) {
        varSnapshot_ = nil;
      }
      else {
        varSnapshot_ = [[ComIgormaznitsaProlLogicVariableStateSnapshot alloc] initWithComIgormaznitsaProlLogicVariableStateSnapshot:rootGoal->varSnapshot_];
      }
      self->prevGoalAtChain_ = rootGoal->rootLastGoalAtChain_;
      rootGoal->rootLastGoalAtChain_ = self;
    }
  }
  return self;
}

- (id)initWithComIgormaznitsaProlLogicGoal:(ComIgormaznitsaProlLogicGoal *)rootGoal
           withComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)goal
   withComIgormaznitsaProlLogicProlContext:(ComIgormaznitsaProlLogicProlContext *)context
 withComIgormaznitsaProlTraceTraceListener:(id<ComIgormaznitsaProlTraceTraceListener>)tracer {
  return [self initComIgormaznitsaProlLogicGoalWithComIgormaznitsaProlLogicGoal:rootGoal withComIgormaznitsaProlDataTerm:goal withComIgormaznitsaProlLogicProlContext:context withComIgormaznitsaProlTraceTraceListener:tracer];
}

- (id)getAuxObject {
  return auxObject_;
}

- (id<ComIgormaznitsaProlTraceTraceListener>)getTracer {
  return tracer_;
}

- (void)setAuxObjectWithId:(id)obj {
  auxObject_ = obj;
}

- (ComIgormaznitsaProlDataTerm *)getGoalTerm {
  return goalTerm_;
}

- (ComIgormaznitsaProlLogicProlContext *)getContext {
  return context_;
}

- (id)init {
  if (self = [super init]) {
    rootGoal_ = nil;
    variables_ = nil;
    varSnapshot_ = nil;
    context_ = nil;
    tracer_ = nil;
  }
  return self;
}

- (id)initWithNSString:(NSString *)goal
withComIgormaznitsaProlLogicProlContext:(ComIgormaznitsaProlLogicProlContext *)context
withComIgormaznitsaProlTraceTraceListener:(id<ComIgormaznitsaProlTraceTraceListener>)tracer {
  return [self initComIgormaznitsaProlLogicGoalWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlParserProlTreeBuilder *) [[ComIgormaznitsaProlParserProlTreeBuilder alloc] initWithComIgormaznitsaProlLogicProlContext:context]) readPhraseAndMakeTreeWithNSString:goal] withComIgormaznitsaProlLogicProlContext:context withComIgormaznitsaProlTraceTraceListener:tracer];
}

- (id)initWithNSString:(NSString *)goal
withComIgormaznitsaProlLogicProlContext:(ComIgormaznitsaProlLogicProlContext *)context {
  return [self initComIgormaznitsaProlLogicGoalWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlParserProlTreeBuilder *) [[ComIgormaznitsaProlParserProlTreeBuilder alloc] initWithComIgormaznitsaProlLogicProlContext:context]) readPhraseAndMakeTreeWithNSString:goal] withComIgormaznitsaProlLogicProlContext:context withComIgormaznitsaProlTraceTraceListener:nil];
}

- (id)initComIgormaznitsaProlLogicGoalWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)goal
                              withComIgormaznitsaProlLogicProlContext:(ComIgormaznitsaProlLogicProlContext *)context
                            withComIgormaznitsaProlTraceTraceListener:(id<ComIgormaznitsaProlTraceTraceListener>)tracer {
  return [self initComIgormaznitsaProlLogicGoalWithComIgormaznitsaProlLogicGoal:nil withComIgormaznitsaProlDataTerm:goal withComIgormaznitsaProlLogicProlContext:context withComIgormaznitsaProlTraceTraceListener:tracer];
}

- (id)initWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)goal
  withComIgormaznitsaProlLogicProlContext:(ComIgormaznitsaProlLogicProlContext *)context
withComIgormaznitsaProlTraceTraceListener:(id<ComIgormaznitsaProlTraceTraceListener>)tracer {
  return [self initComIgormaznitsaProlLogicGoalWithComIgormaznitsaProlDataTerm:goal withComIgormaznitsaProlLogicProlContext:context withComIgormaznitsaProlTraceTraceListener:tracer];
}

- (id)initWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)goal
  withComIgormaznitsaProlLogicProlContext:(ComIgormaznitsaProlLogicProlContext *)context {
  return [self initComIgormaznitsaProlLogicGoalWithComIgormaznitsaProlLogicGoal:nil withComIgormaznitsaProlDataTerm:goal withComIgormaznitsaProlLogicProlContext:context withComIgormaznitsaProlTraceTraceListener:nil];
}

- (ComIgormaznitsaProlDataTerm *)solve {
  ComIgormaznitsaProlDataTerm *result = nil;
  BOOL loop = YES;
  ComIgormaznitsaProlLogicProlContext *localcontext = self->context_;
  while (loop) {
    if ([((ComIgormaznitsaProlLogicProlContext *) nil_chk(localcontext)) isHalted]) {
      @throw [[ComIgormaznitsaProlExceptionsProlHaltExecutionException alloc] init];
    }
    ComIgormaznitsaProlLogicGoal *goalToProcess = ((ComIgormaznitsaProlLogicGoal *) nil_chk(rootGoal_))->rootLastGoalAtChain_;
    if (goalToProcess == nil) {
      break;
    }
    else {
      if (!goalToProcess->noMoreVariantsFlag_) {
        switch ([goalToProcess _solve]) {
          case ComIgormaznitsaProlLogicGoal_GOALRESULT_FAIL:
          {
            if (tracer_ != nil) {
              [tracer_ onProlGoalFailWithComIgormaznitsaProlLogicGoal:goalToProcess];
              [tracer_ onProlGoalExitWithComIgormaznitsaProlLogicGoal:goalToProcess];
            }
            rootGoal_->rootLastGoalAtChain_ = goalToProcess->prevGoalAtChain_;
          }
          break;
          case ComIgormaznitsaProlLogicGoal_GOALRESULT_SOLVED:
          {
            goalToProcess = rootGoal_->rootLastGoalAtChain_;
            if (((ComIgormaznitsaProlLogicGoal *) nil_chk(goalToProcess))->nextAndTerm_ != nil) {
              ComIgormaznitsaProlLogicGoal *nextGoal = [[ComIgormaznitsaProlLogicGoal alloc] initWithComIgormaznitsaProlLogicGoal:rootGoal_ withComIgormaznitsaProlDataTerm:goalToProcess->nextAndTerm_ withComIgormaznitsaProlLogicProlContext:localcontext withComIgormaznitsaProlTraceTraceListener:rootGoal_->tracer_];
              nextGoal->nextAndTerm_ = goalToProcess->nextAndTermForNextGoal_;
            }
            else {
              result = rootGoal_->goalTerm_;
              loop = NO;
            }
          }
          break;
          case ComIgormaznitsaProlLogicGoal_GOALRESULT_STACK_CHANGED:
          {
          }
          break;
        }
      }
      else {
        if (tracer_ != nil) {
          [tracer_ onProlGoalExitWithComIgormaznitsaProlLogicGoal:goalToProcess];
        }
        rootGoal_->rootLastGoalAtChain_ = goalToProcess->prevGoalAtChain_;
      }
    }
  }
  return result;
}

- (int)_solve {
  if ([((JavaLangThread *) nil_chk([JavaLangThread currentThread])) isInterrupted]) {
    @throw [[JavaLangInterruptedException alloc] init];
  }
  if (tracer_ != nil) {
    if (notFirstProve_) {
      if (![tracer_ onProlGoalRedoWithComIgormaznitsaProlLogicGoal:self]) {
        return ComIgormaznitsaProlLogicGoal_GOALRESULT_FAIL;
      }
    }
    else {
      notFirstProve_ = YES;
      if (![tracer_ onProlGoalCallWithComIgormaznitsaProlLogicGoal:self]) {
        return ComIgormaznitsaProlLogicGoal_GOALRESULT_FAIL;
      }
    }
  }
  int result = ComIgormaznitsaProlLogicGoal_GOALRESULT_FAIL;
  BOOL loop = YES;
  while (loop) {
    if (varSnapshot_ != nil) {
      [varSnapshot_ resetToState];
    }
    if (subGoal_ != nil) {
      ComIgormaznitsaProlDataTerm *solvedTerm = [subGoal_ solve];
      if (subGoal_->cutMeet_) {
        clauseIterator_ = nil;
      }
      if (solvedTerm == nil) {
        subGoal_ = nil;
        if (clauseIterator_ == nil) {
          result = ComIgormaznitsaProlLogicGoal_GOALRESULT_FAIL;
          break;
        }
      }
      else {
        if (![((ComIgormaznitsaProlDataTerm *) nil_chk(thisConnector_)) EquWithComIgormaznitsaProlDataTerm:subGoalConnector_]) {
          @throw [[ComIgormaznitsaProlExceptionsProlCriticalError alloc] initWithNSString:@"Critical error #980234"];
        }
        result = ComIgormaznitsaProlLogicGoal_GOALRESULT_SOLVED;
        break;
      }
    }
    if (clauseIterator_ != nil) {
      if ([clauseIterator_ hasNext]) {
        ComIgormaznitsaProlDataTermStruct *structFromBase = [clauseIterator_ next];
        ComIgormaznitsaProlDataTerm *goalTermForEqu = nil;
        if ([((ComIgormaznitsaProlDataTermStruct *) nil_chk(((ComIgormaznitsaProlDataTermStruct *) check_class_cast(goalTerm_, [ComIgormaznitsaProlDataTermStruct class])))) isFunctorLikeRuleDefinition]) {
          goalTermForEqu = [((ComIgormaznitsaProlDataTerm *) nil_chk([((ComIgormaznitsaProlDataTermStruct *) nil_chk(((ComIgormaznitsaProlDataTermStruct *) check_class_cast(goalTerm_, [ComIgormaznitsaProlDataTermStruct class])))) getElementWithInt:0])) makeClone];
        }
        else {
          goalTermForEqu = [((ComIgormaznitsaProlDataTerm *) nil_chk(goalTerm_)) makeClone];
        }
        if (![((ComIgormaznitsaProlDataTerm *) nil_chk(goalTermForEqu)) EquWithComIgormaznitsaProlDataTerm:[((ComIgormaznitsaProlDataTermStruct *) nil_chk(structFromBase)) isFunctorLikeRuleDefinition] ? [structFromBase getElementWithInt:0] : structFromBase]) {
          @throw [[ComIgormaznitsaProlExceptionsProlCriticalError alloc] initWithNSString:@"impossible situation #2123123"];
        }
        if ([structFromBase isFunctorLikeRuleDefinition]) {
          thisConnector_ = goalTerm_;
          subGoalConnector_ = [structFromBase getElementWithInt:0];
          subGoal_ = [[ComIgormaznitsaProlLogicGoal alloc] initWithComIgormaznitsaProlDataTerm:[structFromBase getElementWithInt:1] withComIgormaznitsaProlLogicProlContext:context_ withComIgormaznitsaProlTraceTraceListener:tracer_];
          continue;
        }
        else {
          if (![((ComIgormaznitsaProlDataTerm *) nil_chk(goalTerm_)) EquWithComIgormaznitsaProlDataTerm:structFromBase]) {
            @throw [[ComIgormaznitsaProlExceptionsProlCriticalError alloc] initWithNSString:@"Impossible situation #0009824"];
          }
          result = ComIgormaznitsaProlLogicGoal_GOALRESULT_SOLVED;
          break;
        }
      }
      else {
        clauseIterator_ = nil;
        [self noMoreVariants];
        break;
      }
    }
    switch ([((ComIgormaznitsaProlDataTerm *) nil_chk(goalTerm_)) getTermType]) {
      case ComIgormaznitsaProlDataTerm_TYPE_ATOM:
      {
        NSString *text = [goalTerm_ getText];
        result = [((ComIgormaznitsaProlLogicProlContext *) nil_chk(context_)) hasPredicateAtLibraryForSignatureWithNSString:[NSString stringWithFormat:@"%@/0", text]] ? ComIgormaznitsaProlLogicGoal_GOALRESULT_SOLVED : ComIgormaznitsaProlLogicGoal_GOALRESULT_FAIL;
        [self noMoreVariants];
        loop = NO;
      }
      break;
      case ComIgormaznitsaProlDataTerm_TYPE_STRUCT:
      {
        ComIgormaznitsaProlDataTermStruct *struct_ = (ComIgormaznitsaProlDataTermStruct *) check_class_cast(goalTerm_, [ComIgormaznitsaProlDataTermStruct class]);
        int arity = [struct_ getArity];
        if ([struct_ isFunctorLikeRuleDefinition]) {
          ComIgormaznitsaProlDataTermStruct *structClone = (ComIgormaznitsaProlDataTermStruct *) check_class_cast([struct_ makeClone], [ComIgormaznitsaProlDataTermStruct class]);
          thisConnector_ = [struct_ getElementWithInt:0];
          subGoalConnector_ = [((ComIgormaznitsaProlDataTermStruct *) nil_chk(structClone)) getElementWithInt:0];
          if (arity == 1) {
            subGoal_ = [[ComIgormaznitsaProlLogicGoal alloc] initWithComIgormaznitsaProlDataTerm:[structClone getElementWithInt:0] withComIgormaznitsaProlLogicProlContext:context_ withComIgormaznitsaProlTraceTraceListener:tracer_];
          }
          else {
            subGoal_ = [[ComIgormaznitsaProlLogicGoal alloc] initWithComIgormaznitsaProlDataTerm:[structClone getElementWithInt:1] withComIgormaznitsaProlLogicProlContext:context_ withComIgormaznitsaProlTraceTraceListener:tracer_];
          }
        }
        else {
          ComIgormaznitsaProlDataTerm *functor = [struct_ getFunctor];
          NSString *functorText = [((ComIgormaznitsaProlDataTerm *) nil_chk(functor)) getText];
          BOOL process = YES;
          switch (arity) {
            case 0:
            {
              int len = [((NSString *) nil_chk(functorText)) length];
              if (len == 1 && [functorText charAtWithInt:0] == '!') {
                [self cut];
                process = NO;
                loop = NO;
                result = ComIgormaznitsaProlLogicGoal_GOALRESULT_SOLVED;
                noMoreVariantsFlag_ = YES;
              }
              else if (len == 2 && [@"!!" isEqual:functorText]) {
                [self cutLocal];
                process = NO;
                loop = NO;
                noMoreVariantsFlag_ = YES;
                result = ComIgormaznitsaProlLogicGoal_GOALRESULT_SOLVED;
              }
            }
            break;
            case 2:
            {
              int textLen = [((NSString *) nil_chk(functorText)) length];
              if (textLen == 1) {
                switch ([functorText charAtWithInt:0]) {
                  case ',':
                  {
                    ComIgormaznitsaProlLogicGoal *leftSubgoal = [self replaceLastGoalAtChainWithComIgormaznitsaProlDataTerm:[struct_ getElementWithInt:0]];
                    ((ComIgormaznitsaProlLogicGoal *) nil_chk(leftSubgoal))->nextAndTerm_ = [struct_ getElementWithInt:1];
                    leftSubgoal->nextAndTermForNextGoal_ = self->nextAndTerm_;
                    result = ComIgormaznitsaProlLogicGoal_GOALRESULT_STACK_CHANGED;
                    loop = NO;
                    process = NO;
                  }
                  break;
                  case ';':
                  {
                    if ([self getAuxObject] == nil) {
                      ComIgormaznitsaProlLogicGoal *leftSubbranch = [[ComIgormaznitsaProlLogicGoal alloc] initWithComIgormaznitsaProlLogicGoal:rootGoal_ withComIgormaznitsaProlDataTerm:[struct_ getElementWithInt:0] withComIgormaznitsaProlLogicProlContext:context_ withComIgormaznitsaProlTraceTraceListener:tracer_];
                      leftSubbranch->nextAndTerm_ = self->nextAndTerm_;
                      [self setAuxObjectWithId:leftSubbranch];
                    }
                    else {
                      (void) [self replaceLastGoalAtChainWithComIgormaznitsaProlDataTerm:[struct_ getElementWithInt:1]];
                    }
                    result = ComIgormaznitsaProlLogicGoal_GOALRESULT_STACK_CHANGED;
                    process = NO;
                    loop = NO;
                  }
                  break;
                }
              }
            }
            break;
          }
          if (process) {
            ComIgormaznitsaProlLibrariesPredicateProcessor *processor = [self checkProcessorWithComIgormaznitsaProlDataTermStruct:struct_];
            if (processor == [ComIgormaznitsaProlLibrariesPredicateProcessor NULL_PROCESSOR]) {
              clauseIterator_ = [((id<ComIgormaznitsaProlContainersKnowledgeBase>) nil_chk([((ComIgormaznitsaProlLogicProlContext *) nil_chk(context_)) getKnowledgeBase])) getClauseIteratorWithComIgormaznitsaProlDataTermStruct:struct_];
              if (clauseIterator_ == nil || ![clauseIterator_ hasNext]) {
                loop = NO;
                [self noMoreVariants];
                result = ComIgormaznitsaProlLogicGoal_GOALRESULT_FAIL;
              }
            }
            else {
              if ([((ComIgormaznitsaProlLibrariesPredicateProcessor *) nil_chk(processor)) isEvaluable] || [processor isDetermined]) {
                [self noMoreVariants];
              }
              if ([processor executeWithComIgormaznitsaProlLogicGoal:self withComIgormaznitsaProlDataTermStruct:struct_]) {
                result = ComIgormaznitsaProlLogicGoal_GOALRESULT_SOLVED;
              }
              else {
                result = ComIgormaznitsaProlLogicGoal_GOALRESULT_FAIL;
              }
              if (result == ComIgormaznitsaProlLogicGoal_GOALRESULT_SOLVED && [processor doesChangeGoalChain]) {
                result = ComIgormaznitsaProlLogicGoal_GOALRESULT_STACK_CHANGED;
              }
              loop = NO;
            }
          }
        }
      }
      break;
      default:
      {
        result = ComIgormaznitsaProlLogicGoal_GOALRESULT_FAIL;
        loop = NO;
        [self noMoreVariants];
      }
      break;
    }
  }
  return result;
}

- (void)noMoreVariants {
  noMoreVariantsFlag_ = YES;
}

- (void)cut {
  ((ComIgormaznitsaProlLogicGoal *) nil_chk(rootGoal_))->cutMeet_ = YES;
  rootGoal_->clauseIterator_ = nil;
  prevGoalAtChain_ = nil;
}

- (void)cutLocal {
  prevGoalAtChain_ = nil;
}

- (ComIgormaznitsaProlLibrariesPredicateProcessor *)checkProcessorWithComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)structure {
  ComIgormaznitsaProlLibrariesPredicateProcessor *processor = [((ComIgormaznitsaProlDataTermStruct *) nil_chk(structure)) getPredicateProcessor];
  if (processor == nil) {
    processor = [((ComIgormaznitsaProlLogicProlContext *) nil_chk(context_)) findProcessorWithComIgormaznitsaProlDataTermStruct:structure];
    if (processor == nil) {
      processor = [ComIgormaznitsaProlLibrariesPredicateProcessor NULL_PROCESSOR];
    }
    [structure setPredicateProcessorWithComIgormaznitsaProlLibrariesPredicateProcessor:processor];
  }
  return processor;
}

- (BOOL)isCompleted {
  return ((ComIgormaznitsaProlLogicGoal *) nil_chk(rootGoal_))->rootLastGoalAtChain_ == nil || noMoreVariantsFlag_;
}

- (ComIgormaznitsaProlLogicVariableStateSnapshot *)getVariableSnapshot {
  return varSnapshot_;
}

- (void)copyAllFieldsTo:(ComIgormaznitsaProlLogicGoal *)other {
  [super copyAllFieldsTo:other];
  other->auxObject_ = auxObject_;
  other->clauseIterator_ = clauseIterator_;
  other->context_ = context_;
  other->cutMeet_ = cutMeet_;
  other->goalTerm_ = goalTerm_;
  other->nextAndTerm_ = nextAndTerm_;
  other->nextAndTermForNextGoal_ = nextAndTermForNextGoal_;
  other->noMoreVariantsFlag_ = noMoreVariantsFlag_;
  other->notFirstProve_ = notFirstProve_;
  other->prevGoalAtChain_ = prevGoalAtChain_;
  other->rootGoal_ = rootGoal_;
  other->rootLastGoalAtChain_ = rootLastGoalAtChain_;
  other->subGoal_ = subGoal_;
  other->subGoalConnector_ = subGoalConnector_;
  other->thisConnector_ = thisConnector_;
  other->tracer_ = tracer_;
  other->varSnapshot_ = varSnapshot_;
  other->variables_ = variables_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "getChainAsList", NULL, "Ljava.util.List;", 0x1, NULL },
    { "getVarAsNumberWithNSString:", "getVarAsNumber", "Ljava.lang.Number;", 0x1, NULL },
    { "getVarAsTextWithNSString:", "getVarAsText", "Ljava.lang.String;", 0x1, NULL },
    { "getVarForNameWithNSString:", "getVarForName", "Lcom.igormaznitsa.prol.data.Var;", 0x1, NULL },
    { "replaceLastGoalAtChainWithComIgormaznitsaProlDataTerm:", "replaceLastGoalAtChain", "Lcom.igormaznitsa.prol.logic.Goal;", 0x1, NULL },
    { "initWithComIgormaznitsaProlLogicGoal:withComIgormaznitsaProlDataTerm:withComIgormaznitsaProlLogicProlContext:withComIgormaznitsaProlTraceTraceListener:", "Goal", NULL, 0x2, NULL },
    { "getAuxObject", NULL, "Ljava.lang.Object;", 0x1, NULL },
    { "getTracer", NULL, "Lcom.igormaznitsa.prol.trace.TraceListener;", 0x1, NULL },
    { "setAuxObjectWithId:", "setAuxObject", "V", 0x1, NULL },
    { "getGoalTerm", NULL, "Lcom.igormaznitsa.prol.data.Term;", 0x1, NULL },
    { "getContext", NULL, "Lcom.igormaznitsa.prol.logic.ProlContext;", 0x1, NULL },
    { "init", "Goal", NULL, 0x4, NULL },
    { "initWithNSString:withComIgormaznitsaProlLogicProlContext:withComIgormaznitsaProlTraceTraceListener:", "Goal", NULL, 0x1, "Ljava.io.IOException;Ljava.lang.InterruptedException;" },
    { "initWithNSString:withComIgormaznitsaProlLogicProlContext:", "Goal", NULL, 0x1, "Ljava.io.IOException;Ljava.lang.InterruptedException;" },
    { "initWithComIgormaznitsaProlDataTerm:withComIgormaznitsaProlLogicProlContext:withComIgormaznitsaProlTraceTraceListener:", "Goal", NULL, 0x1, NULL },
    { "initWithComIgormaznitsaProlDataTerm:withComIgormaznitsaProlLogicProlContext:", "Goal", NULL, 0x1, NULL },
    { "solve", NULL, "Lcom.igormaznitsa.prol.data.Term;", 0x1, "Ljava.lang.InterruptedException;" },
    { "_solve", NULL, "I", 0x2, "Ljava.lang.InterruptedException;" },
    { "noMoreVariants", NULL, "V", 0x1, NULL },
    { "cut", NULL, "V", 0x1, NULL },
    { "cutLocal", NULL, "V", 0x1, NULL },
    { "checkProcessorWithComIgormaznitsaProlDataTermStruct:", "checkProcessor", "Lcom.igormaznitsa.prol.libraries.PredicateProcessor;", 0x2, NULL },
    { "isCompleted", NULL, "Z", 0x1, NULL },
    { "getVariableSnapshot", NULL, "Lcom.igormaznitsa.prol.logic.VariableStateSnapshot;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "GOALRESULT_SOLVED_", NULL, 0x1a, "I" },
    { "GOALRESULT_FAIL_", NULL, 0x1a, "I" },
    { "GOALRESULT_STACK_CHANGED_", NULL, 0x1a, "I" },
    { "rootGoal_", NULL, 0x12, "Lcom.igormaznitsa.prol.logic.Goal;" },
    { "variables_", NULL, 0x12, "Ljava.util.Map;" },
    { "varSnapshot_", NULL, 0x12, "Lcom.igormaznitsa.prol.logic.VariableStateSnapshot;" },
    { "context_", NULL, 0x12, "Lcom.igormaznitsa.prol.logic.ProlContext;" },
    { "auxObject_", NULL, 0x2, "Ljava.lang.Object;" },
    { "noMoreVariantsFlag_", NULL, 0x2, "Z" },
    { "goalTerm_", NULL, 0x2, "Lcom.igormaznitsa.prol.data.Term;" },
    { "prevGoalAtChain_", NULL, 0x2, "Lcom.igormaznitsa.prol.logic.Goal;" },
    { "rootLastGoalAtChain_", NULL, 0x2, "Lcom.igormaznitsa.prol.logic.Goal;" },
    { "subGoal_", NULL, 0x2, "Lcom.igormaznitsa.prol.logic.Goal;" },
    { "subGoalConnector_", NULL, 0x2, "Lcom.igormaznitsa.prol.data.Term;" },
    { "thisConnector_", NULL, 0x2, "Lcom.igormaznitsa.prol.data.Term;" },
    { "nextAndTerm_", NULL, 0x2, "Lcom.igormaznitsa.prol.data.Term;" },
    { "nextAndTermForNextGoal_", NULL, 0x2, "Lcom.igormaznitsa.prol.data.Term;" },
    { "clauseIterator_", NULL, 0x2, "Lcom.igormaznitsa.prol.containers.ClauseIterator;" },
    { "cutMeet_", NULL, 0x2, "Z" },
    { "tracer_", NULL, 0x12, "Lcom.igormaznitsa.prol.trace.TraceListener;" },
    { "notFirstProve_", NULL, 0x2, "Z" },
  };
  static J2ObjcClassInfo _ComIgormaznitsaProlLogicGoal = { "Goal", "com.igormaznitsa.prol.logic", NULL, 0x1, 25, methods, 21, fields, 0, NULL};
  return &_ComIgormaznitsaProlLogicGoal;
}

@end
