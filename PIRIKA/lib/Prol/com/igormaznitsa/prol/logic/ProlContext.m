//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/igormaznitsa/prol/logic/ProlContext.java
//
//  Created by katsura on 14/04/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/igormaznitsa/prol/annotations/Consult.h"
#include "com/igormaznitsa/prol/containers/KnowledgeBase.h"
#include "com/igormaznitsa/prol/containers/OperatorContainer.h"
#include "com/igormaznitsa/prol/data/ConvertableToTerm.h"
#include "com/igormaznitsa/prol/data/NumericTerm.h"
#include "com/igormaznitsa/prol/data/Term.h"
#include "com/igormaznitsa/prol/data/TermFloat.h"
#include "com/igormaznitsa/prol/data/TermInteger.h"
#include "com/igormaznitsa/prol/data/TermList.h"
#include "com/igormaznitsa/prol/data/TermStruct.h"
#include "com/igormaznitsa/prol/exceptions/ProlCriticalError.h"
#include "com/igormaznitsa/prol/exceptions/ProlException.h"
#include "com/igormaznitsa/prol/io/DefaultProlStreamManagerImpl.h"
#include "com/igormaznitsa/prol/io/ProlMemoryPipe.h"
#include "com/igormaznitsa/prol/io/ProlStreamManager.h"
#include "com/igormaznitsa/prol/io/ProlTextInputStream.h"
#include "com/igormaznitsa/prol/io/ProlTextOutputStream.h"
#include "com/igormaznitsa/prol/io/ProlTextReader.h"
#include "com/igormaznitsa/prol/io/ProlTextWriter.h"
#include "com/igormaznitsa/prol/libraries/PredicateProcessor.h"
#include "com/igormaznitsa/prol/libraries/ProlAbstractLibrary.h"
#include "com/igormaznitsa/prol/libraries/ProlCoreLibrary.h"
#include "com/igormaznitsa/prol/logic/DefaultKnowledgeBaseFactory.h"
#include "com/igormaznitsa/prol/logic/Goal.h"
#include "com/igormaznitsa/prol/logic/KnowledgeBaseFactory.h"
#include "com/igormaznitsa/prol/logic/ProlContext.h"
#include "com/igormaznitsa/prol/logic/ProlMappedObjectSearcher.h"
#include "com/igormaznitsa/prol/logic/triggers/ProlTrigger.h"
#include "com/igormaznitsa/prol/logic/triggers/ProlTriggerType.h"
#include "com/igormaznitsa/prol/logic/triggers/TriggerEvent.h"
#include "com/igormaznitsa/prol/parser/ProlConsult.h"
#include "com/igormaznitsa/prol/parser/ProlTreeBuilder.h"
#include "com/igormaznitsa/prol/trace/TraceListener.h"
#include "com/igormaznitsa/prol/utils/Utils.h"
#include "java/io/IOException.h"
#include "java/io/PrintWriter.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/InternalError.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Runnable.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Thread.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/IdentityHashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/ThreadPoolExecutor.h"
#include "java/util/concurrent/locks/ReentrantLock.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"

@implementation ComIgormaznitsaProlLogicProlContext

static JavaUtilLoggingLogger * ComIgormaznitsaProlLogicProlContext_LOG_;
static NSString * ComIgormaznitsaProlLogicProlContext_CONTEXT_HALTED_MSG_ = @"Context halted";
static NSString * ComIgormaznitsaProlLogicProlContext_ENGINE_VERSION_ = @"1.1.5";
static NSString * ComIgormaznitsaProlLogicProlContext_ENGINE_NAME_ = @"Prol";
static NSString * ComIgormaznitsaProlLogicProlContext_USER_STREAM_ = @"user";
static ComIgormaznitsaProlLibrariesProlCoreLibrary * ComIgormaznitsaProlLogicProlContext_PROL_CORE_LIBRARY_;

+ (JavaUtilLoggingLogger *)LOG {
  return ComIgormaznitsaProlLogicProlContext_LOG_;
}

+ (NSString *)CONTEXT_HALTED_MSG {
  return ComIgormaznitsaProlLogicProlContext_CONTEXT_HALTED_MSG_;
}

+ (NSString *)ENGINE_VERSION {
  return ComIgormaznitsaProlLogicProlContext_ENGINE_VERSION_;
}

+ (NSString *)ENGINE_NAME {
  return ComIgormaznitsaProlLogicProlContext_ENGINE_NAME_;
}

+ (NSString *)USER_STREAM {
  return ComIgormaznitsaProlLogicProlContext_USER_STREAM_;
}

+ (ComIgormaznitsaProlLibrariesProlCoreLibrary *)PROL_CORE_LIBRARY {
  return ComIgormaznitsaProlLogicProlContext_PROL_CORE_LIBRARY_;
}

- (id<ComIgormaznitsaProlTraceTraceListener>)getDefaultTraceListener {
  return defaultTraceListener_;
}

- (void)setDefaultTraceListenerWithComIgormaznitsaProlTraceTraceListener:(id<ComIgormaznitsaProlTraceTraceListener>)traceListener {
  defaultTraceListener_ = traceListener;
}

- (NSString *)getName {
  return contextName_;
}

- (id<ComIgormaznitsaProlLogicKnowledgeBaseFactory>)getKnowledgeBaseFactory {
  return knowledgeBaseFactory_;
}

- (id)initWithNSString:(NSString *)name {
  return [self initComIgormaznitsaProlLogicProlContextWithNSString:name withComIgormaznitsaProlIoProlStreamManager:[ComIgormaznitsaProlIoDefaultProlStreamManagerImpl getInstance] withComIgormaznitsaProlContainersKnowledgeBase:nil];
}

- (id)initWithNSString:(NSString *)name
withComIgormaznitsaProlIoProlStreamManager:(id<ComIgormaznitsaProlIoProlStreamManager>)streamManager {
  return [self initComIgormaznitsaProlLogicProlContextWithNSString:name withComIgormaznitsaProlIoProlStreamManager:streamManager withComIgormaznitsaProlContainersKnowledgeBase:nil];
}

- (id)initComIgormaznitsaProlLogicProlContextWithNSString:(NSString *)name
               withComIgormaznitsaProlIoProlStreamManager:(id<ComIgormaznitsaProlIoProlStreamManager>)streamManager
           withComIgormaznitsaProlContainersKnowledgeBase:(id<ComIgormaznitsaProlContainersKnowledgeBase>)knowledgebase {
  if (self = [self initComIgormaznitsaProlLogicProlContextWithComIgormaznitsaProlIoProlStreamManager:streamManager withNSString:name withComIgormaznitsaProlLogicKnowledgeBaseFactory:[ComIgormaznitsaProlLogicDefaultKnowledgeBaseFactory getInstance]]) {
    [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(knowledgeBaseLocker_)) lock];
    @try {
      if (knowledgebase == nil) {
        self->knowledgeBase_ = [((id<ComIgormaznitsaProlLogicKnowledgeBaseFactory>) nil_chk(knowledgeBaseFactory_)) makeDefaultKnowledgeBaseWithComIgormaznitsaProlLogicProlContext:self withNSString:[NSString stringWithFormat:@"%@_kbase", name]];
      }
      else {
        self->knowledgeBase_ = knowledgebase;
      }
    }
    @finally {
      [knowledgeBaseLocker_ unlock];
    }
    [self addLibraryWithComIgormaznitsaProlLibrariesProlAbstractLibrary:ComIgormaznitsaProlLogicProlContext_PROL_CORE_LIBRARY_];
  }
  return self;
}

- (id)initWithNSString:(NSString *)name
withComIgormaznitsaProlIoProlStreamManager:(id<ComIgormaznitsaProlIoProlStreamManager>)streamManager
withComIgormaznitsaProlContainersKnowledgeBase:(id<ComIgormaznitsaProlContainersKnowledgeBase>)knowledgebase {
  return [self initComIgormaznitsaProlLogicProlContextWithNSString:name withComIgormaznitsaProlIoProlStreamManager:streamManager withComIgormaznitsaProlContainersKnowledgeBase:knowledgebase];
}

- (id)initComIgormaznitsaProlLogicProlContextWithComIgormaznitsaProlIoProlStreamManager:(id<ComIgormaznitsaProlIoProlStreamManager>)streamManager
                                                                           withNSString:(NSString *)name
                                       withComIgormaznitsaProlLogicKnowledgeBaseFactory:(id<ComIgormaznitsaProlLogicKnowledgeBaseFactory>)kbfactory {
  if (self = [super init]) {
    knowledgeBaseLocker_ = [[JavaUtilConcurrentLocksReentrantLock alloc] init];
    executorAndlockTableLocker_ = [[JavaUtilConcurrentLocksReentrantLock alloc] init];
    mappedObjectSearchers_ = [[JavaUtilArrayList alloc] init];
    mappedObjectLocker_ = [[JavaUtilConcurrentLocksReentrantLock alloc] init];
    ioLocker_ = [[JavaUtilConcurrentLocksReentrantLock alloc] init];
    libLocker_ = [[JavaUtilConcurrentLocksReentrantLock alloc] init];
    triggerLocker_ = [[JavaUtilConcurrentLocksReentrantLock alloc] init];
    if (name == nil) {
      @throw [[JavaLangNullPointerException alloc] initWithNSString:@"The context name must not be null"];
    }
    self->contextName_ = name;
    if (streamManager == nil) {
      @throw [[JavaLangNullPointerException alloc] initWithNSString:@"The stream manager for a context must be defined"];
    }
    if (kbfactory == nil) {
      @throw [[JavaLangNullPointerException alloc] initWithNSString:@"The knowledge base factory is null"];
    }
    self->knowledgeBaseFactory_ = kbfactory;
    self->libraries_ = [[JavaUtilArrayList alloc] initWithInt:16];
    self->streamManager_ = streamManager;
    self->inputStreams_ = [[JavaUtilHashMap alloc] init];
    self->outputStreams_ = [[JavaUtilHashMap alloc] init];
    self->pipes_ = [[JavaUtilHashMap alloc] init];
    self->triggersOnAssert_ = [[JavaUtilHashMap alloc] init];
    self->triggersOnRetract_ = [[JavaUtilHashMap alloc] init];
    [self seeWithNSString:ComIgormaznitsaProlLogicProlContext_USER_STREAM_];
    [self tellWithNSString:ComIgormaznitsaProlLogicProlContext_USER_STREAM_ withBoolean:YES];
  }
  return self;
}

- (id)initWithComIgormaznitsaProlIoProlStreamManager:(id<ComIgormaznitsaProlIoProlStreamManager>)streamManager
                                        withNSString:(NSString *)name
    withComIgormaznitsaProlLogicKnowledgeBaseFactory:(id<ComIgormaznitsaProlLogicKnowledgeBaseFactory>)kbfactory {
  return [self initComIgormaznitsaProlLogicProlContextWithComIgormaznitsaProlIoProlStreamManager:streamManager withNSString:name withComIgormaznitsaProlLogicKnowledgeBaseFactory:kbfactory];
}

- (void)changeKnowledgeBaseWithNSString:(NSString *)knowledge_base_id
                           withNSString:(NSString *)knowledge_base_type {
  if (knowledge_base_id == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"Knowledge base Id is null"];
  }
  if (knowledge_base_type == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"Knowledge base type is null"];
  }
  id<ComIgormaznitsaProlContainersKnowledgeBase> kb = [((id<ComIgormaznitsaProlLogicKnowledgeBaseFactory>) nil_chk(knowledgeBaseFactory_)) makeKnowledgeBaseWithComIgormaznitsaProlLogicProlContext:self withNSString:knowledge_base_id withNSString:knowledge_base_type];
  if (kb == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Can't make knowledge base [%@,%@]", knowledge_base_id, knowledge_base_type]];
  }
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(knowledgeBaseLocker_)) lock];
  @try {
    knowledgeBase_ = kb;
  }
  @finally {
    [knowledgeBaseLocker_ unlock];
  }
}

- (void)addMappedObjectSearcherWithComIgormaznitsaProlLogicProlMappedObjectSearcher:(id<ComIgormaznitsaProlLogicProlMappedObjectSearcher>)searcher {
  if (halted_) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:ComIgormaznitsaProlLogicProlContext_CONTEXT_HALTED_MSG_];
  }
  if (searcher != nil) {
    [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(mappedObjectLocker_)) lock];
    @try {
      [((id<JavaUtilList>) nil_chk(mappedObjectSearchers_)) addWithId:searcher];
    }
    @finally {
      [mappedObjectLocker_ unlock];
    }
  }
}

- (void)removeMappedObjectFinderWithComIgormaznitsaProlLogicProlMappedObjectSearcher:(id<ComIgormaznitsaProlLogicProlMappedObjectSearcher>)searcher {
  if (searcher != nil) {
    [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(mappedObjectLocker_)) lock];
    @try {
      [((id<JavaUtilList>) nil_chk(mappedObjectSearchers_)) removeWithId:searcher];
    }
    @finally {
      [mappedObjectLocker_ unlock];
    }
  }
}

- (id)findMappedObjectForNameWithNSString:(NSString *)name {
  id result = nil;
  JavaUtilConcurrentLocksReentrantLock *locker = mappedObjectLocker_;
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(locker)) lock];
  @try {
    id<JavaUtilIterator> getters = [((id<JavaUtilList>) nil_chk(mappedObjectSearchers_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(getters)) hasNext]) {
      id<ComIgormaznitsaProlLogicProlMappedObjectSearcher> current = [getters next];
      result = [((id<ComIgormaznitsaProlLogicProlMappedObjectSearcher>) nil_chk(current)) findProlMappedObjectWithNSString:name];
      if (result != nil) {
        break;
      }
    }
  }
  @finally {
    [locker unlock];
  }
  return result;
}

- (NSString *)findNameForMappedObjectWithId:(id)mappedObject {
  NSString *result = nil;
  JavaUtilConcurrentLocksReentrantLock *locker = mappedObjectLocker_;
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(locker)) lock];
  @try {
    id<JavaUtilIterator> getters = [((id<JavaUtilList>) nil_chk(mappedObjectSearchers_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(getters)) hasNext]) {
      id<ComIgormaznitsaProlLogicProlMappedObjectSearcher> current = [getters next];
      result = [((id<ComIgormaznitsaProlLogicProlMappedObjectSearcher>) nil_chk(current)) findProlMappedTermWithId:mappedObject];
      if (result != nil) {
        break;
      }
    }
  }
  @finally {
    [locker unlock];
  }
  return result;
}

- (id)findMappedObjectForTermWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)term {
  id result = nil;
  if (term != nil && [term getClass] == [IOSClass classWithClass:[ComIgormaznitsaProlDataTerm class]]) {
    NSString *termAsText = [term getText];
    result = [self findMappedObjectForNameWithNSString:termAsText];
  }
  return result;
}

- (id<JavaUtilConcurrentFuture>)solveAsynchronouslyWithNSString:(NSString *)goal
                      withComIgormaznitsaProlTraceTraceListener:(id<ComIgormaznitsaProlTraceTraceListener>)traceListener {
  if (goal == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"The goal is null"];
  }
  ComIgormaznitsaProlDataTerm *term = [((ComIgormaznitsaProlParserProlTreeBuilder *) [[ComIgormaznitsaProlParserProlTreeBuilder alloc] initWithComIgormaznitsaProlLogicProlContext:self]) readPhraseAndMakeTreeWithNSString:goal];
  return [self solveAsynchronouslyWithComIgormaznitsaProlDataTerm:term withComIgormaznitsaProlTraceTraceListener:traceListener];
}

- (id<JavaUtilConcurrentFuture>)solveAsynchronouslyWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)goal
                                         withComIgormaznitsaProlTraceTraceListener:(id<ComIgormaznitsaProlTraceTraceListener>)traceListener {
  if ([self isHalted]) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:@"The context is halted"];
  }
  if (goal == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"The term to prove is null"];
  }
  ComIgormaznitsaProlLogicProlContext *thisContext = self;
  return [((JavaUtilConcurrentThreadPoolExecutor *) nil_chk([self getContextExecutorService])) submitWithJavaLangRunnable:[[ComIgormaznitsaProlLogicProlContext_$1 alloc] initWithComIgormaznitsaProlDataTerm:goal withComIgormaznitsaProlLogicProlContext:thisContext withComIgormaznitsaProlTraceTraceListener:traceListener]];
}

- (JavaUtilConcurrentThreadPoolExecutor *)getContextExecutorService {
  if (executorService_ == nil) {
    [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(executorAndlockTableLocker_)) lock];
    @try {
      if (executorService_ == nil) {
        ComIgormaznitsaProlLogicProlContext_ProlContextInsideThreadFactory *threadFactory = [[ComIgormaznitsaProlLogicProlContext_ProlContextInsideThreadFactory alloc] initWithComIgormaznitsaProlLogicProlContext:self];
        executorService_ = (JavaUtilConcurrentThreadPoolExecutor *) check_class_cast([JavaUtilConcurrentExecutors newCachedThreadPoolWithJavaUtilConcurrentThreadFactory:threadFactory], [JavaUtilConcurrentThreadPoolExecutor class]);
        [((JavaUtilConcurrentThreadPoolExecutor *) nil_chk(executorService_)) setRejectedExecutionHandlerWithJavaUtilConcurrentRejectedExecutionHandler:threadFactory];
      }
    }
    @finally {
      [executorAndlockTableLocker_ unlock];
    }
  }
  return executorService_;
}

- (id<JavaUtilMap>)getLockerMap {
  if (lockerTable_ == nil) {
    [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(executorAndlockTableLocker_)) lock];
    @try {
      if (lockerTable_ == nil) {
        lockerTable_ = [[JavaUtilHashMap alloc] init];
      }
    }
    @finally {
      [executorAndlockTableLocker_ unlock];
    }
  }
  return lockerTable_;
}

- (JavaUtilConcurrentLocksReentrantLock *)getLockerForNameWithNSString:(NSString *)name {
  id<JavaUtilMap> lockMap = [self getLockerMap];
  JavaUtilConcurrentLocksReentrantLock *locker = nil;
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(executorAndlockTableLocker_)) lock];
  @try {
    locker = [((id<JavaUtilMap>) nil_chk(lockMap)) getWithId:name];
    if (locker == nil) {
      locker = [[JavaUtilConcurrentLocksReentrantLock alloc] init];
      (void) [lockMap putWithId:name withId:locker];
    }
  }
  @finally {
    [executorAndlockTableLocker_ unlock];
  }
  return locker;
}

- (void)lockLockerForNameWithNSString:(NSString *)name {
  id<JavaUtilMap> lockMap = [self getLockerMap];
  JavaUtilConcurrentLocksReentrantLock *locker = nil;
  JavaUtilConcurrentLocksReentrantLock *exeLocker = executorAndlockTableLocker_;
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(exeLocker)) lock];
  @try {
    locker = [((id<JavaUtilMap>) nil_chk(lockMap)) getWithId:name];
    if (locker == nil) {
      locker = [[JavaUtilConcurrentLocksReentrantLock alloc] init];
      (void) [lockMap putWithId:name withId:locker];
    }
  }
  @finally {
    [exeLocker unlock];
  }
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(locker)) lock];
}

- (BOOL)trylockLockerForNameWithNSString:(NSString *)name {
  id<JavaUtilMap> lockMap = [self getLockerMap];
  JavaUtilConcurrentLocksReentrantLock *locker = nil;
  JavaUtilConcurrentLocksReentrantLock *exeLocker = executorAndlockTableLocker_;
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(exeLocker)) lock];
  @try {
    locker = [((id<JavaUtilMap>) nil_chk(lockMap)) getWithId:name];
    if (locker == nil) {
      locker = [[JavaUtilConcurrentLocksReentrantLock alloc] init];
      (void) [lockMap putWithId:name withId:locker];
    }
  }
  @finally {
    [exeLocker unlock];
  }
  return [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(locker)) tryLock];
}

- (void)unlockLockerForNameWithNSString:(NSString *)name {
  id<JavaUtilMap> lockMap = [self getLockerMap];
  JavaUtilConcurrentLocksReentrantLock *locker = nil;
  JavaUtilConcurrentLocksReentrantLock *exeLocker = executorAndlockTableLocker_;
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(exeLocker)) lock];
  @try {
    locker = [((id<JavaUtilMap>) nil_chk(lockMap)) getWithId:name];
    if (locker == nil) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"There is not any registered locker for name '%@'", name]];
    }
  }
  @finally {
    [exeLocker unlock];
  }
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(locker)) unlock];
}

- (ComIgormaznitsaProlIoProlMemoryPipe *)getMemoryPipeForNameWithNSString:(NSString *)identifier {
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(ioLocker_)) lock];
  @try {
    return [((id<JavaUtilMap>) nil_chk(pipes_)) getWithId:identifier];
  }
  @finally {
    [ioLocker_ unlock];
  }
}

- (id<ComIgormaznitsaProlIoProlStreamManager>)getStreamManager {
  if (halted_) {
    @throw [[ComIgormaznitsaProlExceptionsProlException alloc] initWithNSString:ComIgormaznitsaProlLogicProlContext_CONTEXT_HALTED_MSG_];
  }
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(ioLocker_)) lock];
  @try {
    return streamManager_;
  }
  @finally {
    [ioLocker_ unlock];
  }
}

- (id<ComIgormaznitsaProlIoProlTextWriter>)getCurrentOutStream {
  if (halted_) {
    @throw [[ComIgormaznitsaProlExceptionsProlException alloc] initWithNSString:ComIgormaznitsaProlLogicProlContext_CONTEXT_HALTED_MSG_];
  }
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(ioLocker_)) lock];
  @try {
    return currentOutputStream_;
  }
  @finally {
    [ioLocker_ unlock];
  }
}

- (id<ComIgormaznitsaProlIoProlTextReader>)getCurrentInputStream {
  if (halted_) {
    @throw [[ComIgormaznitsaProlExceptionsProlException alloc] initWithNSString:ComIgormaznitsaProlLogicProlContext_CONTEXT_HALTED_MSG_];
  }
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(ioLocker_)) lock];
  @try {
    return currentInputStream_;
  }
  @finally {
    [ioLocker_ unlock];
  }
}

- (void)tellWithNSString:(NSString *)resourceId
             withBoolean:(BOOL)append {
  if (halted_) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:ComIgormaznitsaProlLogicProlContext_CONTEXT_HALTED_MSG_];
  }
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(ioLocker_)) lock];
  @try {
    if ([((NSString *) nil_chk(resourceId)) length] > 0 && [resourceId charAtWithInt:0] == '+') {
      ComIgormaznitsaProlIoProlMemoryPipe *out = [((id<JavaUtilMap>) nil_chk(pipes_)) getWithId:resourceId];
      if (out == nil) {
        out = [[ComIgormaznitsaProlIoProlMemoryPipe alloc] initWithNSString:resourceId withComIgormaznitsaProlLogicProlContext:self];
        (void) [pipes_ putWithId:resourceId withId:out];
      }
      currentOutputStream_ = out;
    }
    else {
      ComIgormaznitsaProlIoProlTextOutputStream *out = [((id<JavaUtilMap>) nil_chk(outputStreams_)) getWithId:resourceId];
      if (out == nil) {
        out = [[ComIgormaznitsaProlIoProlTextOutputStream alloc] initWithNSString:resourceId withComIgormaznitsaProlLogicProlContext:self withBoolean:append];
        (void) [outputStreams_ putWithId:resourceId withId:out];
      }
      currentOutputStream_ = out;
    }
  }
  @finally {
    [ioLocker_ unlock];
  }
}

- (void)seeWithNSString:(NSString *)resourceId {
  if (halted_) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:ComIgormaznitsaProlLogicProlContext_CONTEXT_HALTED_MSG_];
  }
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(ioLocker_)) lock];
  @try {
    if ([((NSString *) nil_chk(resourceId)) length] > 0 && [resourceId charAtWithInt:0] == '+') {
      ComIgormaznitsaProlIoProlMemoryPipe *in = [((id<JavaUtilMap>) nil_chk(pipes_)) getWithId:resourceId];
      if (in == nil) {
        in = [[ComIgormaznitsaProlIoProlMemoryPipe alloc] initWithNSString:resourceId withComIgormaznitsaProlLogicProlContext:self];
        (void) [pipes_ putWithId:resourceId withId:in];
      }
      currentInputStream_ = in;
    }
    else {
      ComIgormaznitsaProlIoProlTextInputStream *in = [((id<JavaUtilMap>) nil_chk(inputStreams_)) getWithId:resourceId];
      if (in == nil) {
        in = [[ComIgormaznitsaProlIoProlTextInputStream alloc] initWithNSString:resourceId withComIgormaznitsaProlLogicProlContext:self];
        (void) [inputStreams_ putWithId:resourceId withId:in];
      }
      currentInputStream_ = in;
    }
  }
  @finally {
    [ioLocker_ unlock];
  }
}

- (void)seen {
  if (halted_) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:ComIgormaznitsaProlLogicProlContext_CONTEXT_HALTED_MSG_];
  }
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(ioLocker_)) lock];
  @try {
    @try {
      if (currentInputStream_ == nil) {
        return;
      }
      if (![((NSString *) nil_chk([((id<ComIgormaznitsaProlIoProlTextReader>) nil_chk(currentInputStream_)) getResourceId])) isEqual:ComIgormaznitsaProlLogicProlContext_USER_STREAM_]) {
        [currentInputStream_ close];
        if ([(id) currentInputStream_ isKindOfClass:[ComIgormaznitsaProlIoProlMemoryPipe class]]) {
          (void) [((id<JavaUtilMap>) nil_chk(pipes_)) removeWithId:[currentInputStream_ getResourceId]];
        }
        else {
          (void) [((id<JavaUtilMap>) nil_chk(inputStreams_)) removeWithId:[currentInputStream_ getResourceId]];
        }
      }
    }
    @finally {
      [self seeWithNSString:ComIgormaznitsaProlLogicProlContext_USER_STREAM_];
    }
  }
  @finally {
    [ioLocker_ unlock];
  }
}

- (void)told {
  if (halted_) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:ComIgormaznitsaProlLogicProlContext_CONTEXT_HALTED_MSG_];
  }
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(ioLocker_)) lock];
  @try {
    @try {
      if (currentOutputStream_ == nil) {
        return;
      }
      if (![((NSString *) nil_chk([((id<ComIgormaznitsaProlIoProlTextWriter>) nil_chk(currentOutputStream_)) getResourceId])) isEqual:ComIgormaznitsaProlLogicProlContext_USER_STREAM_]) {
        if ([(id) currentOutputStream_ isKindOfClass:[ComIgormaznitsaProlIoProlMemoryPipe class]]) {
          [((ComIgormaznitsaProlIoProlMemoryPipe *) check_class_cast(currentOutputStream_, [ComIgormaznitsaProlIoProlMemoryPipe class])) closeForWriteOnly];
        }
        else {
          [currentOutputStream_ close];
          (void) [((id<JavaUtilMap>) nil_chk(outputStreams_)) removeWithId:[currentOutputStream_ getResourceId]];
        }
      }
    }
    @finally {
      [self tellWithNSString:ComIgormaznitsaProlLogicProlContext_USER_STREAM_ withBoolean:YES];
    }
  }
  @finally {
    [ioLocker_ unlock];
  }
}

- (BOOL)addLibraryWithComIgormaznitsaProlLibrariesProlAbstractLibrary:(ComIgormaznitsaProlLibrariesProlAbstractLibrary *)library {
  if (halted_) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:ComIgormaznitsaProlLogicProlContext_CONTEXT_HALTED_MSG_];
  }
  if (library == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Library must not be null"];
  }
  JavaUtilConcurrentLocksReentrantLock *locker = libLocker_;
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(locker)) lock];
  @try {
    if ([((id<JavaUtilList>) nil_chk(libraries_)) containsWithId:library]) {
      return NO;
    }
    [libraries_ addWithId:library];
      
//    id<ComIgormaznitsaProlAnnotationsConsult> consult = [[((ComIgormaznitsaProlLibrariesProlAbstractLibrary *) nil_chk(library)) getClass] getAnnotationWithIOSClass:[IOSClass classWithProtocol:@protocol(ComIgormaznitsaProlAnnotationsConsult)]];
    id<ComIgormaznitsaProlAnnotationsConsult> consult = nil;
    if (consult != nil) {
      NSString *url = [consult URL];
      if (url != nil && [url length] > 0) {
        [ComIgormaznitsaProlUtilsUtils consultFromURLConnectionWithNSString:url withComIgormaznitsaProlLogicProlContext:self];
      }
      IOSObjectArray *urls = [consult URLs];
      if (urls != nil && (int) [urls count] > 0) {
        for (int li = 0; li < (int) [urls count]; li++) {
          NSString *urlToBeProcessed = IOSObjectArray_Get(urls, li);
            NSLog(@"%@",urlToBeProcessed);
          if (urlToBeProcessed != nil && [urlToBeProcessed length] > 0) {
            [ComIgormaznitsaProlUtilsUtils consultFromURLConnectionWithNSString:urlToBeProcessed withComIgormaznitsaProlLogicProlContext:self];
          }
        }
      }
      NSString *text = [consult Text];
      if (text != nil && [text length] > 0) {
        [((ComIgormaznitsaProlParserProlConsult *) [[ComIgormaznitsaProlParserProlConsult alloc] initWithNSString:text withComIgormaznitsaProlLogicProlContext:self]) consult];
      }
      IOSObjectArray *texts = [consult Texts];
      if (texts != nil) {
        for (int li = 0; li < (int) [texts count]; li++) {
          [((ComIgormaznitsaProlParserProlConsult *) [[ComIgormaznitsaProlParserProlConsult alloc] initWithNSString:IOSObjectArray_Get(texts, li) withComIgormaznitsaProlLogicProlContext:self]) consult];
        }
      }
    }
  }
  @finally {
    [locker unlock];
  }
  return YES;
}

- (id<ComIgormaznitsaProlContainersKnowledgeBase>)getKnowledgeBase {
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(knowledgeBaseLocker_)) lock];
  @try {
    return knowledgeBase_;
  }
  @finally {
    [knowledgeBaseLocker_ unlock];
  }
}

- (BOOL)removeLibraryWithComIgormaznitsaProlLibrariesProlAbstractLibrary:(ComIgormaznitsaProlLibrariesProlAbstractLibrary *)library {
  if (library == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Library must not be null"];
  }
  if (halted_) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:ComIgormaznitsaProlLogicProlContext_CONTEXT_HALTED_MSG_];
  }
  JavaUtilConcurrentLocksReentrantLock *locker = libLocker_;
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(locker)) lock];
  @try {
    return [((id<JavaUtilList>) nil_chk(libraries_)) removeWithId:library];
  }
  @finally {
    [locker unlock];
  }
}

- (void)writeKnowledgeBaseWithJavaIoPrintWriter:(JavaIoPrintWriter *)writer {
  if (writer == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Writer must not be null"];
  }
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(knowledgeBaseLocker_)) lock];
  @try {
    [((id<ComIgormaznitsaProlContainersKnowledgeBase>) nil_chk(knowledgeBase_)) writeWithJavaIoPrintWriter:writer];
  }
  @finally {
    [knowledgeBaseLocker_ unlock];
  }
}

- (ComIgormaznitsaProlLibrariesPredicateProcessor *)findProcessorWithComIgormaznitsaProlDataTermStruct:(ComIgormaznitsaProlDataTermStruct *)predicate {
  JavaUtilConcurrentLocksReentrantLock *locker = libLocker_;
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(locker)) lock];
  @try {
    int li = [((id<JavaUtilList>) nil_chk(libraries_)) size] - 1;
    while (li >= 0) {
      ComIgormaznitsaProlLibrariesProlAbstractLibrary *lib = [libraries_ getWithInt:li];
      ComIgormaznitsaProlLibrariesPredicateProcessor *processor = [((ComIgormaznitsaProlLibrariesProlAbstractLibrary *) nil_chk(lib)) findProcessorForPredicateWithComIgormaznitsaProlDataTermStruct:predicate];
      if (processor != nil) {
        return processor;
      }
      li--;
    }
    return [ComIgormaznitsaProlLibrariesPredicateProcessor NULL_PROCESSOR];
  }
  @finally {
    [locker unlock];
  }
}

- (BOOL)hasPredicateAtLibraryForSignatureWithNSString:(NSString *)signature {
  JavaUtilConcurrentLocksReentrantLock *locker = libLocker_;
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(locker)) lock];
  @try {
    int li = [((id<JavaUtilList>) nil_chk(libraries_)) size] - 1;
    while (li >= 0) {
      ComIgormaznitsaProlLibrariesProlAbstractLibrary *lib = [libraries_ getWithInt:li];
      if ([((ComIgormaznitsaProlLibrariesProlAbstractLibrary *) nil_chk(lib)) hasPredicateForSignatureWithNSString:signature]) {
        return YES;
      }
      li--;
    }
    return NO;
  }
  @finally {
    [locker unlock];
  }
}

- (BOOL)isSystemOperatorWithNSString:(NSString *)name {
  JavaUtilConcurrentLocksReentrantLock *locker = libLocker_;
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(locker)) lock];
  @try {
    int li = [((id<JavaUtilList>) nil_chk(libraries_)) size] - 1;
    while (li >= 0) {
      ComIgormaznitsaProlLibrariesProlAbstractLibrary *lib = [libraries_ getWithInt:li];
      if ([((ComIgormaznitsaProlLibrariesProlAbstractLibrary *) nil_chk(lib)) isSystemOperatorWithNSString:name]) {
        return YES;
      }
      li--;
    }
    return NO;
  }
  @finally {
    [locker unlock];
  }
}

- (ComIgormaznitsaProlContainersOperatorContainer *)getSystemOperatorForNameWithNSString:(NSString *)name {
  JavaUtilConcurrentLocksReentrantLock *locker = libLocker_;
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(locker)) lock];
  @try {
    int li = [((id<JavaUtilList>) nil_chk(libraries_)) size] - 1;
    while (li >= 0) {
      ComIgormaznitsaProlLibrariesProlAbstractLibrary *lib = [libraries_ getWithInt:li];
      ComIgormaznitsaProlContainersOperatorContainer *result = [((ComIgormaznitsaProlLibrariesProlAbstractLibrary *) nil_chk(lib)) findSystemOperatorForNameWithNSString:name];
      if (result != nil) {
        return result;
      }
      li--;
    }
    return nil;
  }
  @finally {
    [locker unlock];
  }
}

- (BOOL)hasSystemOperatorStartsWithWithNSString:(NSString *)str {
  JavaUtilConcurrentLocksReentrantLock *locker = libLocker_;
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(locker)) lock];
  @try {
    int li = [((id<JavaUtilList>) nil_chk(libraries_)) size] - 1;
    while (li >= 0) {
      ComIgormaznitsaProlLibrariesProlAbstractLibrary *lib = [libraries_ getWithInt:li];
      if ([((ComIgormaznitsaProlLibrariesProlAbstractLibrary *) nil_chk(lib)) hasSyatemOperatorStartsWithWithNSString:str]) {
        return YES;
      }
      li--;
    }
    return NO;
  }
  @finally {
    [locker unlock];
  }
}

- (void)halt {
  if (halted_) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:@"Context already halted"];
  }
  else {
    halted_ = YES;
  }
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(executorAndlockTableLocker_)) lock];
  @try {
    if (executorService_ != nil) {
      (void) [executorService_ shutdownNow];
    }
  }
  @finally {
    [executorAndlockTableLocker_ unlock];
  }
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(triggerLocker_)) lock];
  @try {
    JavaUtilIdentityHashMap *notifiedTriggers = [[JavaUtilIdentityHashMap alloc] init];
    for (id<JavaUtilMap_Entry> __strong mapentry in nil_chk([((id<JavaUtilMap>) nil_chk(triggersOnAssert_)) entrySet])) {
      for (id<ComIgormaznitsaProlLogicTriggersProlTrigger> __strong trigger in nil_chk([((id<JavaUtilMap_Entry>) nil_chk(mapentry)) getValue])) {
        @try {
          if (![notifiedTriggers containsKeyWithId:trigger]) {
            [((id<ComIgormaznitsaProlLogicTriggersProlTrigger>) nil_chk(trigger)) onContextHaltingWithComIgormaznitsaProlLogicProlContext:self];
          }
        }
        @catch (JavaLangThrowable *ex) {
          [((JavaUtilLoggingLogger *) nil_chk(ComIgormaznitsaProlLogicProlContext_LOG_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel SEVERE] withNSString:@"Exception during a context halting notification" withJavaLangThrowable:ex];
        }
        @finally {
          (void) [notifiedTriggers putWithId:trigger withId:[JavaUtilCollections emptySet]];
        }
      }
    }
    for (id<JavaUtilMap_Entry> __strong mapentry in nil_chk([((id<JavaUtilMap>) nil_chk(triggersOnRetract_)) entrySet])) {
      for (id<ComIgormaznitsaProlLogicTriggersProlTrigger> __strong trigger in nil_chk([((id<JavaUtilMap_Entry>) nil_chk(mapentry)) getValue])) {
        @try {
          if (![notifiedTriggers containsKeyWithId:trigger]) {
            [((id<ComIgormaznitsaProlLogicTriggersProlTrigger>) nil_chk(trigger)) onContextHaltingWithComIgormaznitsaProlLogicProlContext:self];
          }
        }
        @catch (JavaLangThrowable *ex) {
          [((JavaUtilLoggingLogger *) nil_chk(ComIgormaznitsaProlLogicProlContext_LOG_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel SEVERE] withNSString:@"Exception during a context halting notification" withJavaLangThrowable:ex];
        }
        @finally {
          (void) [notifiedTriggers putWithId:trigger withId:[JavaUtilCollections emptySet]];
        }
      }
    }
    [notifiedTriggers clear];
    [triggersOnAssert_ clear];
    [triggersOnRetract_ clear];
  }
  @finally {
    [triggerLocker_ unlock];
  }
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(ioLocker_)) lock];
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(libLocker_)) lock];
  @try {
    @try {
      id<JavaUtilIterator> memPipes = [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk(pipes_)) values])) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(memPipes)) hasNext]) {
        @try {
          [((ComIgormaznitsaProlIoProlMemoryPipe *) nil_chk([memPipes next])) close];
        }
        @catch (JavaLangThrowable *thr) {
        }
      }
      id<JavaUtilIterator> inStreams = [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk(inputStreams_)) values])) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(inStreams)) hasNext]) {
        @try {
          [((ComIgormaznitsaProlIoProlTextInputStream *) nil_chk([inStreams next])) close];
        }
        @catch (JavaLangThrowable *thr) {
        }
      }
      [inputStreams_ clear];
      id<JavaUtilIterator> outStreams = [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk(outputStreams_)) values])) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(outStreams)) hasNext]) {
        @try {
          [((ComIgormaznitsaProlIoProlTextOutputStream *) nil_chk([outStreams next])) close];
        }
        @catch (JavaLangThrowable *thr) {
        }
      }
      [outputStreams_ clear];
      (void) [((JavaUtilConcurrentThreadPoolExecutor *) nil_chk([self getContextExecutorService])) shutdownNow];
      currentInputStream_ = nil;
      currentOutputStream_ = nil;
    }
    @finally {
      for (ComIgormaznitsaProlLibrariesProlAbstractLibrary * __strong library in nil_chk(libraries_)) {
        @try {
          [((ComIgormaznitsaProlLibrariesProlAbstractLibrary *) nil_chk(library)) contextHasBeenHaltedWithComIgormaznitsaProlLogicProlContext:self];
        }
        @catch (JavaLangException *ex) {
          [((JavaUtilLoggingLogger *) nil_chk(ComIgormaznitsaProlLogicProlContext_LOG_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel SEVERE] withNSString:@"library.contextHasBeenHalted();" withJavaLangThrowable:ex];
        }
      }
    }
  }
  @finally {
    [libLocker_ unlock];
    [ioLocker_ unlock];
  }
}

- (BOOL)isHalted {
  return halted_;
}

- (ComIgormaznitsaProlDataTerm *)objectAsTermWithId:(id)object {
  ComIgormaznitsaProlDataTerm *result = nil;
  if (object == nil) {
    result = [ComIgormaznitsaProlDataTermList NULLLIST];
  }
  else if ([object isKindOfClass:[ComIgormaznitsaProlDataTerm class]]) {
    result = (ComIgormaznitsaProlDataTerm *) check_class_cast(object, [ComIgormaznitsaProlDataTerm class]);
  }
  else if ([object conformsToProtocol: @protocol(ComIgormaznitsaProlDataConvertableToTerm)]) {
    id<ComIgormaznitsaProlDataConvertableToTerm> cterm = (id<ComIgormaznitsaProlDataConvertableToTerm>) check_protocol_cast(object, @protocol(ComIgormaznitsaProlDataConvertableToTerm));
    result = [cterm asProlTerm];
    if (result == nil) {
      @throw [[JavaLangNullPointerException alloc] initWithNSString:[NSString stringWithFormat:@"asProlTerm() returned null [%@]", [object description]]];
    }
  }
  else if ([object isKindOfClass:[NSString class]]) {
    result = [[ComIgormaznitsaProlDataTerm alloc] initWithNSString:(NSString *) check_class_cast(object, [NSString class])];
  }
  else if ([object isKindOfClass:[NSNumber class]]) {
    if ([object isKindOfClass:[JavaLangInteger class]]) {
      result = [[ComIgormaznitsaProlDataTermInteger alloc] initWithInt:[((JavaLangInteger *) check_class_cast(object, [JavaLangInteger class])) intValue]];
    }
    else if ([object isKindOfClass:[JavaLangFloat class]]) {
      result = [[ComIgormaznitsaProlDataTermFloat alloc] initWithFloat:[((JavaLangFloat *) check_class_cast(object, [JavaLangFloat class])) floatValue]];
    }
    else {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Unsupported number format."];
    }
  }
  else if ([object conformsToProtocol: @protocol(JavaUtilCollection)]) {
    id<JavaUtilCollection> lst = (id<JavaUtilCollection>) check_protocol_cast(object, @protocol(JavaUtilCollection));
    if ([lst isEmpty]) {
      result = [ComIgormaznitsaProlDataTermList NULLLIST];
    }
    else {
      ComIgormaznitsaProlDataTermList *accumulator = nil;
      for (id __strong item in lst) {
        if (accumulator == nil) {
          accumulator = [[ComIgormaznitsaProlDataTermList alloc] initWithComIgormaznitsaProlDataTerm:[self objectAsTermWithId:item]];
          result = accumulator;
        }
        else {
          accumulator = [ComIgormaznitsaProlDataTermList appendItemWithComIgormaznitsaProlDataTermList:accumulator withComIgormaznitsaProlDataTerm:[self objectAsTermWithId:item]];
        }
      }
    }
  }
  else if ([[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[NSObject class]]] isInstance:object]) {
    IOSObjectArray *array = (IOSObjectArray *) check_class_cast(object, [IOSObjectArray class]);
    int arrlen = (int) [array count];
    if (arrlen == 0) {
      result = [ComIgormaznitsaProlDataTermList NULLLIST];
    }
    else {
      ComIgormaznitsaProlDataTerm *functor = [[ComIgormaznitsaProlDataTerm alloc] initWithNSString:[IOSObjectArray_Get(array, 0) description]];
      if (arrlen == 1) {
        result = [[ComIgormaznitsaProlDataTermStruct alloc] initWithComIgormaznitsaProlDataTerm:functor];
      }
      else {
        IOSObjectArray *terms = [IOSObjectArray arrayWithLength:arrlen - 1 type:[IOSClass classWithClass:[ComIgormaznitsaProlDataTerm class]]];
        for (int li = 1; li < arrlen; li++) {
          (void) IOSObjectArray_Set(terms, li - 1, [self objectAsTermWithId:IOSObjectArray_Get(array, li)]);
        }
        result = [[ComIgormaznitsaProlDataTermStruct alloc] initWithComIgormaznitsaProlDataTerm:functor withComIgormaznitsaProlDataTermArray:terms];
      }
    }
  }
  else {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Unsupported object to be represented as a Term"];
  }
  return result;
}

- (id)termAsObjectWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)term {
  ComIgormaznitsaProlDataTerm *cterm = [ComIgormaznitsaProlUtilsUtils getTermFromElementWithComIgormaznitsaProlDataTerm:term];
  id result = nil;
  switch ([((ComIgormaznitsaProlDataTerm *) nil_chk(cterm)) getTermType]) {
    case ComIgormaznitsaProlDataTerm_TYPE_ATOM:
    {
      if ([cterm conformsToProtocol: @protocol(ComIgormaznitsaProlDataNumericTerm)]) {
        result = [((ComIgormaznitsaProlDataTermInteger *) check_class_cast(cterm, [ComIgormaznitsaProlDataTermInteger class])) getNumericValue];
      }
      else {
        NSString *termtext = [cterm getText];
        result = [self findMappedObjectForNameWithNSString:termtext];
        if (result == nil) {
          result = termtext;
        }
      }
    }
    break;
    case ComIgormaznitsaProlDataTerm_TYPE_LIST:
    {
      id<JavaUtilList> list = [[JavaUtilArrayList alloc] init];
      ComIgormaznitsaProlDataTermList *tlist = (ComIgormaznitsaProlDataTermList *) check_class_cast(cterm, [ComIgormaznitsaProlDataTermList class]);
      while ([tlist isNullList]) {
        [list addWithId:[self termAsObjectWithComIgormaznitsaProlDataTerm:[tlist getHead]]];
        ComIgormaznitsaProlDataTerm *tail = [tlist getTail];
        if ([((ComIgormaznitsaProlDataTerm *) nil_chk(tail)) getTermType] == ComIgormaznitsaProlDataTerm_TYPE_LIST) {
          tlist = (ComIgormaznitsaProlDataTermList *) check_class_cast(tail, [ComIgormaznitsaProlDataTermList class]);
        }
        else {
          [list addWithId:[self termAsObjectWithComIgormaznitsaProlDataTerm:tail]];
          break;
        }
      }
      result = list;
    }
    break;
    case ComIgormaznitsaProlDataTerm_TYPE_OPERATORS:
    case ComIgormaznitsaProlDataTerm_TYPE_OPERATOR:
    {
      result = [cterm getText];
    }
    break;
    case ComIgormaznitsaProlDataTerm_TYPE_STRUCT:
    {
      ComIgormaznitsaProlDataTermStruct *sterm = (ComIgormaznitsaProlDataTermStruct *) check_class_cast(cterm, [ComIgormaznitsaProlDataTermStruct class]);
      int size = [sterm getArity] + 1;
      IOSObjectArray *array = [IOSObjectArray arrayWithLength:size type:[IOSClass classWithClass:[NSObject class]]];
      (void) IOSObjectArray_Set(array, 0, [self termAsObjectWithComIgormaznitsaProlDataTerm:[sterm getFunctor]]);
      for (int li = 1; li < size; li++) {
        (void) IOSObjectArray_Set(array, li, [self termAsObjectWithComIgormaznitsaProlDataTerm:[sterm getElementWithInt:li - 1]]);
      }
      result = array;
    }
    break;
    case ComIgormaznitsaProlDataTerm_TYPE_VAR:
    {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"It is non instantiate variable '%@'", [cterm getText]]];
    }
    default:
    {
      @throw [[ComIgormaznitsaProlExceptionsProlCriticalError alloc] initWithNSString:@"Unsupported term type"];
    }
  }
  return result;
}

- (void)registerTriggerWithComIgormaznitsaProlLogicTriggersProlTrigger:(id<ComIgormaznitsaProlLogicTriggersProlTrigger>)trigger {
  if (halted_) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:ComIgormaznitsaProlLogicProlContext_CONTEXT_HALTED_MSG_];
  }
  id<JavaUtilMap> signatures = [((id<ComIgormaznitsaProlLogicTriggersProlTrigger>) nil_chk(trigger)) getSignatures];
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(triggerLocker_)) lock];
  @try {
    for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(signatures)) entrySet])) {
      NSString *signature = [ComIgormaznitsaProlUtilsUtils validateSignatureWithNSString:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey]];
      if (signature == nil) {
        @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"unsupported signature format [%@]", [entry_ getKey]]];
      }
      signature = [ComIgormaznitsaProlUtilsUtils normalizeSignatureWithNSString:signature];
      ComIgormaznitsaProlLogicTriggersProlTriggerTypeEnum *triggerType = [entry_ getValue];
      id<JavaUtilList> triggerListAssert = nil;
      id<JavaUtilList> triggerListRetract = nil;
      if (triggerType == [ComIgormaznitsaProlLogicTriggersProlTriggerTypeEnum TRIGGER_ASSERT] || triggerType == [ComIgormaznitsaProlLogicTriggersProlTriggerTypeEnum TRIGGER_ASSERT_RETRACT]) {
        triggerListAssert = [((id<JavaUtilMap>) nil_chk(triggersOnAssert_)) getWithId:signature];
        if (triggerListAssert == nil) {
          triggerListAssert = [[JavaUtilArrayList alloc] init];
          (void) [triggersOnAssert_ putWithId:signature withId:triggerListAssert];
        }
      }
      if (triggerType == [ComIgormaznitsaProlLogicTriggersProlTriggerTypeEnum TRIGGER_RETRACT] || triggerType == [ComIgormaznitsaProlLogicTriggersProlTriggerTypeEnum TRIGGER_ASSERT_RETRACT]) {
        triggerListRetract = [((id<JavaUtilMap>) nil_chk(triggersOnRetract_)) getWithId:signature];
        if (triggerListRetract == nil) {
          triggerListRetract = [[JavaUtilArrayList alloc] init];
          (void) [triggersOnRetract_ putWithId:signature withId:triggerListRetract];
        }
      }
      if (triggerListAssert != nil) {
        [triggerListAssert addWithId:trigger];
        [((JavaUtilLoggingLogger *) nil_chk(ComIgormaznitsaProlLogicProlContext_LOG_)) infoWithNSString:[NSString stringWithFormat:@"%@%@', the handler is %@", @"Registered handler as TRIGGER_ASSERT  for '", signature, [trigger description]]];
      }
      if (triggerListRetract != nil) {
        [triggerListRetract addWithId:trigger];
        [((JavaUtilLoggingLogger *) nil_chk(ComIgormaznitsaProlLogicProlContext_LOG_)) infoWithNSString:[NSString stringWithFormat:@"%@%@', the handler is %@", @"Registered handler as TRIGGER_RETRACT  for '", signature, [trigger description]]];
      }
    }
  }
  @finally {
    [triggerLocker_ unlock];
  }
}

- (void)unregisterTriggerWithComIgormaznitsaProlLogicTriggersProlTrigger:(id<ComIgormaznitsaProlLogicTriggersProlTrigger>)trigger {
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(triggerLocker_)) lock];
  @try {
    id<JavaUtilIterator> iterator = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(triggersOnAssert_)) entrySet])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
      id<JavaUtilMap_Entry> entry_ = [iterator next];
      id<JavaUtilList> lst = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue];
      if ([((id<JavaUtilList>) nil_chk(lst)) removeWithId:trigger]) {
        if ([lst isEmpty]) {
          [iterator remove];
        }
      }
    }
    iterator = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(triggersOnRetract_)) entrySet])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
      id<JavaUtilMap_Entry> entry_ = [iterator next];
      id<JavaUtilList> lst = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue];
      if ([((id<JavaUtilList>) nil_chk(lst)) removeWithId:trigger]) {
        if ([lst isEmpty]) {
          [iterator remove];
        }
      }
    }
  }
  @finally {
    [triggerLocker_ unlock];
  }
}

- (BOOL)hasRegisteredTriggersForSignatureWithNSString:(NSString *)normalizedSignature
withComIgormaznitsaProlLogicTriggersProlTriggerTypeEnum:(ComIgormaznitsaProlLogicTriggersProlTriggerTypeEnum *)observedEvent {
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(triggerLocker_)) lock];
  @try {
    BOOL result = NO;
    switch ([observedEvent ordinal]) {
      case ComIgormaznitsaProlLogicTriggersProlTriggerType_TRIGGER_ASSERT:
      {
        result = [((id<JavaUtilMap>) nil_chk(triggersOnAssert_)) containsKeyWithId:normalizedSignature];
      }
      break;
      case ComIgormaznitsaProlLogicTriggersProlTriggerType_TRIGGER_RETRACT:
      {
        result = [((id<JavaUtilMap>) nil_chk(triggersOnRetract_)) containsKeyWithId:normalizedSignature];
      }
      break;
      case ComIgormaznitsaProlLogicTriggersProlTriggerType_TRIGGER_ASSERT_RETRACT:
      {
        result = [((id<JavaUtilMap>) nil_chk(triggersOnAssert_)) containsKeyWithId:normalizedSignature];
        if (!result) {
          result = [((id<JavaUtilMap>) nil_chk(triggersOnRetract_)) containsKeyWithId:normalizedSignature];
        }
      }
      break;
      default:
      {
        @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Unsupported observed event [%@]", [((ComIgormaznitsaProlLogicTriggersProlTriggerTypeEnum *) nil_chk(observedEvent)) name]]];
      }
    }
    return result;
  }
  @finally {
    [triggerLocker_ unlock];
  }
}

- (void)notifyTriggersForSignatureWithNSString:(NSString *)normalizedSignature
withComIgormaznitsaProlLogicTriggersProlTriggerTypeEnum:(ComIgormaznitsaProlLogicTriggersProlTriggerTypeEnum *)observedEvent {
  IOSObjectArray *triggersToProcess = nil;
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(triggerLocker_)) lock];
  @try {
    id<JavaUtilList> listOfTriggers = nil;
    switch ([observedEvent ordinal]) {
      case ComIgormaznitsaProlLogicTriggersProlTriggerType_TRIGGER_ASSERT:
      {
        listOfTriggers = [((id<JavaUtilMap>) nil_chk(triggersOnAssert_)) getWithId:normalizedSignature];
      }
      break;
      case ComIgormaznitsaProlLogicTriggersProlTriggerType_TRIGGER_RETRACT:
      {
        listOfTriggers = [((id<JavaUtilMap>) nil_chk(triggersOnRetract_)) getWithId:normalizedSignature];
      }
      break;
      case ComIgormaznitsaProlLogicTriggersProlTriggerType_TRIGGER_ASSERT_RETRACT:
      {
        id<JavaUtilList> trigAssert = [((id<JavaUtilMap>) nil_chk(triggersOnAssert_)) getWithId:normalizedSignature];
        id<JavaUtilList> trigRetract = [((id<JavaUtilMap>) nil_chk(triggersOnRetract_)) getWithId:normalizedSignature];
        if (trigAssert != nil && trigRetract == nil) {
          listOfTriggers = trigAssert;
        }
        else if (trigAssert == nil && trigRetract != nil) {
          listOfTriggers = trigRetract;
        }
        else {
          listOfTriggers = [[JavaUtilArrayList alloc] initWithJavaUtilCollection:trigAssert];
          [listOfTriggers addAllWithJavaUtilCollection:trigRetract];
        }
      }
      break;
      default:
      {
        @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Unsupported trigger event [%@", [((ComIgormaznitsaProlLogicTriggersProlTriggerTypeEnum *) nil_chk(observedEvent)) name]]];
      }
    }
    if (listOfTriggers != nil) {
      triggersToProcess = [listOfTriggers toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[listOfTriggers size] type:[IOSClass classWithProtocol:@protocol(ComIgormaznitsaProlLogicTriggersProlTrigger)]]];
    }
  }
  @finally {
    [triggerLocker_ unlock];
  }
  if (triggersToProcess != nil) {
    ComIgormaznitsaProlLogicTriggersTriggerEvent *event = [[ComIgormaznitsaProlLogicTriggersTriggerEvent alloc] initWithComIgormaznitsaProlLogicProlContext:self withNSString:normalizedSignature withComIgormaznitsaProlLogicTriggersProlTriggerTypeEnum:observedEvent];
    for (int li = 0; li < (int) [triggersToProcess count]; li++) {
      id<ComIgormaznitsaProlLogicTriggersProlTrigger> trigger = IOSObjectArray_Get(triggersToProcess, li);
      @try {
        [((id<ComIgormaznitsaProlLogicTriggersProlTrigger>) nil_chk(trigger)) onTriggerEventWithComIgormaznitsaProlLogicTriggersTriggerEvent:event];
      }
      @catch (JavaLangException *ex) {
        [((JavaUtilLoggingLogger *) nil_chk(ComIgormaznitsaProlLogicProlContext_LOG_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel SEVERE] withNSString:[NSString stringWithFormat:@"Exception during a trigger processing [%@]", [((id<ComIgormaznitsaProlLogicTriggersProlTrigger>) nil_chk(trigger)) description]] withJavaLangThrowable:ex];
      }
    }
  }
}

- (NSString *)description {
  JavaLangStringBuilder *builder = [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) [[JavaLangStringBuilder alloc] initWithNSString:@"ProlContext("]) appendWithNSString:contextName_])) appendWithChar:')'])) appendWithChar:'['])) appendWithNSString:[super description]])) appendWithChar:']'];
  return [((JavaLangStringBuilder *) nil_chk(builder)) description];
}

- (ComIgormaznitsaProlLogicProlContext *)makeCopy {
  ComIgormaznitsaProlLogicProlContext *newContext = [[ComIgormaznitsaProlLogicProlContext alloc] initWithComIgormaznitsaProlIoProlStreamManager:streamManager_ withNSString:[NSString stringWithFormat:@"%@_copy", self->contextName_] withComIgormaznitsaProlLogicKnowledgeBaseFactory:knowledgeBaseFactory_];
  [((id<JavaUtilList>) nil_chk(newContext->libraries_)) addAllWithJavaUtilCollection:libraries_];
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(knowledgeBaseLocker_)) lock];
  @try {
    newContext->knowledgeBase_ = knowledgeBase_ == nil ? nil : [knowledgeBase_ makeCopyWithComIgormaznitsaProlLogicProlContext:newContext];
  }
  @finally {
    [knowledgeBaseLocker_ unlock];
  }
  return newContext;
}

+ (void)initialize {
  if (self == [ComIgormaznitsaProlLogicProlContext class]) {
    ComIgormaznitsaProlLogicProlContext_LOG_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[ComIgormaznitsaProlLogicProlContext class]] getCanonicalName]];
    ComIgormaznitsaProlLogicProlContext_PROL_CORE_LIBRARY_ = [[ComIgormaznitsaProlLibrariesProlCoreLibrary alloc] init];
  }
}

- (void)copyAllFieldsTo:(ComIgormaznitsaProlLogicProlContext *)other {
  [super copyAllFieldsTo:other];
  other->contextName_ = contextName_;
  other->currentInputStream_ = currentInputStream_;
  other->currentOutputStream_ = currentOutputStream_;
  other->defaultTraceListener_ = defaultTraceListener_;
  other->executorAndlockTableLocker_ = executorAndlockTableLocker_;
  other->executorService_ = executorService_;
  other->halted_ = halted_;
  other->inputStreams_ = inputStreams_;
  other->ioLocker_ = ioLocker_;
  other->knowledgeBase_ = knowledgeBase_;
  other->knowledgeBaseFactory_ = knowledgeBaseFactory_;
  other->knowledgeBaseLocker_ = knowledgeBaseLocker_;
  other->libLocker_ = libLocker_;
  other->libraries_ = libraries_;
  other->lockerTable_ = lockerTable_;
  other->mappedObjectLocker_ = mappedObjectLocker_;
  other->mappedObjectSearchers_ = mappedObjectSearchers_;
  other->outputStreams_ = outputStreams_;
  other->pipes_ = pipes_;
  other->streamManager_ = streamManager_;
  other->triggerLocker_ = triggerLocker_;
  other->triggersOnAssert_ = triggersOnAssert_;
  other->triggersOnRetract_ = triggersOnRetract_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getDefaultTraceListener", NULL, "Lcom.igormaznitsa.prol.trace.TraceListener;", 0x1, NULL },
    { "setDefaultTraceListenerWithComIgormaznitsaProlTraceTraceListener:", "setDefaultTraceListener", "V", 0x1, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x11, NULL },
    { "getKnowledgeBaseFactory", NULL, "Lcom.igormaznitsa.prol.logic.KnowledgeBaseFactory;", 0x1, NULL },
    { "initWithNSString:", "ProlContext", NULL, 0x1, "Ljava.io.IOException;Ljava.lang.InterruptedException;" },
    { "initWithNSString:withComIgormaznitsaProlIoProlStreamManager:", "ProlContext", NULL, 0x1, "Ljava.io.IOException;Ljava.lang.InterruptedException;" },
    { "initWithNSString:withComIgormaznitsaProlIoProlStreamManager:withComIgormaznitsaProlContainersKnowledgeBase:", "ProlContext", NULL, 0x1, "Ljava.io.IOException;Ljava.lang.InterruptedException;" },
    { "initWithComIgormaznitsaProlIoProlStreamManager:withNSString:withComIgormaznitsaProlLogicKnowledgeBaseFactory:", "ProlContext", NULL, 0x2, "Ljava.io.IOException;" },
    { "changeKnowledgeBaseWithNSString:withNSString:", "changeKnowledgeBase", "V", 0x1, NULL },
    { "addMappedObjectSearcherWithComIgormaznitsaProlLogicProlMappedObjectSearcher:", "addMappedObjectSearcher", "V", 0x1, NULL },
    { "removeMappedObjectFinderWithComIgormaznitsaProlLogicProlMappedObjectSearcher:", "removeMappedObjectFinder", "V", 0x1, NULL },
    { "findMappedObjectForNameWithNSString:", "findMappedObjectForName", "Ljava.lang.Object;", 0x1, NULL },
    { "findNameForMappedObjectWithId:", "findNameForMappedObject", "Ljava.lang.String;", 0x1, NULL },
    { "findMappedObjectForTermWithComIgormaznitsaProlDataTerm:", "findMappedObjectForTerm", "Ljava.lang.Object;", 0x1, NULL },
    { "solveAsynchronouslyWithNSString:withComIgormaznitsaProlTraceTraceListener:", "solveAsynchronously", "Ljava.util.concurrent.Future;", 0x1, "Ljava.io.IOException;Ljava.lang.InterruptedException;" },
    { "solveAsynchronouslyWithComIgormaznitsaProlDataTerm:withComIgormaznitsaProlTraceTraceListener:", "solveAsynchronously", "Ljava.util.concurrent.Future;", 0x1, NULL },
    { "getContextExecutorService", NULL, "Ljava.util.concurrent.ThreadPoolExecutor;", 0x1, NULL },
    { "getLockerMap", NULL, "Ljava.util.Map;", 0x2, NULL },
    { "getLockerForNameWithNSString:", "getLockerForName", "Ljava.util.concurrent.locks.ReentrantLock;", 0x1, NULL },
    { "lockLockerForNameWithNSString:", "lockLockerForName", "V", 0x1, NULL },
    { "trylockLockerForNameWithNSString:", "trylockLockerForName", "Z", 0x1, NULL },
    { "unlockLockerForNameWithNSString:", "unlockLockerForName", "V", 0x1, NULL },
    { "getMemoryPipeForNameWithNSString:", "getMemoryPipeForName", "Lcom.igormaznitsa.prol.io.ProlMemoryPipe;", 0x11, NULL },
    { "getStreamManager", NULL, "Lcom.igormaznitsa.prol.io.ProlStreamManager;", 0x11, NULL },
    { "getCurrentOutStream", NULL, "Lcom.igormaznitsa.prol.io.ProlTextWriter;", 0x11, NULL },
    { "getCurrentInputStream", NULL, "Lcom.igormaznitsa.prol.io.ProlTextReader;", 0x1, NULL },
    { "tellWithNSString:withBoolean:", "tell", "V", 0x1, "Ljava.io.IOException;" },
    { "seeWithNSString:", "see", "V", 0x1, "Ljava.io.IOException;" },
    { "seen", NULL, "V", 0x1, "Ljava.io.IOException;" },
    { "told", NULL, "V", 0x1, "Ljava.io.IOException;" },
    { "addLibraryWithComIgormaznitsaProlLibrariesProlAbstractLibrary:", "addLibrary", "Z", 0x1, "Ljava.io.IOException;Ljava.lang.InterruptedException;" },
    { "getKnowledgeBase", NULL, "Lcom.igormaznitsa.prol.containers.KnowledgeBase;", 0x1, NULL },
    { "removeLibraryWithComIgormaznitsaProlLibrariesProlAbstractLibrary:", "removeLibrary", "Z", 0x1, NULL },
    { "writeKnowledgeBaseWithJavaIoPrintWriter:", "writeKnowledgeBase", "V", 0x1, NULL },
    { "findProcessorWithComIgormaznitsaProlDataTermStruct:", "findProcessor", "Lcom.igormaznitsa.prol.libraries.PredicateProcessor;", 0x1, NULL },
    { "hasPredicateAtLibraryForSignatureWithNSString:", "hasPredicateAtLibraryForSignature", "Z", 0x1, NULL },
    { "isSystemOperatorWithNSString:", "isSystemOperator", "Z", 0x1, NULL },
    { "getSystemOperatorForNameWithNSString:", "getSystemOperatorForName", "Lcom.igormaznitsa.prol.containers.OperatorContainer;", 0x1, NULL },
    { "hasSystemOperatorStartsWithWithNSString:", "hasSystemOperatorStartsWith", "Z", 0x1, NULL },
    { "halt", NULL, "V", 0x1, NULL },
    { "isHalted", NULL, "Z", 0x1, NULL },
    { "objectAsTermWithId:", "objectAsTerm", "Lcom.igormaznitsa.prol.data.Term;", 0x1, NULL },
    { "termAsObjectWithComIgormaznitsaProlDataTerm:", "termAsObject", "Ljava.lang.Object;", 0x1, NULL },
    { "registerTriggerWithComIgormaznitsaProlLogicTriggersProlTrigger:", "registerTrigger", "V", 0x1, NULL },
    { "unregisterTriggerWithComIgormaznitsaProlLogicTriggersProlTrigger:", "unregisterTrigger", "V", 0x1, NULL },
    { "hasRegisteredTriggersForSignatureWithNSString:withComIgormaznitsaProlLogicTriggersProlTriggerTypeEnum:", "hasRegisteredTriggersForSignature", "Z", 0x1, NULL },
    { "notifyTriggersForSignatureWithNSString:withComIgormaznitsaProlLogicTriggersProlTriggerTypeEnum:", "notifyTriggersForSignature", "V", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "makeCopy", NULL, "Lcom.igormaznitsa.prol.logic.ProlContext;", 0x1, "Ljava.io.IOException;" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "LOG_", NULL, 0x1c, "Ljava.util.logging.Logger;" },
    { "CONTEXT_HALTED_MSG_", NULL, 0x1a, "Ljava.lang.String;" },
    { "contextName_", NULL, 0x12, "Ljava.lang.String;" },
    { "ENGINE_VERSION_", NULL, 0x19, "Ljava.lang.String;" },
    { "ENGINE_NAME_", NULL, 0x19, "Ljava.lang.String;" },
    { "USER_STREAM_", NULL, 0x1a, "Ljava.lang.String;" },
    { "knowledgeBase_", NULL, 0x2, "Lcom.igormaznitsa.prol.containers.KnowledgeBase;" },
    { "knowledgeBaseLocker_", NULL, 0x12, "Ljava.util.concurrent.locks.ReentrantLock;" },
    { "libraries_", NULL, 0x12, "Ljava.util.List;" },
    { "PROL_CORE_LIBRARY_", NULL, 0x1a, "Lcom.igormaznitsa.prol.libraries.ProlCoreLibrary;" },
    { "streamManager_", NULL, 0x12, "Lcom.igormaznitsa.prol.io.ProlStreamManager;" },
    { "inputStreams_", NULL, 0x12, "Ljava.util.Map;" },
    { "outputStreams_", NULL, 0x12, "Ljava.util.Map;" },
    { "pipes_", NULL, 0x12, "Ljava.util.Map;" },
    { "triggersOnAssert_", NULL, 0x12, "Ljava.util.Map;" },
    { "triggersOnRetract_", NULL, 0x12, "Ljava.util.Map;" },
    { "currentInputStream_", NULL, 0x2, "Lcom.igormaznitsa.prol.io.ProlTextReader;" },
    { "currentOutputStream_", NULL, 0x2, "Lcom.igormaznitsa.prol.io.ProlTextWriter;" },
    { "halted_", NULL, 0x42, "Z" },
    { "executorService_", NULL, 0x2, "Ljava.util.concurrent.ThreadPoolExecutor;" },
    { "lockerTable_", NULL, 0x2, "Ljava.util.Map;" },
    { "executorAndlockTableLocker_", NULL, 0x12, "Ljava.util.concurrent.locks.ReentrantLock;" },
    { "mappedObjectSearchers_", NULL, 0x12, "Ljava.util.List;" },
    { "mappedObjectLocker_", NULL, 0x12, "Ljava.util.concurrent.locks.ReentrantLock;" },
    { "ioLocker_", NULL, 0x12, "Ljava.util.concurrent.locks.ReentrantLock;" },
    { "libLocker_", NULL, 0x12, "Ljava.util.concurrent.locks.ReentrantLock;" },
    { "triggerLocker_", NULL, 0x12, "Ljava.util.concurrent.locks.ReentrantLock;" },
    { "defaultTraceListener_", NULL, 0x2, "Lcom.igormaznitsa.prol.trace.TraceListener;" },
    { "knowledgeBaseFactory_", NULL, 0x12, "Lcom.igormaznitsa.prol.logic.KnowledgeBaseFactory;" },
  };
  static J2ObjcClassInfo _ComIgormaznitsaProlLogicProlContext = { "ProlContext", "com.igormaznitsa.prol.logic", NULL, 0x11, 49, methods, 29, fields, 0, NULL};
  return &_ComIgormaznitsaProlLogicProlContext;
}

@end
@implementation ComIgormaznitsaProlLogicProlContext_ProlContextInsideThreadFactory

- (id)initWithComIgormaznitsaProlLogicProlContext:(ComIgormaznitsaProlLogicProlContext *)owner {
  if (self = [super init]) {
    self->ownLOG_ = [ComIgormaznitsaProlLogicProlContext LOG];
    self->ownercontextName_ = ((ComIgormaznitsaProlLogicProlContext *) nil_chk(owner))->contextName_;
  }
  return self;
}

- (JavaLangThread *)newThreadWithJavaLangRunnable:(id<JavaLangRunnable>)runner {
  JavaLangThread *thread = [[JavaLangThread alloc] initWithJavaLangRunnable:runner withNSString:[NSString stringWithFormat:@"Prol_%@_%@", ownercontextName_, [((id<JavaLangRunnable>) nil_chk(runner)) description]]];
  [thread setDaemonWithBoolean:YES];
  [thread setUncaughtExceptionHandlerWithJavaLangThread_UncaughtExceptionHandler:self];
  return thread;
}

- (void)uncaughtExceptionWithJavaLangThread:(JavaLangThread *)thread
                      withJavaLangThrowable:(JavaLangThrowable *)exception {
  [((JavaUtilLoggingLogger *) nil_chk([ComIgormaznitsaProlLogicProlContext LOG])) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel SEVERE] withNSString:[NSString stringWithFormat:@"Uncaught exception detected at %@[%@]", [((JavaLangThread *) nil_chk(thread)) getName], [((JavaLangThrowable *) nil_chk(exception)) description]] withJavaLangThrowable:exception];
}

- (void)rejectedExecutionWithJavaLangRunnable:(id<JavaLangRunnable>)r
     withJavaUtilConcurrentThreadPoolExecutor:(JavaUtilConcurrentThreadPoolExecutor *)executor {
  [((JavaUtilLoggingLogger *) nil_chk([ComIgormaznitsaProlLogicProlContext LOG])) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel SEVERE] withNSString:@"Rejected execution!  {0}''{1}''" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [((id<JavaLangRunnable>) nil_chk(r)) description], ownercontextName_ } count:2 type:[IOSClass classWithClass:[NSObject class]]]];
  @throw [[JavaLangInternalError alloc] initWithNSString:[NSString stringWithFormat:@"A Prol thread was rejected. [%@]", ownercontextName_]];
}

- (void)copyAllFieldsTo:(ComIgormaznitsaProlLogicProlContext_ProlContextInsideThreadFactory *)other {
  [super copyAllFieldsTo:other];
  other->ownLOG_ = ownLOG_;
  other->ownercontextName_ = ownercontextName_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithComIgormaznitsaProlLogicProlContext:", "ProlContextInsideThreadFactory", NULL, 0x0, NULL },
    { "newThreadWithJavaLangRunnable:", "newThread", "Ljava.lang.Thread;", 0x1, NULL },
    { "uncaughtExceptionWithJavaLangThread:withJavaLangThrowable:", "uncaughtException", "V", 0x1, NULL },
    { "rejectedExecutionWithJavaLangRunnable:withJavaUtilConcurrentThreadPoolExecutor:", "rejectedExecution", "V", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "ownLOG_", NULL, 0x12, "Ljava.util.logging.Logger;" },
    { "ownercontextName_", NULL, 0x12, "Ljava.lang.String;" },
  };
  static J2ObjcClassInfo _ComIgormaznitsaProlLogicProlContext_ProlContextInsideThreadFactory = { "ProlContextInsideThreadFactory", "com.igormaznitsa.prol.logic", "ProlContext", 0x1a, 4, methods, 2, fields, 0, NULL};
  return &_ComIgormaznitsaProlLogicProlContext_ProlContextInsideThreadFactory;
}

@end
@implementation ComIgormaznitsaProlLogicProlContext_$1

- (void)run {
  ComIgormaznitsaProlLogicGoal *asyncGoal = nil;
  @try {
    asyncGoal = [[ComIgormaznitsaProlLogicGoal alloc] initWithComIgormaznitsaProlDataTerm:val$goal_ withComIgormaznitsaProlLogicProlContext:val$thisContext_ withComIgormaznitsaProlTraceTraceListener:val$traceListener_];
  }
  @catch (JavaLangException *ex) {
    [((JavaUtilLoggingLogger *) nil_chk([ComIgormaznitsaProlLogicProlContext LOG])) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel SEVERE] withNSString:[NSString stringWithFormat:@"Can't create a goal from the term '%@'", [((ComIgormaznitsaProlDataTerm *) nil_chk(val$goal_)) description]] withJavaLangThrowable:ex];
    return;
  }
  @try {
    while (![((JavaLangThread *) nil_chk([JavaLangThread currentThread])) isInterrupted]) {
      ComIgormaznitsaProlDataTerm *result = [((ComIgormaznitsaProlLogicGoal *) nil_chk(asyncGoal)) solve];
      if (result == nil) {
        break;
      }
    }
  }
  @catch (JavaLangInterruptedException *ex) {
    [((JavaUtilLoggingLogger *) nil_chk([ComIgormaznitsaProlLogicProlContext LOG])) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel INFO] withNSString:[NSString stringWithFormat:@"Asynchronous thread for '%@' has been interrupted", [((ComIgormaznitsaProlDataTerm *) nil_chk(val$goal_)) description]] withJavaLangThrowable:ex];
  }
}

- (id)initWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)capture$0
  withComIgormaznitsaProlLogicProlContext:(ComIgormaznitsaProlLogicProlContext *)capture$1
withComIgormaznitsaProlTraceTraceListener:(id<ComIgormaznitsaProlTraceTraceListener>)capture$2 {
  val$goal_ = capture$0;
  val$thisContext_ = capture$1;
  val$traceListener_ = capture$2;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL },
    { "initWithComIgormaznitsaProlDataTerm:withComIgormaznitsaProlLogicProlContext:withComIgormaznitsaProlTraceTraceListener:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "val$goal_", NULL, 0x1012, "Lcom.igormaznitsa.prol.data.Term;" },
    { "val$thisContext_", NULL, 0x1012, "Lcom.igormaznitsa.prol.logic.ProlContext;" },
    { "val$traceListener_", NULL, 0x1012, "Lcom.igormaznitsa.prol.trace.TraceListener;" },
  };
  static J2ObjcClassInfo _ComIgormaznitsaProlLogicProlContext_$1 = { "$1", "com.igormaznitsa.prol.logic", "ProlContext", 0x8000, 2, methods, 3, fields, 0, NULL};
  return &_ComIgormaznitsaProlLogicProlContext_$1;
}

@end
