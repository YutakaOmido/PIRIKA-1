//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/igormaznitsa/prol/logic/VariableStateSnapshot.java
//
//  Created by katsura on 14/04/13.
//

#include "IOSObjectArray.h"
#include "com/igormaznitsa/prol/data/Term.h"
#include "com/igormaznitsa/prol/data/TermList.h"
#include "com/igormaznitsa/prol/data/TermStruct.h"
#include "com/igormaznitsa/prol/data/Var.h"
#include "com/igormaznitsa/prol/logic/VariableStateSnapshot.h"
#include "com/igormaznitsa/prol/utils/IntegerHashSet.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"

@implementation ComIgormaznitsaProlLogicVariableStateSnapshot

- (id)initWithComIgormaznitsaProlLogicVariableStateSnapshot:(ComIgormaznitsaProlLogicVariableStateSnapshot *)snapshot {
  if (self = [super init]) {
    containers_ = [[JavaUtilLinkedList alloc] init];
    id<JavaUtilList> thatContainers = ((ComIgormaznitsaProlLogicVariableStateSnapshot *) nil_chk(snapshot))->containers_;
    id<JavaUtilIterator> iterator = [thatContainers iterator];
    id<JavaUtilList> changed = nil;
    processedVariables_ = [[ComIgormaznitsaProlUtilsIntegerHashSet alloc] init];
    while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
      ComIgormaznitsaProlLogicVariableStateSnapshot_VariableContainer *container = [iterator next];
      if ([((ComIgormaznitsaProlLogicVariableStateSnapshot_VariableContainer *) nil_chk(container)) isChanged]) {
        if (changed == nil) {
          changed = [[JavaUtilArrayList alloc] initWithInt:16];
        }
        [((id<JavaUtilList>) nil_chk(changed)) addWithId:container];
      }
      else {
        [processedVariables_ addWithInt:[((ComIgormaznitsaProlDataVar *) nil_chk(container->variable_)) getVarUID]];
        [containers_ addWithId:container];
      }
    }
    if (changed != nil) {
      id<JavaUtilIterator> iter = [changed iterator];
      while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
        ComIgormaznitsaProlLogicVariableStateSnapshot_VariableContainer *container = [iter next];
        int uid = [((ComIgormaznitsaProlDataVar *) nil_chk(((ComIgormaznitsaProlLogicVariableStateSnapshot_VariableContainer *) nil_chk(container))->variable_)) getVarUID];
        if (![processedVariables_ containsWithInt:uid]) {
          [processedVariables_ addWithInt:uid];
          [containers_ addWithId:[[ComIgormaznitsaProlLogicVariableStateSnapshot_VariableContainer alloc] initWithComIgormaznitsaProlDataVar:container->variable_]];
          [self extractAllVariablesWithComIgormaznitsaProlDataTerm:[container->variable_ getThisValue]];
        }
      }
    }
    processedVariables_ = nil;
  }
  return self;
}

- (id)initWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)source {
  if (self = [super init]) {
    containers_ = [[JavaUtilLinkedList alloc] init];
    [self extractAllVariablesWithComIgormaznitsaProlDataTerm:source];
    processedVariables_ = nil;
  }
  return self;
}

- (void)extractAllVariablesWithComIgormaznitsaProlDataTerm:(ComIgormaznitsaProlDataTerm *)src {
  if (src == nil) {
    return;
  }
  switch ([((ComIgormaznitsaProlDataTerm *) nil_chk(src)) getTermType]) {
    case ComIgormaznitsaProlDataTerm_TYPE_LIST:
    {
      ComIgormaznitsaProlDataTermList *list = (ComIgormaznitsaProlDataTermList *) check_class_cast(src, [ComIgormaznitsaProlDataTermList class]);
      if (![list isNullList]) {
        [self extractAllVariablesWithComIgormaznitsaProlDataTerm:[list getHead]];
        [self extractAllVariablesWithComIgormaznitsaProlDataTerm:[list getTail]];
      }
    }
    break;
    case ComIgormaznitsaProlDataTerm_TYPE_STRUCT:
    {
      ComIgormaznitsaProlDataTermStruct *struct_ = (ComIgormaznitsaProlDataTermStruct *) check_class_cast(src, [ComIgormaznitsaProlDataTermStruct class]);
      IOSObjectArray *elements = [struct_ getElementsAsArray];
      int len = (int) [((IOSObjectArray *) nil_chk(elements)) count];
      for (int li = 0; li < len; li++) {
        [self extractAllVariablesWithComIgormaznitsaProlDataTerm:IOSObjectArray_Get(elements, li)];
      }
    }
    break;
    case ComIgormaznitsaProlDataTerm_TYPE_VAR:
    {
      if (processedVariables_ == nil) {
        processedVariables_ = [[ComIgormaznitsaProlUtilsIntegerHashSet alloc] init];
      }
      ComIgormaznitsaProlDataVar *var = (ComIgormaznitsaProlDataVar *) check_class_cast(src, [ComIgormaznitsaProlDataVar class]);
      JavaLangInteger *uid = [JavaLangInteger valueOfWithInt:[var getVarUID]];
      if (![((ComIgormaznitsaProlUtilsIntegerHashSet *) nil_chk(processedVariables_)) containsWithInt:[uid intValue]]) {
        [processedVariables_ addWithInt:[uid intValue]];
        [((id<JavaUtilList>) nil_chk(containers_)) addWithId:[[ComIgormaznitsaProlLogicVariableStateSnapshot_VariableContainer alloc] initWithComIgormaznitsaProlDataVar:var]];
        ComIgormaznitsaProlDataTerm *value = [var getThisValue];
        if (value != nil) {
          [self extractAllVariablesWithComIgormaznitsaProlDataTerm:value];
        }
      }
    }
    break;
  }
}

- (void)resetToState {
  id<JavaUtilIterator> iterator = [((id<JavaUtilList>) nil_chk(containers_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
    [((ComIgormaznitsaProlLogicVariableStateSnapshot_VariableContainer *) nil_chk([iterator next])) resetToEtalon];
  }
}

- (int)getSize {
  return [((id<JavaUtilList>) nil_chk(containers_)) size];
}

- (NSString *)description {
  JavaLangStringBuilder *buffer = [[JavaLangStringBuilder alloc] init];
  (void) [buffer appendWithNSString:[super description]];
  (void) [buffer appendWithChar:'['];
  id<JavaUtilIterator> iter = [((id<JavaUtilList>) nil_chk(containers_)) iterator];
  BOOL notfirst = NO;
  while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
    ComIgormaznitsaProlLogicVariableStateSnapshot_VariableContainer *varcont = [iter next];
    if (notfirst) {
      (void) [buffer appendWithChar:','];
    }
    else {
      notfirst = YES;
    }
    NSString *valueTxt = nil;
    ComIgormaznitsaProlDataTerm *value = ((ComIgormaznitsaProlLogicVariableStateSnapshot_VariableContainer *) nil_chk(varcont))->variable_;
    if (value == nil) {
      valueTxt = @".NULL";
    }
    else {
      if ([value getTermType] == ComIgormaznitsaProlDataTerm_TYPE_VAR) {
        ComIgormaznitsaProlDataVar *var = (ComIgormaznitsaProlDataVar *) check_class_cast(value, [ComIgormaznitsaProlDataVar class]);
        if ([var isUndefined]) {
          valueTxt = [NSString stringWithFormat:@"%@{%d}", [var getSourceLikeRepresentation], [var getVarUID]];
        }
        else {
          valueTxt = [NSString stringWithFormat:@"%@{%d}[%@]", [var getSourceLikeRepresentation], [var getVarUID], [((ComIgormaznitsaProlDataTerm *) nil_chk([var getValue])) description]];
        }
      }
      else {
        valueTxt = [value forWrite];
      }
    }
    ComIgormaznitsaProlDataVar *variable = varcont->variable_;
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buffer appendWithNSString:[((ComIgormaznitsaProlDataVar *) nil_chk(variable)) getSourceLikeRepresentation]])) appendWithChar:'{'])) appendWithInt:[variable getVarUID]])) appendWithChar:'}'])) appendWithChar:'='])) appendWithNSString:valueTxt];
  }
  (void) [buffer appendWithChar:']'];
  return [buffer description];
}

- (void)copyAllFieldsTo:(ComIgormaznitsaProlLogicVariableStateSnapshot *)other {
  [super copyAllFieldsTo:other];
  other->containers_ = containers_;
  other->processedVariables_ = processedVariables_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithComIgormaznitsaProlLogicVariableStateSnapshot:", "VariableStateSnapshot", NULL, 0x1, NULL },
    { "initWithComIgormaznitsaProlDataTerm:", "VariableStateSnapshot", NULL, 0x1, NULL },
    { "extractAllVariablesWithComIgormaznitsaProlDataTerm:", "extractAllVariables", "V", 0x2, NULL },
    { "resetToState", NULL, "V", 0x1, NULL },
    { "getSize", NULL, "I", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "containers_", NULL, 0x12, "Ljava.util.List;" },
    { "processedVariables_", NULL, 0x2, "Lcom.igormaznitsa.prol.utils.IntegerHashSet;" },
  };
  static J2ObjcClassInfo _ComIgormaznitsaProlLogicVariableStateSnapshot = { "VariableStateSnapshot", "com.igormaznitsa.prol.logic", NULL, 0x10, 6, methods, 2, fields, 0, NULL};
  return &_ComIgormaznitsaProlLogicVariableStateSnapshot;
}

@end
@implementation ComIgormaznitsaProlLogicVariableStateSnapshot_VariableContainer

- (id)initWithComIgormaznitsaProlDataVar:(ComIgormaznitsaProlDataVar *)var {
  if (self = [super init]) {
    variable_ = var;
    etalonValue_ = [((ComIgormaznitsaProlDataVar *) nil_chk(var)) getThisValue];
  }
  return self;
}

- (void)resetToEtalon {
  [((ComIgormaznitsaProlDataVar *) nil_chk(variable_)) setThisValueWithComIgormaznitsaProlDataTerm:etalonValue_];
}

- (BOOL)isChanged {
  return [((ComIgormaznitsaProlDataVar *) nil_chk(variable_)) getThisValue] != etalonValue_;
}

- (void)copyAllFieldsTo:(ComIgormaznitsaProlLogicVariableStateSnapshot_VariableContainer *)other {
  [super copyAllFieldsTo:other];
  other->etalonValue_ = etalonValue_;
  other->variable_ = variable_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithComIgormaznitsaProlDataVar:", "VariableContainer", NULL, 0x1, NULL },
    { "resetToEtalon", NULL, "V", 0x1, NULL },
    { "isChanged", NULL, "Z", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "variable_", NULL, 0x10, "Lcom.igormaznitsa.prol.data.Var;" },
    { "etalonValue_", NULL, 0x10, "Lcom.igormaznitsa.prol.data.Term;" },
  };
  static J2ObjcClassInfo _ComIgormaznitsaProlLogicVariableStateSnapshot_VariableContainer = { "VariableContainer", "com.igormaznitsa.prol.logic", "VariableStateSnapshot", 0x1a, 3, methods, 2, fields, 0, NULL};
  return &_ComIgormaznitsaProlLogicVariableStateSnapshot_VariableContainer;
}

@end
